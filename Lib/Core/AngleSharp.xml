<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AngleSharp</name>
    </assembly>
    <members>
        <member name="T:AngleSharp.Attributes.Accessors">
            <summary>
            The various DOM object accessor types.
            </summary>
        </member>
        <member name="F:AngleSharp.Attributes.Accessors.None">
            <summary>
            Specifies that the property does not have any special meaning.
            </summary>
        </member>
        <member name="F:AngleSharp.Attributes.Accessors.Getter">
            <summary>
            Specifies that the property or method should be handled as a getter.
            </summary>
        </member>
        <member name="F:AngleSharp.Attributes.Accessors.Setter">
            <summary>
            Specifies that the property or method should be handled as a setter.
            </summary>
        </member>
        <member name="F:AngleSharp.Attributes.Accessors.Deleter">
            <summary>
            Specifies that the property or method should be handled by delete.
            </summary>
        </member>
        <member name="F:AngleSharp.Attributes.Accessors.Adder">
            <summary>
            Specifies that the method should be handled as an event adder.
            </summary>
        </member>
        <member name="F:AngleSharp.Attributes.Accessors.Remover">
            <summary>
            Specifies that the method should be handled by an event remover.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomAccessorAttribute">
            <summary>
            This attribute decorates official DOM objects as specified by the W3C.
            You could use it to check if the given property or method should be
            placed on special locations, e.g. as a getter, setter or handled by a 
            delete call.
            </summary>
        </member>
        <member name="M:AngleSharp.Attributes.DomAccessorAttribute.#ctor(AngleSharp.Attributes.Accessors)">
            <summary>
            Creates a new DomAccessorAttribute.
            </summary>
            <param name="type">
            The type of accessors to apply.
            </param>
        </member>
        <member name="P:AngleSharp.Attributes.DomAccessorAttribute.Type">
            <summary>
            Gets the accessor types for the given property or method.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomConstructorAttribute">
            <summary>
            This attribute is used to mark a constructor as being
            accessible from scripts.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomDescriptionAttribute">
            <summary>
            This attribute is used to place a description on some object.
            The description can then be read out at runtime.
            </summary>
        </member>
        <member name="M:AngleSharp.Attributes.DomDescriptionAttribute.#ctor(System.String)">
            <summary>
            Creates a new DomDescriptionAttribute.
            </summary>
            <param name="description">
            The description of the decorated type or member.
            </param>
        </member>
        <member name="P:AngleSharp.Attributes.DomDescriptionAttribute.Description">
            <summary>
            Gets the official name of the given class,
            method or property.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomExposedAttribute">
            <summary>
            This attribute is used to determine the hosting interface.
            </summary>
        </member>
        <member name="M:AngleSharp.Attributes.DomExposedAttribute.#ctor(System.String)">
            <summary>
            Creates a new DomExposedAttribute.
            </summary>
            <param name="target">
            The official name of the target interface.
            </param>
        </member>
        <member name="P:AngleSharp.Attributes.DomExposedAttribute.Target">
            <summary>
            Gets the official name of the target interface.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomHistoricalAttribute">
            <summary>
            This attribute decorates official DOM objects that should no longer be
            used and are therefore considered deprecated.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomInitDictAttribute">
            <summary>
            This attribute decorates official DOM methods as specified by the W3C.
            It tells scripting engines that bags with objects should be provided,
            which have to be expanded to be used as arguments.
            </summary>
        </member>
        <member name="M:AngleSharp.Attributes.DomInitDictAttribute.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new DomInitDict attribute.
            </summary>
            <param name="offset">The start index of the dictionary.</param>
            <param name="optional">Has a dictionary to be present?</param>
        </member>
        <member name="P:AngleSharp.Attributes.DomInitDictAttribute.Offset">
            <summary>
            Gets the offset of the passed arguments. Arguments before the offset
            will be skipped and are not part of the dictionary.
            </summary>
        </member>
        <member name="P:AngleSharp.Attributes.DomInitDictAttribute.IsOptional">
            <summary>
            Gets if the dictionary is completely optional and does not have to
            be present.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomInstanceAttribute">
            <summary>
            Represents a single instance object.
            </summary>
        </member>
        <member name="M:AngleSharp.Attributes.DomInstanceAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">The name to use.</param>
        </member>
        <member name="P:AngleSharp.Attributes.DomInstanceAttribute.Name">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomLenientThisAttribute">
            <summary>
            The attribute indicates that invocations of the attribute's getter
            or setter with a this value that is not an object that implements
            the interface on which the attribute appears will be ignored.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomLiteralsAttribute">
            <summary>
            This attribute is used to mark an enum as being just a collection of
            constant string values (with the names being the strings).
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomNameAttribute">
            <summary>
            This attribute decorates official DOM objects as specified by the W3C.
            You could use it to detect all DOM types or get the correct spelling
            (PascalCase to camelCase). Multiple usages are allowed.
            </summary>
        </member>
        <member name="M:AngleSharp.Attributes.DomNameAttribute.#ctor(System.String)">
            <summary>
            Creates a new DomNameAttribute.
            </summary>
            <param name="officialName">
            The official name of the decorated type or member.
            </param>
        </member>
        <member name="P:AngleSharp.Attributes.DomNameAttribute.OfficialName">
            <summary>
            Gets the official name of the given class, method or property.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomNoInterfaceObjectAttribute">
            <summary>
            This attribute appears on an interfaces, which must not be available 
            in the ECMAScript binding.
            </summary>
        </member>
        <member name="T:AngleSharp.Attributes.DomPutForwardsAttribute">
            <summary>
            Decorates a read only attribute declaration whose type is an interface
            type. It indicates that assigning to the attribute will have specific
            behavior. Namely, the assignment is "forwarded" to the named attribute.
            </summary>
        </member>
        <member name="M:AngleSharp.Attributes.DomPutForwardsAttribute.#ctor(System.String)">
            <summary>
            Creates a new DomPutForwardsAttribute.
            </summary>
            <param name="propertyName">
            The official name of the property to forward to.
            </param>
        </member>
        <member name="P:AngleSharp.Attributes.DomPutForwardsAttribute.PropertyName">
            <summary>
            Gets the official name of the property to forward assignments to.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.Dom.CacheStatus">
            <summary>
            An enumeration over all possible cache states.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Dom.CacheStatus.Uncached">
            <summary>
            The resource is uncached.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Dom.CacheStatus.Idle">
            <summary>
            The cache status checker is idle.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Dom.CacheStatus.Checking">
            <summary>
            The cache status is being checked.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Dom.CacheStatus.Downloading">
            <summary>
            The resource is being downloaded.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Dom.CacheStatus.UpdateReady">
            <summary>
            An update for the resource is available.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Dom.CacheStatus.Obsolete">
            <summary>
            The resource is practically obsolete.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.Dom.Events.InteractivityEvent`1">
            <summary>
            The event that is published in case of an interactivity
            request coming from the dynamic DOM.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.Events.InteractivityEvent`1.#ctor(System.String,`0)">
            <summary>
            Creates a new event for an interactivity request.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be transported.</param>
        </member>
        <member name="P:AngleSharp.Browser.Dom.Events.InteractivityEvent`1.Result">
            <summary>
            Gets the currently set result, if any.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.Events.InteractivityEvent`1.SetResult(System.Threading.Tasks.Task)">
            <summary>
            Sets the result to the given value. Multiple results
            will be combined accordingly.
            </summary>
            <param name="value">The resulting task.</param>
        </member>
        <member name="P:AngleSharp.Browser.Dom.Events.InteractivityEvent`1.Data">
            <summary>
            Gets the transported data.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.Dom.IApplicationCache">
            <summary>
            Provides a way to cache web resources to improve performance, reduce
            server loads, and enable access to content when there is no network
            connectivity.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.IApplicationCache.Status">
            <summary>
            Gets the status of the application cache.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.IApplicationCache.Update">
            <summary>
            Performs an update of the application cache.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.IApplicationCache.Abort">
            <summary>
            Aborts the current action (download / update) of the cache.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.IApplicationCache.Swap">
            <summary>
            Swaps the application's cache.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.Dom.IApplicationCache.Checking">
            <summary>
            Event triggered when the cache is being checked.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.Dom.IApplicationCache.Error">
            <summary>
            Event triggered after an error occurred.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.Dom.IApplicationCache.NoUpdate">
            <summary>
            Event triggered after no update is available.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.Dom.IApplicationCache.Downloading">
            <summary>
            Event triggered when the download started.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.Dom.IApplicationCache.Progress">
            <summary>
            Event triggered after progress.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.Dom.IApplicationCache.UpdateReady">
            <summary>
            Event triggered after an update is ready to be applied.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.Dom.IApplicationCache.Cached">
            <summary>
            Event triggered after the cache has been updated.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.Dom.IApplicationCache.Obsolete">
            <summary>
            Event triggered after the cache has been marked obsolete.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.Dom.IHistory">
            <summary>
            The History interface allows to manipulate the browser session history,
            that is the pages visited in the tab or frame that the current page is
            loaded in.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.IHistory.Length">
            <summary>
            Gets the number of elements in the session history, including the
            currently loaded page.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.IHistory.Index">
            <summary>
            Gets the index within the session history.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.IHistory.Item(System.Int32)">
            <summary>
            Gets the document at the given position of the history.
            </summary>
            <param name="index">The position within the history.</param>
            <returns>The document related to that position.</returns>
        </member>
        <member name="P:AngleSharp.Browser.Dom.IHistory.State">
            <summary>
            Gets an any value representing the state at the top of the history
            stack.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.IHistory.Go(System.Int32)">
            <summary>
            Loads a page from the session history, identified by its relative
            location to the current page, for example -1 for the previous page
            or 1 for the next page. When integerDelta is out of bounds (e.g. -1
            when there are no previously visited pages in the session history),
            the method doesn't do anything and doesn't raise an exception.
            Calling go() without parameters or with a non-integer argument has
            no effect.
            </summary>
            <param name="delta">The number of states to surpass.</param>
        </member>
        <member name="M:AngleSharp.Browser.Dom.IHistory.Back">
            <summary>
            Goes to the previous page in session history, the same action as
            when the user clicks the browser's Back button. Equivalent to
            history.go(-1).
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.IHistory.Forward">
            <summary>
            Goes to the next page in session history, the same action as when
            the user clicks the browser's Forward button; this is equivalent to
            history.go(1).
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.IHistory.PushState(System.Object,System.String,System.String)">
            <summary>
            Pushes the given data onto the session history stack with the
            specified title and, if provided, URL. The data is treated as
            opaque by the DOM.
            </summary>
            <param name="data">The data to use.</param>
            <param name="title">The title to take.</param>
            <param name="url">The URL to consider.</param>
        </member>
        <member name="M:AngleSharp.Browser.Dom.IHistory.ReplaceState(System.Object,System.String,System.String)">
            <summary>
            Updates the most recent entry on the history stack to have the
            specified data, title, and, if provided, URL. The data is treated
            as opaque by the DOM.
            </summary>
            <param name="data">The data to use.</param>
            <param name="title">The title to take.</param>
            <param name="url">The URL to consider.</param>
        </member>
        <member name="T:AngleSharp.Browser.Dom.INavigator">
            <summary>
            Represents the navigator information of a browsing context.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.Dom.INavigatorContentUtilities">
            <summary>
            A set of utilities to modify the navigator's behavior.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.INavigatorContentUtilities.RegisterProtocolHandler(System.String,System.String,System.String)">
            <summary>
            Allows web sites to register themselves as possible handlers for particular protocols.
            </summary>
            <param name="scheme">The protocol the site wishes to handle, specified as a string.</param>
            <param name="url">The URI to the handler as a string.</param>
            <param name="title">The title of the handler presented to the user as a string.</param>
        </member>
        <member name="M:AngleSharp.Browser.Dom.INavigatorContentUtilities.RegisterContentHandler(System.String,System.String,System.String)">
            <summary>
            Allows web sites to register themselves as possible handlers for content of a particular MIME type.
            </summary>
            <param name="mimeType">The desired MIME type as a string.</param>
            <param name="url">The URI to the handler as a string.</param>
            <param name="title">The title of the handler presented to the user as a string.</param>
        </member>
        <member name="M:AngleSharp.Browser.Dom.INavigatorContentUtilities.IsProtocolHandlerRegistered(System.String,System.String)">
            <summary>
            Checks if any handler is registered at the given URI for the specified scheme.
            </summary>
            <param name="scheme">The scheme to check for.</param>
            <param name="url">The URI to the handler.</param>
            <returns>True if a handler is registered, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Browser.Dom.INavigatorContentUtilities.IsContentHandlerRegistered(System.String,System.String)">
            <summary>
            Checks if any handler is registered at the given URI for the specified mime-type.
            </summary>
            <param name="mimeType">The mime-type to check for.</param>
            <param name="url">The URI to the handler.</param>
            <returns>True if a handler is registered, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Browser.Dom.INavigatorContentUtilities.UnregisterProtocolHandler(System.String,System.String)">
            <summary>
            Removes the specified protocol handler, if any.
            </summary>
            <param name="scheme">The name of the handled scheme to remove.</param>
            <param name="url">The URI to the handler of the scheme.</param>
        </member>
        <member name="M:AngleSharp.Browser.Dom.INavigatorContentUtilities.UnregisterContentHandler(System.String,System.String)">
            <summary>
            Removes the specified content handler, if any.
            </summary>
            <param name="mimeType">The name of the handled mime-type to remove.</param>
            <param name="url">The URI to the handler of the mime-type.</param>
        </member>
        <member name="T:AngleSharp.Browser.Dom.INavigatorId">
            <summary>
            Holds the user-agent information.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.INavigatorId.Name">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.INavigatorId.Version">
            <summary>
            Gets the version of the application.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.INavigatorId.Platform">
            <summary>
            Gets the platform of the application.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.INavigatorId.UserAgent">
            <summary>
            Gets the full name of the user-agent.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.Dom.INavigatorOnline">
            <summary>
            Connectivity information regarding the navigator.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.Dom.INavigatorOnline.IsOnline">
            <summary>
            Gets if the connection is established.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.Dom.INavigatorStorageUtilities">
            <summary>
            Defines a set of methods for working with IO.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.Dom.INavigatorStorageUtilities.WaitForStorageUpdates">
            <summary>
            Blocks the current operation until storage operations have completed.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.EncodingMetaHandler">
            <summary>
            Implementation of an encoding meta handler.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.EncodingMetaHandler.#ctor">
            <summary>
            Create a new instance of the EncodingMetaHandler
            </summary>
            <remarks>This will initialize additional encoding providers to correctly support all encodings</remarks>
        </member>
        <member name="M:AngleSharp.Browser.EncodingMetaHandler.GetEncoding(AngleSharp.Html.Dom.IHtmlMetaElement)">
            <summary>
            Gets the associated encoding, if any.
            </summary>
            <param name="element">The element to get the encoding from.</param>
            <returns>The discovered encoding or null.</returns>
        </member>
        <member name="T:AngleSharp.Browser.EventLoopExtensions">
            <summary>
            A set of useful extensions for the event loop.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.EventLoopExtensions.Enqueue(AngleSharp.Browser.IEventLoop,System.Action,AngleSharp.Browser.TaskPriority)">
            <summary>
            Enqueues another action without considering the cancellation token.
            </summary>
            <param name="loop">The loop to extend.</param>
            <param name="action">The action to enqueue.</param>
            <param name="priority">The priority of the item.</param>
        </member>
        <member name="T:AngleSharp.Browser.ICommand">
            <summary>
            Represents a command that can be executed from the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.ICommand.CommandId">
            <summary>
            The id of the command.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.ICommand.Execute(AngleSharp.Dom.IDocument,System.Boolean,System.String)">
            <summary>
            Executes the command for the given document.
            </summary>
            <param name="document">The document to alter.</param>
            <param name="showUserInterface">Should the UI be shown?</param>
            <param name="value">The argument value.</param>
            <returns>A boolean if the command could be run.</returns>
        </member>
        <member name="M:AngleSharp.Browser.ICommand.IsEnabled(AngleSharp.Dom.IDocument)">
            <summary>
            Checks if the command is currently enabled.
            </summary>
            <param name="document">The document to apply to.</param>
            <returns>A boolean if the command is enabled.</returns>
        </member>
        <member name="M:AngleSharp.Browser.ICommand.IsIndeterminate(AngleSharp.Dom.IDocument)">
            <summary>
            Checks if the command is currently neither enabled nor disabled.
            </summary>
            <param name="document">The document to apply to.</param>
            <returns>A boolean if the command is indeterminate.</returns>
        </member>
        <member name="M:AngleSharp.Browser.ICommand.IsExecuted(AngleSharp.Dom.IDocument)">
            <summary>
            Checks if the command has been run already.
            </summary>
            <param name="document">The document to apply to.</param>
            <returns>A boolean if the command has already been applied.</returns>
        </member>
        <member name="M:AngleSharp.Browser.ICommand.IsSupported(AngleSharp.Dom.IDocument)">
            <summary>
            Checks if the command is currently supported at all.
            </summary>
            <param name="document">The document to apply to.</param>
            <returns>A boolean if the command is supported.</returns>
        </member>
        <member name="M:AngleSharp.Browser.ICommand.GetValue(AngleSharp.Dom.IDocument)">
            <summary>
            Gets the value that would be changed at the moment.
            </summary>
            <param name="document">The document to apply to.</param>
            <returns>The value that would be used by the command.</returns>
        </member>
        <member name="T:AngleSharp.Browser.ICommandProvider">
            <summary>
            Represents a provider to get document commands.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.ICommandProvider.GetCommand(System.String)">
            <summary>
            Gets the command with the given id.
            </summary>
            <param name="name">The id of the command.</param>
            <returns>The document command if any.</returns>
        </member>
        <member name="T:AngleSharp.Browser.IEncodingProvider">
            <summary>
            Represents a service to determine the default encoding.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.IEncodingProvider.Suggest(System.String)">
            <summary>
            Suggests the initial Encoding for the given locale.
            </summary>
            <param name="locale">
            The locale defined by the BCP 47 language tag.
            </param>
            <returns>The suggested encoding.</returns>
        </member>
        <member name="T:AngleSharp.Browser.IEventLoop">
            <summary>
            Represents the DOM event loop processing stages and steps of algorithms.
            See 7.1.4.2 Processing model.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.IEventLoop.Enqueue(System.Action{System.Threading.CancellationToken},AngleSharp.Browser.TaskPriority)">
            <summary>
            Enqueues a given task with the associated document.
            </summary>
            <param name="action">The continuation action to enqueue.</param>
            <param name="priority">The priority to use.</param>
            <returns>The created loop entry.</returns>
        </member>
        <member name="M:AngleSharp.Browser.IEventLoop.Spin">
            <summary>
            Spins the event loop.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.IEventLoop.CancelAll">
            <summary>
            Cancels all running and remaining tasks.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.IMetaHandler">
            <summary>
            Defines the interface to be used for handling meta data.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.IMetaHandler.HandleContent(AngleSharp.Html.Dom.IHtmlMetaElement)">
            <summary>
            Handles the content of the given HTML meta element.
            </summary>
            <param name="element">The meta element.</param>
        </member>
        <member name="T:AngleSharp.Browser.IParser">
            <summary>
            Defines the basic events for all parsers.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.IParser.Parsing">
            <summary>
            Fired when a parser is starting.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.IParser.Parsed">
            <summary>
            Fired when a parser is finished.
            </summary>
        </member>
        <member name="E:AngleSharp.Browser.IParser.Error">
            <summary>
            Fired when a parse error is encountered.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.ISpellCheckService">
            <summary>
            Provides a spell correction service.
            </summary>
        </member>
        <member name="P:AngleSharp.Browser.ISpellCheckService.Culture">
            <summary>
            Gets the culture for the spell check service.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.ISpellCheckService.Ignore(System.String,System.Boolean)">
            <summary>
            Ignores the word.
            </summary>
            <param name="word">The word to ignore.</param>
            <param name="persistent">If true, should be added to dictionary. Otherwise false.</param>
        </member>
        <member name="M:AngleSharp.Browser.ISpellCheckService.IsCorrect(System.String)">
            <summary>
            Checks if the given word is correct.
            </summary>
            <param name="word">The word to check.</param>
            <returns>True if the word is correctly spelled, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Browser.ISpellCheckService.SuggestFor(System.String)">
            <summary>
            Suggests correct spellings for the given word.
            </summary>
            <param name="word">The base word.</param>
            <returns>An enumeration over possibly right variants.</returns>
        </member>
        <member name="T:AngleSharp.Browser.LocaleEncodingProvider">
            <summary>
            Represents the default loader service. This class can be inherited.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.LocaleEncodingProvider.Suggest(System.String)">
            <summary>
            Suggests the initial Encoding for the given locale.
            </summary>
            <param name="locale">
            The locale defined by the BCP 47 language tag.
            </param>
            <returns>The suggested encoding.</returns>
        </member>
        <member name="T:AngleSharp.Browser.RefreshMetaHandler">
            <summary>
            Implementation of a refresh handler.
            </summary>
        </member>
        <member name="M:AngleSharp.Browser.RefreshMetaHandler.#ctor(System.Predicate{AngleSharp.Url})">
            <summary>
            Creates a new instance of the refresh meta handler.
            </summary>
            <param name="shouldRefresh">Optionally defines a predicate.</param>
        </member>
        <member name="T:AngleSharp.Browser.Sandboxes">
            <summary>
            Setting used to restrict the abilities that potentially
            untrusted resources have.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.None">
            <summary>
            No flag is set, everything is accepted.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.Navigation">
            <summary>
            This flag prevents content from navigating browsing contexts
            other than the sandboxed browsing context itself (or browsing
            contexts further nested inside it), auxiliary browsing contexts
            (which are protected by the sandboxed auxiliary navigation
            browsing context flag defined next), and the top-level browsing
            context (which is protected by the sandboxed top-level navigation
            browsing context flag defined below).
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.AuxiliaryNavigation">
            <summary>
            This flag prevents content from creating new auxiliary browsing
            contexts, e.g. using the target attribute, or the window.open()
            method.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.TopLevelNavigation">
            <summary>
            This flag prevents content from navigating their top-level browsing
            context and prevents content from closing their top-level browsing
            context.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.Plugins">
            <summary>
            This flag prevents content from instantiating plugins, whether using
            the embed element, the object element, the applet element, or through
            navigation of a nested browsing context, unless those plugins can be
            secured.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.Origin">
            <summary>
            This flag forces content into a unique origin, thus preventing it
            from accessing other content from the same origin.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.Forms">
            <summary>
            This flag blocks form submission.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.PointerLock">
            <summary>
            This flag disables the Pointer Lock API.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.Scripts">
            <summary>
            This flag blocks script execution.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.AutomaticFeatures">
            <summary>
            This flag blocks features that trigger automatically, such as automatically
            playing a video or automatically focusing a form control.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.Fullscreen">
            <summary>
            This flag prevents content from using the requestFullscreen() method.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.DocumentDomain">
            <summary>
            This flag prevents content from using the document.domain feature to change
            the effective script origin.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.Sandboxes.Presentation">
            <summary>
            This flag allows the sandboxed content to run presentational content.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.TaskEventLoop">
            <summary>
            The default event loop.
            </summary>
        </member>
        <member name="T:AngleSharp.Browser.TaskPriority">
            <summary>
            Describes the various task priorities.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.TaskPriority.None">
            <summary>
            The lowest possible priority.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.TaskPriority.Normal">
            <summary>
            The normal priority.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.TaskPriority.Microtask">
            <summary>
            Microtasks are preferred.
            </summary>
        </member>
        <member name="F:AngleSharp.Browser.TaskPriority.Critical">
            <summary>
            Critical tasks are always executed asap.
            </summary>
        </member>
        <member name="T:AngleSharp.BrowsingContext">
            <summary>
            A simple and lightweight browsing context.
            </summary>
        </member>
        <member name="P:AngleSharp.BrowsingContext.Active">
            <summary>
            Gets or sets the currently active document.
            </summary>
        </member>
        <member name="P:AngleSharp.BrowsingContext.Creator">
            <summary>
            Gets the document that created the current context, if any. The
            creator is the active document of the parent at the time of
            creation.
            </summary>
        </member>
        <member name="P:AngleSharp.BrowsingContext.Current">
            <summary>
            Gets the current window proxy.
            </summary>
        </member>
        <member name="P:AngleSharp.BrowsingContext.Parent">
            <summary>
            Gets the parent of the current context, if any. If a parent is
            available, then the current context contains only embedded
            documents.
            </summary>
        </member>
        <member name="P:AngleSharp.BrowsingContext.SessionHistory">
            <summary>
            Gets the session history of the given browsing context, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.BrowsingContext.Security">
            <summary>
            Gets the sandboxing flag of the context.
            </summary>
        </member>
        <member name="M:AngleSharp.BrowsingContext.GetService``1">
            <summary>
            Gets an instance of the given service.
            </summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>The instance of the service or null.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContext.GetServices``1">
            <summary>
            Gets all registered instances of the given service.
            </summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>An enumerable with all service instances.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContext.CreateChild(System.String,AngleSharp.Browser.Sandboxes)">
            <summary>
            Creates a new named browsing context as child of the given parent.
            </summary>
            <param name="name">The name of the child context, if any.</param>
            <param name="security">The security flags to apply.</param>
            <returns></returns>
        </member>
        <member name="M:AngleSharp.BrowsingContext.FindChild(System.String)">
            <summary>
            Finds a named browsing context.
            </summary>
            <param name="name">The name of the browsing context.</param>
            <returns>The found instance, if any.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContext.New(AngleSharp.IConfiguration)">
            <summary>
            Creates a new browsing context with the given configuration, or the
            default configuration, if no configuration is provided.
            </summary>
            <param name="configuration">The optional configuration.</param>
            <returns>The browsing context to use.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContext.NewFrom``1(``0)">
            <summary>
            Creates a new browsing context from the given service.
            </summary>
            <param name="instance">The service instance.</param>
            <returns>The browsing context to use.</returns>
        </member>
        <member name="T:AngleSharp.BrowsingContextExtensions">
            <summary>
            A set of extensions for the browsing context.
            </summary>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.OpenNewAsync(AngleSharp.IBrowsingContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Opens a new document without any content in the given context.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="url">The optional base URL of the document.</param>
            <param name="cancellation">The cancellation token (optional)</param>
            <returns>The new, yet empty, document.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.OpenAsync(AngleSharp.IBrowsingContext,AngleSharp.Io.IResponse,System.Threading.CancellationToken)">
            <summary>
            Opens a new document created from the response asynchronously in
            the given context.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="response">The response to examine.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The task that creates the document.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.OpenAsync(AngleSharp.IBrowsingContext,AngleSharp.Io.DocumentRequest,System.Threading.CancellationToken)">
            <summary>
            Opens a new document loaded from the specified request
            asynchronously in the given context.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="request">The request to issue.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The task that creates the document.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.OpenAsync(AngleSharp.IBrowsingContext,AngleSharp.Url,System.Threading.CancellationToken)">
            <summary>
            Opens a new document loaded from the provided url asynchronously in
            the given context.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="url">The URL to load.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The task that creates the document.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.OpenAsync(AngleSharp.IBrowsingContext,System.Action{AngleSharp.Io.VirtualResponse},System.Threading.CancellationToken)">
            <summary>
            Opens a new document loaded from a virtual response that can be
            filled via the provided callback.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="request">Callback with the response to setup.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The task that creates the document.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.OpenAsync(AngleSharp.IBrowsingContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Opens a new document loaded from the provided address asynchronously
            in the given context.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="address">The address to load.</param>
            <param name="cancellation">The cancellation token (optional)</param>
            <returns>The task that creates the document.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.NavigateTo(AngleSharp.IBrowsingContext,AngleSharp.Dom.IDocument)">
            <summary>
            Navigates to the given document. Includes the document in the
            session history and sets it as the active document.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="document">The new document.</param>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetDefaultEncoding(AngleSharp.IBrowsingContext)">
            <summary>
            Gets the default encoding to use as initial guess.
            </summary>
            <param name="context">The current context.</param>
            <returns>The encoding from the provider or UTF-8.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetCulture(AngleSharp.IBrowsingContext)">
            <summary>
            Gets the culture info associated with the current context.
            </summary>
            <param name="context">The current context.</param>
            <returns>The culture info assigned to the context.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetCultureFrom(AngleSharp.IBrowsingContext,System.String)">
            <summary>
            Gets the culture from the language string (or the current culture).
            </summary>
            <param name="context">The current context.</param>
            <param name="language">The ISO culture name.</param>
            <returns>
            The culture info representing the language or the current culture.
            </returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetLanguage(AngleSharp.IBrowsingContext)">
            <summary>
            Gets the language of the current context.
            </summary>
            <param name="context">The current context.</param>
            <returns>The ISO name of the culture.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetFactory``1(AngleSharp.IBrowsingContext)">
            <summary>
            Gets a factory service instance. Exactly one has to be available.
            </summary>
            <typeparam name="TFactory">The type of the factory service.</typeparam>
            <param name="context">The current context.</param>
            <returns>The factory instance.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetProvider``1(AngleSharp.IBrowsingContext)">
            <summary>
            Gets a provider service instance. At most one has to be available.
            </summary>
            <typeparam name="TProvider">The type of the provider service.</typeparam>
            <param name="context">The current context.</param>
            <returns>The provider instance or null.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetResourceService``1(AngleSharp.IBrowsingContext,System.String)">
            <summary>
            Gets a resource service. Multiple resource services may be registered, so
            the one that matches the given mime-type will be returned, if any.
            </summary>
            <typeparam name="TResource">The type of the resource service.</typeparam>
            <param name="context">The current context.</param>
            <param name="type">The mime-type of the resource.</param>
            <returns>The service instance or null.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetCookie(AngleSharp.IBrowsingContext,AngleSharp.Url)">
            <summary>
            Gets the cookie for the given URL, if any.
            </summary>
            <param name="context">The current context.</param>
            <param name="url">The URL of the cookie.</param>
            <returns>The cookie or the empty string.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.SetCookie(AngleSharp.IBrowsingContext,AngleSharp.Url,System.String)">
            <summary>
            Sets the cookie for the given URL.
            </summary>
            <param name="context">The current context.</param>
            <param name="url">The URL of the cookie.</param>
            <param name="value">The cookie value to set.</param>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetSpellCheck(AngleSharp.IBrowsingContext,System.String)">
            <summary>
            Gets the spell check service for the given language, if any.
            </summary>
            <param name="context">The current context.</param>
            <param name="language">The language of the spellchecker.</param>
            <returns>The spell check service, if any.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetCssStyling(AngleSharp.IBrowsingContext)">
            <summary>
            Tries to get the CSS styling service, if available.
            </summary>
            <param name="context">The current context.</param>
            <returns>The CSS styling service if any.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetStyling(AngleSharp.IBrowsingContext,System.String)">
            <summary>
            Tries to get the styling service for the given mime-type.
            </summary>
            <param name="context">The current context.</param>
            <param name="type">The type of the style engine.</param>
            <returns>The styling service if any.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.IsScripting(AngleSharp.IBrowsingContext)">
            <summary>
            Gets if the context allows scripting or not.
            </summary>
            <param name="context">The current context.</param>
            <returns>True if a scripting provider is available, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetJsScripting(AngleSharp.IBrowsingContext)">
            <summary>
            Tries to get the JavaScript service, if available.
            </summary>
            <param name="context">The current context.</param>
            <returns>The JavaScript scripting service, if any.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetScripting(AngleSharp.IBrowsingContext,System.String)">
            <summary>
            Tries to get the scripting service for the given mime-type.
            </summary>
            <param name="context">The current context.</param>
            <param name="type">The type of the scripting language.</param>
            <returns>The scripting service, if any.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetCommand(AngleSharp.IBrowsingContext,System.String)">
            <summary>
            Tries to get the command with the given name.
            </summary>
            <param name="context">The current context.</param>
            <param name="commandId">The command to get.</param>
            <returns>The command if any.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.InteractAsync``1(AngleSharp.IBrowsingContext,System.String,``0)">
            <summary>
            Fires an interactive event at the given context.
            </summary>
            <typeparam name="T">The type of interactivity payload.</typeparam>
            <param name="context">The current context.</param>
            <param name="eventName">The name of the event to fire.</param>
            <param name="data">The data to transport.</param>
            <returns>The task with the response to the event.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.CreateChildFor(AngleSharp.IBrowsingContext,System.String)">
            <summary>
            Creates the specified target browsing context.
            </summary>
            <param name="context">The current context.</param>
            <param name="target">The specified target name.</param>
            <returns>The new context.</returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.FindChildFor(AngleSharp.IBrowsingContext,System.String)">
            <summary>
            Gets the specified target browsing context.
            </summary>
            <param name="context">The current context.</param>
            <param name="target">The specified target name.</param>
            <returns>
            The available context, or null, if the context does not exist yet.
            </returns>
        </member>
        <member name="M:AngleSharp.BrowsingContextExtensions.GetDownloads``1(AngleSharp.IBrowsingContext)">
            <summary>
            Checks if the context is waiting for tasks from originator of type
            T to finish downloading.
            </summary>
            <param name="context">The context to use.</param>
            <returns>Enumerable of awaitable tasks.</returns>
        </member>
        <member name="T:AngleSharp.Common.BaseTokenizer">
            <summary>
            Common methods and variables of all tokenizers.
            </summary>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.#ctor(AngleSharp.Text.TextSource)">
            <summary>
            Creates a new instance of the base tokenizer.
            </summary>
            <param name="source">The source to tokenize.</param>
        </member>
        <member name="P:AngleSharp.Common.BaseTokenizer.InsertionPoint">
            <summary>
            Gets the current insertion point.
            </summary>
        </member>
        <member name="P:AngleSharp.Common.BaseTokenizer.Position">
            <summary>
            Gets the current source index.
            </summary>
        </member>
        <member name="P:AngleSharp.Common.BaseTokenizer.Current">
            <summary>
            Gets the current character.
            </summary>
        </member>
        <member name="P:AngleSharp.Common.BaseTokenizer.StringBuffer">
            <summary>
            Gets the allocated string buffer.
            </summary>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.FlushBuffer">
            <summary>
            Flushes the buffer.
            </summary>
            <returns>The content of the buffer.</returns>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.Dispose">
            <summary>
            Disposes the tokenizer by releasing the buffer.
            </summary>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.GetCurrentPosition">
            <summary>
            Gets the current text position in the source.
            </summary>
            <returns>The (row, col) position.</returns>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.ContinuesWithInsensitive(System.String)">
            <summary>
            Checks if the source continues with the given string.
            The comparison is case-insensitive.
            </summary>
            <param name="s">The string to compare to.</param>
            <returns>True if the source continues with the given string.</returns>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.ContinuesWithSensitive(System.String)">
            <summary>
            Checks if the source continues with the given string.
            The comparison is case-sensitive.
            </summary>
            <param name="s">The string to compare to.</param>
            <returns>True if the source continues with the given string.</returns>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.PeekString(System.Int32)">
            <summary>
            Gets the string formed by the next characters.
            </summary>
            <param name="length">The length of the string.</param>
            <returns>The upcoming string.</returns>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.SkipSpaces">
            <summary>
            Skips the next space character(s).
            </summary>
            <returns>The upcoming first non-space.</returns>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.GetNext">
            <summary>
            Gets the next character in the source by advancing.
            </summary>
            <returns>The next char.</returns>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.GetPrevious">
            <summary>
            Gets the previous character in the source by going back.
            </summary>
            <returns>The previous char.</returns>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.Advance">
            <summary>
            Advances in the source by 1 character if possible.
            </summary>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.Advance(System.Int32)">
            <summary>
            Advances in the source by n characters or less if possible.
            </summary>
            <param name="n">The positive number of characters.</param>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.Back">
            <summary>
            Goes back in the source by 1 character if possible.
            </summary>
        </member>
        <member name="M:AngleSharp.Common.BaseTokenizer.Back(System.Int32)">
            <summary>
            Goes back in the source by n characters or less if possible.
            </summary>
            <param name="n">The positive number of characters.</param>
        </member>
        <member name="T:AngleSharp.Common.IBindable">
            <summary>
            Implemented by OM classes that may change internal state reflected with
            a changed string representation.
            </summary>
        </member>
        <member name="E:AngleSharp.Common.IBindable.Changed">
            <summary>
            Triggered when the internal state changed.
            </summary>
        </member>
        <member name="M:AngleSharp.Common.IBindable.Update(System.String)">
            <summary>
            Update the string representation without calling Changed.
            </summary>
            <param name="value">The representation's new value.</param>
        </member>
        <member name="T:AngleSharp.Common.ICancellable`1">
            <summary>
            Represents a cancellable task with result.
            </summary>
        </member>
        <member name="P:AngleSharp.Common.ICancellable`1.Task">
            <summary>
            Gets the associated awaitable task.
            </summary>
        </member>
        <member name="T:AngleSharp.Common.ICancellable">
            <summary>
            Represents a cancellable task without result.
            </summary>
        </member>
        <member name="M:AngleSharp.Common.ICancellable.Cancel">
            <summary>
            Cancels the covered task.
            </summary>
        </member>
        <member name="P:AngleSharp.Common.ICancellable.IsCompleted">
            <summary>
            Gets if the task has already completed.
            </summary>
        </member>
        <member name="P:AngleSharp.Common.ICancellable.IsRunning">
            <summary>
            Gets if the task is (still) running.
            </summary>
        </member>
        <member name="T:AngleSharp.Common.Keywords">
            <summary>
            The collection of used keywords and strings.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Url">
            <summary>
            The url keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.On">
            <summary>
            The on keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Off">
            <summary>
            The off keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Of">
            <summary>
            The of keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Yes">
            <summary>
            The yes keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.No">
            <summary>
            The no keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Top">
            <summary>
            The top keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Any">
            <summary>
            The any keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Public">
            <summary>
            The PUBLIC keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.System">
            <summary>
            The SYSTEM keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.CData">
            <summary>
            The "[CDATA[" keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Replace">
            <summary>
            The replace keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Alternate">
            <summary>
            The alternate keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Odd">
            <summary>
            The odd keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.Even">
            <summary>
            The even keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.TwoD">
            <summary>
            The 2d keyword.
            </summary>
        </member>
        <member name="F:AngleSharp.Common.Keywords.WebGl">
            <summary>
            The webgl keyword.
            </summary>
        </member>
        <member name="T:AngleSharp.Common.ObjectExtensions">
            <summary>
            Some methods for working with bare objects.
            </summary>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.ToDictionary(System.Object)">
            <summary>
            Transforms the values of the object into a dictionary of strings.
            </summary>
            <param name="values">The object instance to convert.</param>
            <returns>A dictionary mapping field names to values.</returns>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.GetItemByIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Gets an item from the enumerable by its index. Throws an exception
            if the provided index is invalid.
            </summary>
            <typeparam name="T">The type of enumerable.</typeparam>
            <param name="items">The items to iterate over.</param>
            <param name="index">The index to look for.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the concatenation of the provided enumerable with the
            specified element. The item is added to the beginning.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="items">The items.</param>
            <param name="element">The item to concat.</param>
            <returns>The new enumerable.</returns>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the removal of the specified element from the provided
            enumerable.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="items">The items.</param>
            <param name="element">The item to remove.</param>
            <returns>The new enumerable.</returns>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.TryGet``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to obtain the given key, otherwise returns the default value.
            </summary>
            <typeparam name="T">The struct type.</typeparam>
            <param name="values">The dictionary for the lookup.</param>
            <param name="key">The key to look for.</param>
            <returns>A nullable struct type.</returns>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.TryGet(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Tries to obtain the given key, otherwise returns null.
            </summary>
            <param name="values">The dictionary for the lookup.</param>
            <param name="key">The key to look for.</param>
            <returns>An object instance or null.</returns>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value of the given key, otherwise the provided default
            value.
            </summary>
            <typeparam name="T">The type of the keys.</typeparam>
            <typeparam name="U">The type of the value.</typeparam>
            <param name="values">The dictionary for the lookup.</param>
            <param name="key">The key to look for.</param>
            <param name="defaultValue">The provided fallback value.</param>
            <returns>The value or the provided fallback.</returns>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.Constraint(System.Double,System.Double,System.Double)">
            <summary>
            Constraints the given value between the min and max values.
            </summary>
            <param name="value">The value to limit.</param>
            <param name="min">The lower boundary.</param>
            <param name="max">The upper boundary.</param>
            <returns>The value in the [min, max] range.</returns>
        </member>
        <member name="M:AngleSharp.Common.ObjectExtensions.GetMessage``1(``0)">
            <summary>
            Retrieves a string describing the error of a given error code.
            </summary>
            <param name="code">A specific error code.</param>
            <returns>The description of the error.</returns>
        </member>
        <member name="T:AngleSharp.Configuration">
            <summary>
            Represents context configuration for the AngleSharp library. Custom
            configurations can be made by deriving from this class, just
            implementing IConfiguration or modifying an instance of this specific
            class.
            </summary>
        </member>
        <member name="M:AngleSharp.Configuration.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new immutable configuration.
            </summary>
            <param name="services">The services to expose.</param>
        </member>
        <member name="P:AngleSharp.Configuration.Default">
            <summary>
            Gets the default configuration to use. The default configuration
            can be overriden by calling the SetDefault method.
            </summary>
        </member>
        <member name="P:AngleSharp.Configuration.Services">
            <summary>
            Gets an enumeration over the registered services.
            </summary>
        </member>
        <member name="T:AngleSharp.ConfigurationExtensions">
            <summary>
            A set of useful extensions for Configuration (or derived) objects.
            </summary>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.With(AngleSharp.IConfiguration,System.Object)">
            <summary>
            Returns a new configuration that includes the given service.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="service">The service to register.</param>
            <returns>The new instance with the service.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.WithOnly``1(AngleSharp.IConfiguration,``0)">
            <summary>
            Returns a new configuration that includes only the given service,
            excluding other instances or instance creators for the same service.
            </summary>
            <typeparam name="TService">The service to include exclusively.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="service">The service to include.</param>
            <returns>The new instance with only the given service.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.WithOnly``1(AngleSharp.IConfiguration,System.Func{AngleSharp.IBrowsingContext,``0})">
            <summary>
            Returns a new configuration that includes only the given service
            creator, excluding other instances or instance creators for the same
            service.
            </summary>
            <typeparam name="TService">The service to include exclusively.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="creator">The service creator to include.</param>
            <returns>The new instance with only the given service.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.Without(AngleSharp.IConfiguration,System.Object)">
            <summary>
            Returns a new configuration that excludes the given service.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="service">The service to unregister.</param>
            <returns>The new instance without the service.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.With(AngleSharp.IConfiguration,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns a new configuration that includes the given services.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="services">The services to register.</param>
            <returns>The new instance with the services.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.Without(AngleSharp.IConfiguration,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns a new configuration that excludes the given services.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="services">The services to unregister.</param>
            <returns>The new instance without the services.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.With``1(AngleSharp.IConfiguration,System.Func{AngleSharp.IBrowsingContext,``0})">
            <summary>
            Returns a new configuration that includes the given service creator.
            </summary>
            <typeparam name="TService">The type of service to create.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="creator">The creator to register.</param>
            <returns>The new instance with the services.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.Without``1(AngleSharp.IConfiguration)">
            <summary>
            Returns a new configuration that excludes the given service creator.
            </summary>
            <typeparam name="TService">The type of service to remove.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <returns>The new instance without the services.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.Has``1(AngleSharp.IConfiguration)">
            <summary>
            Checks if the configuration holds any references to the given service.
            </summary>
            <typeparam name="TService">The type of service to check for.</typeparam>
            <param name="configuration">The configuration to examine.</param>
            <returns>True if any service / creators are found, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.WithDefaultLoader(AngleSharp.IConfiguration,AngleSharp.Io.LoaderOptions)">
            <summary>
            Registers the default loader service, if no other loader has been registered yet.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="setup">Configuration for the loader service.</param>
            <returns>The new configuration with the service.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.WithCulture(AngleSharp.IConfiguration,System.String)">
            <summary>
            Returns a new configuration that uses the culture with the provided
            name.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="name">The name of the culture to set.</param>
            <returns>The new instance with the culture being set.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.WithCulture(AngleSharp.IConfiguration,System.Globalization.CultureInfo)">
            <summary>
            Returns a new configuration that uses the given culture. Providing
            null will reset the culture to the default one.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="culture">The culture to set.</param>
            <returns>The new instance with the culture being set.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.WithMetaRefresh(AngleSharp.IConfiguration,System.Predicate{AngleSharp.Url})">
            <summary>
            Registeres a handler to include the meta data refresh.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <param name="shouldRefresh">The optional callback.</param>
            <returns>The new instance with the service.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.WithLocaleBasedEncoding(AngleSharp.IConfiguration)">
            <summary>
            Registeres the default encoding determination algorithm, as
            specified by the W3C.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <returns>The new instance with the service.</returns>
        </member>
        <member name="M:AngleSharp.ConfigurationExtensions.WithCookies(AngleSharp.IConfiguration)">
            <summary>
            Registers the default cookie service if no other cookie service has
            been registered yet.
            </summary>
            <param name="configuration">The configuration to extend.</param>
            <returns>The new instance with the service.</returns>
        </member>
        <member name="T:AngleSharp.Css.CombinatorSymbols">
            <summary>
            The collection of known CSS selector combinator symbols.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Exactly">
            <summary>
            The "=" attribute combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Unlike">
            <summary>
            The "!=" attribute combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.InList">
            <summary>
            The "~=" attribute combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.InToken">
            <summary>
            The "|=" attribute combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Begins">
            <summary>
            The "^=" attribute combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Ends">
            <summary>
            The "$=" attribute combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.InText">
            <summary>
            The "*=" attribute combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Column">
            <summary>
            The "||" combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Pipe">
            <summary>
            The "|" combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Adjacent">
            <summary>
            The "+" combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Descendent">
            <summary>
            The " " combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Deep">
            <summary>
            The ">>>" combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Child">
            <summary>
            The ">" combinator.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CombinatorSymbols.Sibling">
            <summary>
            The "~" combinator.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.CssStyleFormatter">
            <summary>
            Represents the standard CSS3 style formatter.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.CssStyleFormatter.Instance">
            <summary>
            An instance of the CssStyleFormatter.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.DefaultAttributeSelectorFactory">
            <summary>
            Provides string to CSS attribute selector instance mappings.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.DefaultAttributeSelectorFactory.Creator">
            <summary>
            Represents a creator delegate for creating an attribute selector.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <param name="prefix">The prefix for the attribute.</param>
            <param name="insensitive">Sets the evaluation mode.</param>
            <returns></returns>
        </member>
        <member name="M:AngleSharp.Css.DefaultAttributeSelectorFactory.Register(System.String,AngleSharp.Css.DefaultAttributeSelectorFactory.Creator)">
            <summary>
            Registers a new creator for the specified combinator.
            Throws an exception if another creator for the given
            combinator is already added.
            </summary>
            <param name="combinator">The used CSS combinator.</param>
            <param name="creator">The creator to invoke.</param>
        </member>
        <member name="M:AngleSharp.Css.DefaultAttributeSelectorFactory.Unregister(System.String)">
            <summary>
            Unregisters an existing creator for the given combinator.
            </summary>
            <param name="combinator">The used CSS combinator.</param>
            <returns>The registered creator, if any.</returns>
        </member>
        <member name="M:AngleSharp.Css.DefaultAttributeSelectorFactory.CreateDefault(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the default CSS attribute selector for the given options.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The used value, if any.</param>
            <param name="prefix">The given prefix, if any.</param>
            <param name="insensitive">Should be evaluated insensitive.</param>
            <returns>The selector with the given options.</returns>
        </member>
        <member name="M:AngleSharp.Css.DefaultAttributeSelectorFactory.Create(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the associated CSS attribute selector.
            </summary>
            <param name="combinator">The used CSS combinator.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The used value, if any.</param>
            <param name="prefix">The given prefix, if any.</param>
            <param name="insensitive">Should be evaluated insensitive.</param>
            <returns>The associated selector.</returns>
        </member>
        <member name="T:AngleSharp.Css.DefaultPseudoClassSelectorFactory">
            <summary>
            Provides string to CSS pseudo class selector instance mappings.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.DefaultPseudoClassSelectorFactory.Register(System.String,AngleSharp.Css.Dom.ISelector)">
            <summary>
            Registers a new selector for the specified name.
            Throws an exception if another selector for the given
            name is already added.
            </summary>
            <param name="name">The name of the CSS pseudo class.</param>
            <param name="selector">The selector to register.</param>
        </member>
        <member name="M:AngleSharp.Css.DefaultPseudoClassSelectorFactory.Unregister(System.String)">
            <summary>
            Unregisters an existing selector for the given name.
            </summary>
            <param name="name">The name of the CSS pseudo class.</param>
            <returns>The registered selector, if any.</returns>
        </member>
        <member name="M:AngleSharp.Css.DefaultPseudoClassSelectorFactory.CreateDefault(System.String)">
            <summary>
            Creates the default CSS pseudo class selector for the given
            name.
            </summary>
            <param name="name">The name of the CSS pseudo class.</param>
            <returns>The selector with the given name.</returns>
        </member>
        <member name="M:AngleSharp.Css.DefaultPseudoClassSelectorFactory.Create(System.String)">
            <summary>
            Creates or gets the associated CSS pseudo class selector.
            </summary>
            <param name="name">The name of the CSS pseudo class.</param>
            <returns>The associated selector.</returns>
        </member>
        <member name="T:AngleSharp.Css.DefaultPseudoElementSelectorFactory">
            <summary>
            Provides string to CSS pseudo element selector instance mappings.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.DefaultPseudoElementSelectorFactory.Register(System.String,AngleSharp.Css.Dom.ISelector)">
            <summary>
            Registers a new selector for the specified name.
            Throws an exception if another selector for the given
            name is already added.
            </summary>
            <param name="name">The name of the CSS pseudo element.</param>
            <param name="selector">The selector to register.</param>
        </member>
        <member name="M:AngleSharp.Css.DefaultPseudoElementSelectorFactory.Unregister(System.String)">
            <summary>
            Unregisters an existing selector for the given name.
            </summary>
            <param name="name">The name of the CSS pseudo element.</param>
            <returns>The registered selector, if any.</returns>
        </member>
        <member name="M:AngleSharp.Css.DefaultPseudoElementSelectorFactory.CreateDefault(System.String)">
            <summary>
            Creates the default CSS pseudo element selector for the given
            name.
            </summary>
            <param name="name">The name of the CSS pseudo class.</param>
            <returns>The selector with the given name.</returns>
        </member>
        <member name="M:AngleSharp.Css.DefaultPseudoElementSelectorFactory.Create(System.String)">
            <summary>
            Creates or gets the associated CSS pseudo element selector.
            </summary>
            <param name="name">The name of the CSS pseudo element.</param>
            <returns>The associated selector.</returns>
        </member>
        <member name="T:AngleSharp.Css.Dom.ICssMedium">
            <summary>
            Represents a CSS medium.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.ICssMedium.Type">
            <summary>
            Gets the type of medium that is represented.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.ICssMedium.IsExclusive">
            <summary>
            Gets if the medium has been created using the only keyword.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.ICssMedium.IsInverse">
            <summary>
            Gets if the medium has been created using the not keyword.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.ICssMedium.Constraints">
            <summary>
            Gets a string describing the covered constraints.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.ICssMedium.Features">
            <summary>
            Gets an enumerable of contained features.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.IMediaFeature">
            <summary>
            Represents a CSS media feature.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.IMediaFeature.Name">
            <summary>
            Gets the name of the feature.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.IMediaFeature.IsMinimum">
            <summary>
            Gets if the feature represents the minimum.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.IMediaFeature.IsMaximum">
            <summary>
            Gets if the feature represents the maximum.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.IMediaFeature.Value">
            <summary>
            Gets the value of the feature, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.IMediaFeature.HasValue">
            <summary>
            Gets if a value has been set for this feature.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.IMediaList">
            <summary>
            A collection of media queries.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.IMediaList.MediaText">
            <summary>
            Gets or sets the parsable textual representation of the media list.
            This is a comma-separated list of media.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.IMediaList.Length">
            <summary>
            Gets the number of media in the list. 
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.IMediaList.Item(System.Int32)">
            <summary>
            Gets the medium item at the specified index.
            </summary>
            <param name="index">Index into the collection.</param>
            <returns>
            The medium at the index-th position in the MediaList,
            or null if that is not a valid index.
            </returns>
        </member>
        <member name="M:AngleSharp.Css.Dom.IMediaList.Add(System.String)">
            <summary>
            Adds the medium to the end of the list. If the medium is already used,
            it is first removed.
            </summary>
            <param name="medium">The new medium to add.</param>
        </member>
        <member name="M:AngleSharp.Css.Dom.IMediaList.Remove(System.String)">
            <summary>
            Deletes the medium indicated from the list of media queries.
            </summary>
            <param name="medium">The medium to delete from the list.</param>
        </member>
        <member name="T:AngleSharp.Css.Dom.ChildSelector">
            <summary>
            Base class for all nth-child (or related) selectors.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.ComplexSelector">
            <summary>
            Represents a complex selector, i.e. one or more compound selectors
            separated by combinators.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.CompoundSelector">
            <summary>
            Represents a compound selector, which is a chain of simple selectors
            that are not separated by a combinator.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.FirstChildSelector">
            <summary>
            The nth-child selector.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.FirstColumnSelector">
            <summary>
            The nth-column selector.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.FirstTypeSelector">
            <summary>
            The nth-of-type selector.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.LastChildSelector">
            <summary>
            The nth-lastchild selector.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.LastColumnSelector">
            <summary>
            The nth-last-column selector.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.LastTypeSelector">
            <summary>
            The nth-last-of-type selector.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.ListSelector">
            <summary>
            Represents a group of selectors, i.e., zero or more selectors separated
            by commas.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.Selectors">
            <summary>
            A list of selectors, which is the basis for CompoundSelector and
            SelectorGroup.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Dom.ISelector">
            <summary>
            Represents a CSS selector for matching elements.
            More information: http://dev.w3.org/csswg/selectors4/
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Dom.ISelector.Match(AngleSharp.Dom.IElement,AngleSharp.Dom.IElement)">
            <summary>
            Determines if the given object is matched by this selector.
            </summary>
            <param name="element">The element to be matched.</param>
            <param name="scope">The selector scope.</param>
            <returns>
            True if the selector matches the given element, otherwise false.
            </returns>
        </member>
        <member name="P:AngleSharp.Css.Dom.ISelector.Text">
            <summary>
            Gets the string representation of the selector.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Dom.ISelector.Specificity">
            <summary>
            Gets the specificity of the given selector.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Dom.ISelector.Accept(AngleSharp.Css.ISelectorVisitor)">
            <summary>
            Accepts a selector visitor to expose more information.
            </summary>
            <param name="visitor">The visitor for showing around.</param>
        </member>
        <member name="T:AngleSharp.Css.Dom.SelectorExtensions">
            <summary>
            A set of extension methods for selectors.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Dom.SelectorExtensions.MatchAny(AngleSharp.Css.Dom.ISelector,System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},AngleSharp.Dom.IElement)">
            <summary>
            Returns the first element within the given elements (using depth-first
            pre-order traversal) that match the selectors with the given scope.
            </summary>
            <param name="selector">A selector object.</param>
            <param name="elements">The elements to take as source.</param>
            <param name="scope">The element to take as scope.</param>
            <returns>The resulting element or null.</returns>
        </member>
        <member name="M:AngleSharp.Css.Dom.SelectorExtensions.MatchAll(AngleSharp.Css.Dom.ISelector,System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},AngleSharp.Dom.IElement)">
            <summary>
            Returns the elements within the given elements (using depth-first
            pre-order traversal) that match the selectors with the given scope.
            </summary>
            <param name="selector">A selector object.</param>
            <param name="elements">The elements to take as source.</param>
            <param name="scope">The element to take as scope.</param>
            <returns>The collection containing the resulting elements.</returns>
        </member>
        <member name="M:AngleSharp.Css.Dom.SelectorExtensions.Match(AngleSharp.Css.Dom.ISelector,AngleSharp.Dom.IElement)">
            <summary>
            Provides an alternate to <see cref="M:AngleSharp.Css.Dom.ISelector.Match(AngleSharp.Dom.IElement,AngleSharp.Dom.IElement)" /> that sets the
            scope to the owning document element (if there is one).
            </summary>
            <param name="selector">The selector.</param>
            <param name="element">The element to match against.</param>
            <returns>The result of the match.</returns>
        </member>
        <member name="T:AngleSharp.Css.Dom.StyleExtensions">
            <summary>
            A set of extension methods for style / related methods.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Dom.StyleExtensions.GetAllStyleSheetSets(AngleSharp.Dom.IStyleSheetList)">
            <summary>
            Gets all possible style sheet sets from the list of style sheets.
            </summary>
            <param name="sheets">The list of style sheets.</param>
            <returns>An enumeration over all sets.</returns>
        </member>
        <member name="M:AngleSharp.Css.Dom.StyleExtensions.GetEnabledStyleSheetSets(AngleSharp.Dom.IStyleSheetList)">
            <summary>
            Gets the enabled style sheet sets from the list of style sheets.
            </summary>
            <param name="sheets">The list of style sheets.</param>
            <returns>An enumeration over the enabled sets.</returns>
        </member>
        <member name="M:AngleSharp.Css.Dom.StyleExtensions.EnableStyleSheetSet(AngleSharp.Dom.IStyleSheetList,System.String)">
            <summary>
            Sets the enabled style sheet sets in the list of style sheets.
            </summary>
            <param name="sheets">The list of style sheets.</param>
            <param name="name">The name of the set to enabled.</param>
        </member>
        <member name="M:AngleSharp.Css.Dom.StyleExtensions.CreateStyleSheets(AngleSharp.Dom.INode)">
            <summary>
            Creates a new StyleSheetList instance for the given node.
            </summary>
            <param name="parent">The node to get the StyleSheets from.</param>
            <returns>The new StyleSheetList instance.</returns>
        </member>
        <member name="M:AngleSharp.Css.Dom.StyleExtensions.CreateStyleSheetSets(AngleSharp.Dom.INode)">
            <summary>
            Creates a new StringList instance with stylesheet sets for the given
            node.
            </summary>
            <param name="parent">The node to get the sets from.</param>
            <returns>The new StringList instance.</returns>
        </member>
        <member name="M:AngleSharp.Css.Dom.StyleExtensions.GetStyleSheets(AngleSharp.Dom.INode)">
            <summary>
            Gets an enumeration over all the stylesheets from the given parent.
            </summary>
            <param name="parent">The parent to use.</param>
            <returns>The enumeration over all stylesheets.</returns>
        </member>
        <member name="M:AngleSharp.Css.Dom.StyleExtensions.LocateNamespace(AngleSharp.Dom.IStyleSheetList,System.String)">
            <summary>
            Tries to find the matching namespace url for the given prefix.
            </summary>
            <param name="sheets">The list of style sheets.</param>
            <param name="prefix">The prefix of the namespace to find.</param>
        </member>
        <member name="T:AngleSharp.Css.IAttributeSelectorFactory">
            <summary>
            Represents a factory for attribute selectors.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.IAttributeSelectorFactory.Create(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new attribute selector from the given arguments.
            </summary>
            <param name="combinator">The used combinator.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The provided value.</param>
            <param name="prefix">The prefix, if any.</param>
            <param name="insensitive">Should be evaluated insensitive.</param>
            <returns>The created selector, if possible.</returns>
        </member>
        <member name="T:AngleSharp.Css.IPseudoClassSelectorFactory">
            <summary>
            Represents a factory for pseudo-class selectors.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.IPseudoClassSelectorFactory.Create(System.String)">
            <summary>
            Creates a new pseudo-class selector for the given name.
            </summary>
            <param name="name">The name of the pseudo-class.</param>
            <returns>The created selector, if any.</returns>
        </member>
        <member name="T:AngleSharp.Css.IPseudoElementSelectorFactory">
            <summary>
            Represents a factory for pseudo-element selectors.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.IPseudoElementSelectorFactory.Create(System.String)">
            <summary>
            Creates a new pseudo-element selector for the given name.
            </summary>
            <param name="name">The name of the pseudo-element.</param>
            <returns>The created selector, if any.</returns>
        </member>
        <member name="T:AngleSharp.Css.ISelectorVisitor">
            <summary>
            Describes the interface for visiting a selector.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.Attribute(System.String,System.String,System.String)">
            <summary>
            Visited by attribute selectors.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="op">The operator, if any.</param>
            <param name="value">The value, if any.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.Type(System.String)">
            <summary>
            Visited by type selectors.
            </summary>
            <param name="name">The name of the type or *.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.Id(System.String)">
            <summary>
            Visited by id selectors.
            </summary>
            <param name="value">The value of the id.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.Child(System.String,System.Int32,System.Int32,AngleSharp.Css.Dom.ISelector)">
            <summary>
            Visited by child selectors.
            </summary>
            <param name="name">The name of the selector.</param>
            <param name="step">The step parameter.</param>
            <param name="offset">The offset parameter.</param>
            <param name="selector">The applied inner selector, if any.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.Class(System.String)">
            <summary>
            Visited by class selectors.
            </summary>
            <param name="name">The name of the class.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.PseudoClass(System.String)">
            <summary>
            Visited by pseudo-class selectors.
            </summary>
            <param name="name">The name of the pseudo class.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.PseudoElement(System.String)">
            <summary>
            Visited by pseudo-element selectors.
            </summary>
            <param name="name">The name of the pseudo element.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.List(System.Collections.Generic.IEnumerable{AngleSharp.Css.Dom.ISelector})">
            <summary>
            Visited by comma-separated list selectors.
            </summary>
            <param name="selectors">The contained selectors.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.Combinator(System.Collections.Generic.IEnumerable{AngleSharp.Css.Dom.ISelector},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Visited by combinator selectors.
            </summary>
            <param name="selectors">The contained N selectors.</param>
            <param name="symbols">The N - 1 combinator symbols.</param>
        </member>
        <member name="M:AngleSharp.Css.ISelectorVisitor.Many(System.Collections.Generic.IEnumerable{AngleSharp.Css.Dom.ISelector})">
            <summary>
            Visited by aggregated / combined selectors.
            </summary>
            <param name="selectors">The combined selectors.</param>
        </member>
        <member name="T:AngleSharp.Css.IStylingService">
            <summary>
            Defines the API of an available engine for computing the stylesheet.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.IStylingService.SupportsType(System.String)">
            <summary>
            Checks if the given type is supported.
            </summary>
            <param name="mimeType">The type of the style.</param>
            <returns>True if the type is supported, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.IStylingService.ParseStylesheetAsync(AngleSharp.Io.IResponse,AngleSharp.Css.StyleOptions,System.Threading.CancellationToken)">
            <summary>
            Parses a style sheet for the given response asynchronously.
            </summary>
            <param name="response">
            The response with the stream representing the source of the
            stylesheet.
            </param>
            <param name="options">
            The options with the parameters for evaluating the style.
            </param>
            <param name="cancel">The cancellation token.</param>
            <returns>The task resulting in the style sheet.</returns>
        </member>
        <member name="T:AngleSharp.Css.Parser.CssCombinator">
            <summary>
            An enumeration with possible CSS combinator values.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssCombinator.Child">
            <summary>
            The child operator (>).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssCombinator.Deep">
            <summary>
            The deep combinator (>>>).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssCombinator.Descendent">
            <summary>
            The descendent operator (space, or alternatively >>).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssCombinator.AdjacentSibling">
            <summary>
            The adjacent sibling combinator +.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssCombinator.Sibling">
            <summary>
            The sibling combinator ~.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssCombinator.Namespace">
            <summary>
            The namespace combinator |.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssCombinator.Column">
            <summary>
            The column combinator ||.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Parser.CssCombinator.Transform">
            <summary>
            Gets the transformation function for the combinator.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Parser.CssCombinator.Delimiter">
            <summary>
            Gets the delimiter that represents the combinator.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssCombinator.Change(AngleSharp.Css.Dom.ISelector)">
            <summary>
            Changes the selector on the LHS according to some special rules.
            </summary>
            <param name="selector">The original selector.</param>
            <returns>The modified (or unmodified) selector.</returns>
        </member>
        <member name="T:AngleSharp.Css.Parser.CssSelectorConstructor">
            <summary>
            Class for construction for CSS selectors as specified in
            http://www.w3.org/html/wg/drafts/html/master/selectors.html.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Parser.CssSelectorConstructor.State">
            <summary>
            The various parsing states.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Parser.CssSelectorParser">
            <summary>
            Allows the simply creation of CSS selectors.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssSelectorParser.#ctor">
            <summary>
            Creates a new selector parser.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssSelectorParser.#ctor(AngleSharp.IBrowsingContext)">
            <summary>
            Creates a new selector parser using the different factories.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssSelectorParser.ParseSelector(System.String)">
            <summary>
            Takes a string and transforms it into a selector object.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Parser.CssSelectorToken">
            <summary>
            The CSS selector token.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Parser.CssStringSourceExtensions">
            <summary>
            Contains some useful extension methods for the StringSource
            from the perspective of the CSS micro parsers.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssStringSourceExtensions.SkipCssComment(AngleSharp.Text.StringSource)">
            <summary>
            Skips all characters to the end of a CSS comment. Assumes the
            start of a CSS comment has been seen.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssStringSourceExtensions.ConsumeEscape(AngleSharp.Text.StringSource)">
            <summary>
            Consumes the escape sequence if any. Assumes, the source currently being at a
            solidus (valid escape).
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssStringSourceExtensions.IsValidEscape(AngleSharp.Text.StringSource)">
            <summary>
            Checks if the current position holds a valid escape.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Parser.CssTokenizer">
            <summary>
            The CSS tokenizer.
            See http://dev.w3.org/csswg/css-syntax/#tokenization for more details.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.Get">
            <summary>
            Gets the next available token.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.Data(System.Char)">
            <summary>
            4.4.1. Data state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.StringDQ">
            <summary>
            4.4.2. Double quoted string state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.StringSQ">
            <summary>
            4.4.3. Single quoted string state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.HashStart">
            <summary>
            4.4.4. Hash state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.HashRest(System.Text.StringBuilder)">
            <summary>
            4.4.5. Hash-rest state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.AtKeywordStart">
            <summary>
            4.4.7. At-keyword state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.AtKeywordRest(System.Char)">
            <summary>
            4.4.8. At-keyword-rest state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.IdentStart(System.Char)">
            <summary>
            4.4.9. Ident state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.IdentRest(System.Char,System.Text.StringBuilder)">
            <summary>
            4.4.10. Ident-rest state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.NumberStart(System.Char)">
            <summary>
            4.4.12. Number state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.NumberRest(System.Text.StringBuilder)">
            <summary>
            4.4.13. Number-rest state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.NumberFraction(System.Text.StringBuilder)">
            <summary>
            4.4.14. Number-fraction state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.Dimension(System.Text.StringBuilder)">
            <summary>
            4.4.15. Dimension state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.SciNotation(System.Text.StringBuilder)">
            <summary>
            4.4.16. SciNotation state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.UrlStart">
            <summary>
            4.4.17. URL state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.UrlDQ">
            <summary>
            4.4.18. URL-double-quoted state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.UrlSQ">
            <summary>
            4.4.19. URL-single-quoted state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.UrlUQ(System.Char)">
            <summary>
            4.4.21. URL-unquoted state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.UrlEnd">
            <summary>
            4.4.20. URL-end state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.UrlBad">
            <summary>
            4.4.22. Bad URL state
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.CssTokenizer.UnicodeRange(System.Char)">
            <summary>
            4.4.23. Unicode-range State
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Parser.CssTokenType">
            <summary>
            An enumation of all possible tokens.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.String">
            <summary>
            A string token (usually in quotation marks).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Hash">
            <summary>
            A hash token (starts with #).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Class">
            <summary>
            A class token (starts with .).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Ident">
            <summary>
            An identifier token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Function">
            <summary>
            An function token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Number">
            <summary>
            An number token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Dimension">
            <summary>
            An dimension token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Column">
            <summary>
            The column ( || ) token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Descendent">
            <summary>
            The descendent ( >> ) token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Deep">
            <summary>
            The deep ( >>> ) token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Delim">
            <summary>
            The delimiter token to delimiter character.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Match">
            <summary>
            The match token (~=, |=, $=, ^=, *=, or !=).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.RoundBracketClose">
            <summary>
            The RoundBracketClose ( ) ) token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.SquareBracketOpen">
            <summary>
            The SquareBracketOpen ( [ ) token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.SquareBracketClose">
            <summary>
            The SquareBracketClose ( ] ) token.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Colon">
            <summary>
            The special character colon ( : ).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Comma">
            <summary>
            The special character comma ( , ).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Whitespace">
            <summary>
            The special character whitespace ( ).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.Invalid">
            <summary>
            The invalid token (any).
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Parser.CssTokenType.EndOfFile">
            <summary>
            The end-of-file marker.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Parser.ICssSelectorParser">
            <summary>
            Represents the parser for a selector.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Parser.ICssSelectorParser.ParseSelector(System.String)">
            <summary>
            Takes a string and transforms it into a selector object.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.Priority">
            <summary>
            A priority object for comparing priorities.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Priority.Zero">
            <summary>
            Gets the lowest (zero) priority.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Priority.OneTag">
            <summary>
            Gets the priority for having a single tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Priority.OneClass">
            <summary>
            Gets the priority for having a single class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Priority.OneId">
            <summary>
            Gets the priority for having a single Id.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.Priority.Inline">
            <summary>
            Gets the priority for having an inline element.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Priority.#ctor(System.UInt32)">
            <summary>
            Creates a new priority with the given hashcode.
            </summary>
            <param name="priority">The hashcode to use.</param>
        </member>
        <member name="M:AngleSharp.Css.Priority.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new priority with the given values.
            </summary>
            <param name="inlines">The number of inlines.</param>
            <param name="ids">The number of ids.</param>
            <param name="classes">The number of classes.</param>
            <param name="tags">The number of tags.</param>
        </member>
        <member name="P:AngleSharp.Css.Priority.Tags">
            <summary>
            Gets the number of tags for this priority.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Priority.Classes">
            <summary>
            Gets the number of classes for this priority.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Priority.Ids">
            <summary>
            Gets the number of ids for this priority.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.Priority.Inlines">
            <summary>
            Gets the number of inlines for this priority.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.Priority.op_Addition(AngleSharp.Css.Priority,AngleSharp.Css.Priority)">
            <summary>
            Adds the two given priorities.
            </summary>
            <param name="a">The first priority.</param>
            <param name="b">The second priority.</param>
            <returns>The result of adding the two priorities.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.op_Equality(AngleSharp.Css.Priority,AngleSharp.Css.Priority)">
            <summary>
            Compares two priorities and returns a boolean indicating if the two do match.
            </summary>
            <param name="a">The first priority to use.</param>
            <param name="b">The second priority to use.</param>
            <returns>True if both priorities are equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.op_GreaterThan(AngleSharp.Css.Priority,AngleSharp.Css.Priority)">
            <summary>
            Compares two priorities and returns a boolean indicating if the first one is greater.
            </summary>
            <param name="a">The first priority to use.</param>
            <param name="b">The second priority to use.</param>
            <returns>True if the first priority is higher, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.op_GreaterThanOrEqual(AngleSharp.Css.Priority,AngleSharp.Css.Priority)">
            <summary>
            Compares two priorities and returns a boolean indicating if the first one is greater or equal.
            </summary>
            <param name="a">The first priority to use.</param>
            <param name="b">The second priority to use.</param>
            <returns>True if the first priority is higher or equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.op_LessThan(AngleSharp.Css.Priority,AngleSharp.Css.Priority)">
            <summary>
            Compares two priorities and returns a boolean indicating if the second one is greater.
            </summary>
            <param name="a">The first priority to use.</param>
            <param name="b">The second priority to use.</param>
            <returns>True if the second priority is higher, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.op_LessThanOrEqual(AngleSharp.Css.Priority,AngleSharp.Css.Priority)">
            <summary>
            Compares two priorities and returns a boolean indicating if the second one is greater or equal.
            </summary>
            <param name="a">The first priority to use.</param>
            <param name="b">The second priority to use.</param>
            <returns>True if the second priority is higher or equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.op_Inequality(AngleSharp.Css.Priority,AngleSharp.Css.Priority)">
            <summary>
            Compares two priorities and returns a boolean indicating if the two do not match.
            </summary>
            <param name="a">The first priority to use.</param>
            <param name="b">The second color to use.</param>
            <returns>True if both priorities are not equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.Equals(AngleSharp.Css.Priority)">
            <summary>
            Checks two priorities for equality.
            </summary>
            <param name="other">The other priority.</param>
            <returns>True if both priorities or equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.Equals(System.Object)">
            <summary>
            Tests if another object is equal to this object.
            </summary>
            <param name="obj">The object to test with.</param>
            <returns>True if the two objects are equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.GetHashCode">
            <summary>
            Returns a hash code that defines the current priority.
            </summary>
            <returns>The integer value of the hashcode.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.CompareTo(AngleSharp.Css.Priority)">
            <summary>
            Compares the current priority with another priority.
            </summary>
            <param name="other">The priority to compare to.</param>
            <returns>A value greater than 1 if the current priority is larger.</returns>
        </member>
        <member name="M:AngleSharp.Css.Priority.ToString">
            <summary>
            Returns a string representing the priority.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:AngleSharp.Css.PseudoClassNames">
            <summary>
            The collection of (known / used) selector pseudo class names.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Root">
            <summary>
            The root pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Scope">
            <summary>
            The scope pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.OnlyType">
            <summary>
            The only-of-type pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.FirstOfType">
            <summary>
            The first-of-type pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.LastOfType">
            <summary>
            The last-of-type pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.OnlyChild">
            <summary>
            The only-child pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.FirstChild">
            <summary>
            The first-child pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.LastChild">
            <summary>
            The last-child pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Empty">
            <summary>
            The empty pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.AnyLink">
            <summary>
            The any-link pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Link">
            <summary>
            The link pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Visited">
            <summary>
            The visited pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Active">
            <summary>
            The active pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Hover">
            <summary>
            The hover pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Focus">
            <summary>
            The focus pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Target">
            <summary>
            The target pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Enabled">
            <summary>
            The enabled pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Disabled">
            <summary>
            The disabled pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Checked">
            <summary>
            The checked pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Unchecked">
            <summary>
            The unchecked pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Indeterminate">
            <summary>
            The indeterminate pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.PlaceholderShown">
            <summary>
            The placeholder-shown pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Default">
            <summary>
            The default pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Valid">
            <summary>
            The valid pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Invalid">
            <summary>
            The invalid pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Required">
            <summary>
            The required pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.InRange">
            <summary>
            The in-range pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.OutOfRange">
            <summary>
            The out-of-range pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Optional">
            <summary>
            The optional pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.ReadOnly">
            <summary>
            The read-only pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.ReadWrite">
            <summary>
            The read-write pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Shadow">
            <summary>
            The shadow pseudo class.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Dir">
            <summary>
            The dir pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Has">
            <summary>
            The has pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Matches">
            <summary>
            The matches pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.NthChild">
            <summary>
            The nth-child pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.NthLastChild">
            <summary>
            The nth-last-child pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.NthOfType">
            <summary>
            The nth-of-type pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.NthLastOfType">
            <summary>
            The nth-last-of-type pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.NthColumn">
            <summary>
            The nth-column pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.NthLastColumn">
            <summary>
            The nth-last-column pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Not">
            <summary>
            The not pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Lang">
            <summary>
            The lang pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Contains">
            <summary>
            The contains pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.HostContext">
            <summary>
            The host-context pseudo function.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoClassNames.Separator">
            <summary>
            The separating colon.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.PseudoElementNames">
            <summary>
            The collection of (known / used) selector pseudo element names.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoElementNames.Before">
            <summary>
            The before pseudo element.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoElementNames.After">
            <summary>
            The after pseudo element.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoElementNames.Slotted">
            <summary>
            The slotted pseudo element.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoElementNames.Selection">
            <summary>
            The selection pseudo element.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoElementNames.FirstLine">
            <summary>
            The first-line pseudo element.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoElementNames.FirstLetter">
            <summary>
            The first-letter pseudo element.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoElementNames.Content">
            <summary>
            The content pseudo element.
            </summary>
        </member>
        <member name="F:AngleSharp.Css.PseudoElementNames.Separator">
            <summary>
            The separating double-colon.
            </summary>
        </member>
        <member name="T:AngleSharp.Css.StyleOptions">
            <summary>
            Transport object for evaluating stylesheets.
            </summary>
        </member>
        <member name="M:AngleSharp.Css.StyleOptions.#ctor(AngleSharp.Dom.IDocument)">
            <summary>
            Creates new style options for the given document.
            </summary>
            <param name="document">The document to use.</param>
        </member>
        <member name="P:AngleSharp.Css.StyleOptions.Document">
            <summary>
            Gets the parent document for hosting the style sheet.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.StyleOptions.Element">
            <summary>
            Gets or sets the element that triggered the evaluation.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.StyleOptions.IsDisabled">
            <summary>
            Gets or sets if the stylesheet is disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Css.StyleOptions.IsAlternate">
            <summary>
            Gets or sets if the stylesheet is an alternate.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.AdjacentPosition">
            <summary>
            Enumeration with possible values for the adjacent position insertation.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AdjacentPosition.BeforeBegin">
            <summary>
            Before the element itself.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AdjacentPosition.AfterBegin">
            <summary>
            Just inside the element, before its first child.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AdjacentPosition.BeforeEnd">
            <summary>
            Just inside the element, after its last child.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AdjacentPosition.AfterEnd">
            <summary>
            After the element itself.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.AttrExtensions">
            <summary>
            Extensions for the list of attributes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.AttrExtensions.SameAs(AngleSharp.Dom.INamedNodeMap,AngleSharp.Dom.INamedNodeMap)">
            <summary>
            Compares another attribute container to the current container.
            </summary>
            <param name="sourceAttributes">The original attribute list.</param>
            <param name="targetAttributes">The list to compare to.</param>
            <returns>True if both objects are equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.AttrExtensions.Clear(AngleSharp.Dom.INamedNodeMap)">
            <summary>
            Clears the given attribute collection.
            </summary>
            <param name="attributes">The collection to clear.</param>
            <returns>The collection itself.</returns>
        </member>
        <member name="T:AngleSharp.Dom.AttributeNames">
            <summary>
            The collection of (known / used) attribute names.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Name">
            <summary>
            The name attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.HttpEquiv">
            <summary>
            The http-equiv attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Scheme">
            <summary>
            The scheme attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Content">
            <summary>
            The content attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Class">
            <summary>
            The class attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Style">
            <summary>
            The style attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Label">
            <summary>
            The label attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Action">
            <summary>
            The action attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Prompt">
            <summary>
            The prompt attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Href">
            <summary>
            The href attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.HrefLang">
            <summary>
            The hreflang attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Lang">
            <summary>
            The lang attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Disabled">
            <summary>
            The disabled attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Selected">
            <summary>
            The selected attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Value">
            <summary>
            The value attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Title">
            <summary>
            The title attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Type">
            <summary>
            The type attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Rel">
            <summary>
            The rel attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Rev">
            <summary>
            The rev attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.AccessKey">
            <summary>
            The accesskey attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Download">
            <summary>
            The download attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Media">
            <summary>
            The media attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Target">
            <summary>
            The target attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Charset">
            <summary>
            The charset attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Alt">
            <summary>
            The alt attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Coords">
            <summary>
            The coords attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Shape">
            <summary>
            The shape attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.FormNoValidate">
            <summary>
            The formnovalidate attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.DirName">
            <summary>
            The dirname attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Dir">
            <summary>
            The dir attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Nonce">
            <summary>
            The nonce attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.NoResize">
            <summary>
            The noresize attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Src">
            <summary>
            The src attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.SrcSet">
            <summary>
            The srcset attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.SrcLang">
            <summary>
            The srclang attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.SrcDoc">
            <summary>
            The srcdoc attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Scrolling">
            <summary>
            The scrolling attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.LongDesc">
            <summary>
            The longdesc attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.FrameBorder">
            <summary>
            The frameborder attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Width">
            <summary>
            The width attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Height">
            <summary>
            The height attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.MarginWidth">
            <summary>
            The marginwidth attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.MarginHeight">
            <summary>
            The marginheight attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Cols">
            <summary>
            The cols attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Rows">
            <summary>
            The rows attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Align">
            <summary>
            The align attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Encoding">
            <summary>
            The encoding attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Standalone">
            <summary>
            The standalone attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Version">
            <summary>
            The version attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.DropZone">
            <summary>
            The dropzone attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Draggable">
            <summary>
            The draggable attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Spellcheck">
            <summary>
            The spellcheck attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.TabIndex">
            <summary>
            The tabindex attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.ContentEditable">
            <summary>
            The contenteditable attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Translate">
            <summary>
            The translate attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.ContextMenu">
            <summary>
            The contextmenu attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Hidden">
            <summary>
            The hidden attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Id">
            <summary>
            The id attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Sizes">
            <summary>
            The sizes attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Scoped">
            <summary>
            The scoped attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Reversed">
            <summary>
            The reversed attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Start">
            <summary>
            The start attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Ping">
            <summary>
            The ping attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.IsMap">
            <summary>
            The ismap attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.UseMap">
            <summary>
            The usemap attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.CrossOrigin">
            <summary>
            The crossorigin attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Sandbox">
            <summary>
            The sandbox attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.AllowFullscreen">
            <summary>
            The allowfullscreen attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.AllowPaymentRequest">
            <summary>
            The allowpaymentrequest attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Data">
            <summary>
            The data attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.TypeMustMatch">
            <summary>
            The typemustmatch attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.AutoFocus">
            <summary>
            The autofocus attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.AcceptCharset">
            <summary>
            The accept-charset attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Enctype">
            <summary>
            The enctype attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.AutoComplete">
            <summary>
            The autocomplete attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Method">
            <summary>
            The method attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.NoValidate">
            <summary>
            The novalidate attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.For">
            <summary>
            The for attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Seamless">
            <summary>
            The seamless attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Valign">
            <summary>
            The valign attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Span">
            <summary>
            The span attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.BgColor">
            <summary>
            The bgcolor attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.ColSpan">
            <summary>
            The colspan attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.ReferrerPolicy">
            <summary>
            The referrerpolicy attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.RowSpan">
            <summary>
            The rowspan attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.NoWrap">
            <summary>
            The nowrap attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Abbr">
            <summary>
            The abbr attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Scope">
            <summary>
            The scope attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Headers">
            <summary>
            The headers attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Axis">
            <summary>
            The axis attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Border">
            <summary>
            The border attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.CellPadding">
            <summary>
            The cellpadding attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Rules">
            <summary>
            The rules attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Summary">
            <summary>
            The summary attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.CellSpacing">
            <summary>
            The cellspacing attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Frame">
            <summary>
            The frame attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Form">
            <summary>
            The form attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Required">
            <summary>
            The required attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Multiple">
            <summary>
            The multiple attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Min">
            <summary>
            The min attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Max">
            <summary>
            The max attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Open">
            <summary>
            The open attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Challenge">
            <summary>
            The challenge attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Keytype">
            <summary>
            The keytype attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Size">
            <summary>
            The size attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Wrap">
            <summary>
            The wrap attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.MaxLength">
            <summary>
            The maxlength attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.MinLength">
            <summary>
            The minlength attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Placeholder">
            <summary>
            The placeholder attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Readonly">
            <summary>
            The readonly attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Accept">
            <summary>
            The accept attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Pattern">
            <summary>
            The pattern attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Step">
            <summary>
            The step attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.List">
            <summary>
            The list attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Checked">
            <summary>
            The checked attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Kind">
            <summary>
            The kind attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Default">
            <summary>
            The default attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Autoplay">
            <summary>
            The autoplay attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Preload">
            <summary>
            The preload attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Loop">
            <summary>
            The loop attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Controls">
            <summary>
            The controls attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Muted">
            <summary>
            The muted attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.MediaGroup">
            <summary>
            The mediagroup attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Poster">
            <summary>
            The poster attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Color">
            <summary>
            The color attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Face">
            <summary>
            The face attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Command">
            <summary>
            The command attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Icon">
            <summary>
            The icon attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Radiogroup">
            <summary>
            The radiogroup attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Cite">
            <summary>
            The cite attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Async">
            <summary>
            The async attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Defer">
            <summary>
            The defer attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Language">
            <summary>
            The language attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Event">
            <summary>
            The event attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Alink">
            <summary>
            The alink attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Background">
            <summary>
            The background attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Link">
            <summary>
            The link attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Text">
            <summary>
            The text attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Vlink">
            <summary>
            THe vlink attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Show">
            <summary>
            The show attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Role">
            <summary>
            The role attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Actuate">
            <summary>
            The actuate attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Arcrole">
            <summary>
            The arcrole attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Space">
            <summary>
            The space attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Window">
            <summary>
            The window attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Manifest">
            <summary>
            The manifest attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Datetime">
            <summary>
            The datetime attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Low">
            <summary>
            The low attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.High">
            <summary>
            The high attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Optimum">
            <summary>
            The optimum attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Slot">
            <summary>
            The slot attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Body">
            <summary>
            The body attribute.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.AttributeNames.Integrity">
            <summary>
            The integrity attribute.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.CreateDocumentOptions">
            <summary>
            Data transport class to abstract common options in document creation.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.CreateDocumentOptions.#ctor(AngleSharp.Io.IResponse,System.Text.Encoding,AngleSharp.Dom.IDocument)">
            <summary>
            Creates a new set of document options from the given response with
            the provided configuration.
            </summary>
            <param name="response">The response to pass on.</param>
            <param name="encoding">The optional default encoding.</param>
            <param name="ancestor">The optional import ancestor.</param>
        </member>
        <member name="P:AngleSharp.Dom.CreateDocumentOptions.Response">
            <summary>
            Gets the response to create the document for.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.CreateDocumentOptions.ContentType">
            <summary>
            Gets the provided content-type.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.CreateDocumentOptions.Source">
            <summary>
            Gets the text source that came with the response.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.CreateDocumentOptions.ImportAncestor">
            <summary>
            Gets the import ancestor, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DefaultDocumentFactory">
            <summary>
            Provides the default content-type to document creation mapping.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DefaultDocumentFactory.Creator">
            <summary>
            Represents a creator delegate for creating documents.
            </summary>
            <param name="context">The context of the new document.</param>
            <param name="options">The creation options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task of creating the document.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DefaultDocumentFactory.Register(System.String,AngleSharp.Dom.DefaultDocumentFactory.Creator)">
            <summary>
            Registers a new creator for the specified content-type.
            Throws an exception if another creator for the given
            content-type is already added.
            </summary>
            <param name="contentType">The content-type value.</param>
            <param name="creator">The creator to invoke.</param>
        </member>
        <member name="M:AngleSharp.Dom.DefaultDocumentFactory.Unregister(System.String)">
            <summary>
            Unregisters an existing creator for the given content-type.
            </summary>
            <param name="contentType">The content-type value.</param>
            <returns>The registered creator, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DefaultDocumentFactory.CreateDefaultAsync(AngleSharp.IBrowsingContext,AngleSharp.Dom.CreateDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Creates the default document for the given options.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="options">The options to consider.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task creating the document from the response.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DefaultDocumentFactory.CreateAsync(AngleSharp.IBrowsingContext,AngleSharp.Dom.CreateDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new document from the given arguments using the Content-Type
            of the provided options.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="options">The options to consider.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task creating the document from the response.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DefaultDocumentFactory.LoadHtmlAsync(AngleSharp.IBrowsingContext,AngleSharp.Dom.CreateDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Loads the response as an HTML document.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DefaultDocumentFactory.LoadTextAsync(AngleSharp.IBrowsingContext,AngleSharp.Dom.CreateDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Loads the response as a plain text (formatted as HTML) document.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DirectionMode">
            <summary>
            An enumeration with all dir modes.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DirectionMode.Ltr">
            <summary>
            Text and other elements go from left to right.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DirectionMode.Rtl">
            <summary>
            Text and other elements go from right to left
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DocumentExtensions">
            <summary>
            Useful methods for document objects.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.ForEachRange(AngleSharp.Dom.Document,System.Predicate{AngleSharp.Dom.Range},System.Action{AngleSharp.Dom.Range})">
            <summary>
            Iterates over all ranges in the document, applying the provided
            action when the given condition is fulfilled.
            </summary>
            <param name="document">The document that hosts the ranges.</param>
            <param name="condition">
            The condition that needs to be fulfilled.
            </param>
            <param name="action">The action to apply to the range.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.CreateElement``1(AngleSharp.Dom.IDocument)">
            <summary>
            Creates an element of the given type or throws an exception, if
            there is no such type.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="document">The responsible document.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.AdoptNode(AngleSharp.Dom.IDocument,AngleSharp.Dom.INode)">
            <summary>
            Adopts the given node for the provided document context.
            </summary>
            <param name="document">The new owner of the node.</param>
            <param name="node">The node to change its owner.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.QueueTask(AngleSharp.Dom.Document,System.Action)">
            <summary>
            Queues an action in the event loop of the document.
            </summary>
            <param name="document">
            The document that hosts the configuration.
            </param>
            <param name="action">The action that should be invoked.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.QueueMutation(AngleSharp.Dom.Document,AngleSharp.Dom.MutationRecord)">
            <summary>
            Queues a mutation record for the corresponding observers.
            </summary>
            <param name="document">The document to use.</param>
            <param name="record">The record to enqueue.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.AddTransientObserver(AngleSharp.Dom.Document,AngleSharp.Dom.INode)">
            <summary>
            Adds a transient observer for the given node.
            </summary>
            <param name="document">The document to use.</param>
            <param name="node">The node to be removed.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.ApplyManifest(AngleSharp.Dom.Document)">
            <summary>
            Applies the manifest to the given document.
            </summary>
            <param name="document">The document to modify.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.PerformMicrotaskCheckpoint(AngleSharp.Dom.Document)">
            <summary>
            Performs a microtask checkpoint using the mutations host.
            Queue a mutation observer compound microtask.
            </summary>
            <param name="document">The document to use.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.ProvideStableState(AngleSharp.Dom.Document)">
            <summary>
            Provides a stable state by running the synchronous sections of
            asynchronously-running algorithms until the asynchronous algorithm
            can be resumed (if appropriate).
            </summary>
            <param name="document">The document to use.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.GetScriptDownloads(AngleSharp.Dom.IDocument)">
            <summary>
            Checks if the document is waiting for a script to finish preparing.
            </summary>
            <param name="document">The document to use.</param>
            <returns>Enumerable of awaitable tasks.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.GetStyleSheetDownloads(AngleSharp.Dom.IDocument)">
            <summary>
            Checks if the document has any active stylesheets that block the
            scripts. A style sheet is blocking scripts if the responsible
            element was created by that Document's parser, and the element is
            either a style element or a link element that was an external
            resource link that contributes to the styling processing model when
            the element was created by the parser, and the element's style
            sheet was enabled when the element was created by the parser, and
            the element's style sheet ready flag is not yet set.
            http://www.w3.org/html/wg/drafts/html/master/document-metadata.html#has-no-style-sheet-that-is-blocking-scripts
            </summary>
            <param name="document">The document to use.</param>
            <returns>Enumerable of awaitable tasks.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.WaitForReadyAsync(AngleSharp.Dom.IDocument)">
            <summary>
            Spins the event loop until all stylesheets are downloaded (if
            required) and all scripts are ready to be parser executed.
            http://www.w3.org/html/wg/drafts/html/master/syntax.html#the-end
            (bullet 3)
            </summary>
            <param name="document">The document to use.</param>
            <returns>Awaitable task.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DocumentExtensions.GetDownloads(AngleSharp.Dom.IDocument)">
            <summary>
            Gets all downloads associated with resources of the document.
            </summary>
            <param name="document">The document hosting the downloads.</param>
            <returns>The collection of elements hosting resources.</returns>
        </member>
        <member name="T:AngleSharp.Dom.DocumentPositions">
            <summary>
            Enumeration of possible document position values.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentPositions.Same">
            <summary>
            It is the same node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentPositions.Disconnected">
            <summary>
            There is no relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentPositions.Preceding">
            <summary>
            The node preceeds the other element.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentPositions.Following">
            <summary>
            The node follows the other element.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentPositions.Contains">
            <summary>
            The node is contains the other element.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentPositions.ContainedBy">
            <summary>
            The node is contained in the other element.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentPositions.ImplementationSpecific">
            <summary>
            The relation is implementation specific.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DocumentReadyState">
            <summary>
            Defines the document readiness.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentReadyState.Loading">
            <summary>
            The document is still loading.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentReadyState.Interactive">
            <summary>
            The document is interactive, i.e. interaction possible.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DocumentReadyState.Complete">
            <summary>
            Loading is complete.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DomError">
            <summary>
            A collection of official DOM error codes.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.IndexSizeError">
            <summary>
            The index is not in the allowed range.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.DomStringSize">
            <summary>
            The size of the string is invalid.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.HierarchyRequest">
            <summary>
            The operation would yield an incorrect node tree.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.WrongDocument">
            <summary>
            The object is in the wrong document.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.InvalidCharacter">
            <summary>
            Invalid character detected.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.NoDataAllowed">
            <summary>
            The data is allowed for this object.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.NoModificationAllowed">
            <summary>
            The object can not be modified.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.NotFound">
            <summary>
            The object can not be found here.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.NotSupported">
            <summary>
            The operation is not supported.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.InUse">
            <summary>
            The element is already in-use.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.InvalidState">
            <summary>
            The object is in an invalid state.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.Syntax">
            <summary>
            The string did not match the expected pattern.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.InvalidModification">
            <summary>
            The object can not be modified in this way.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.Namespace">
            <summary>
            The operation is not allowed by namespaces in XML.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.InvalidAccess">
            <summary>
            The object does not support the operation or argument.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.Validation">
            <summary>
            The validation failed.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.TypeMismatch">
            <summary>
            The provided argument type is invalid.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.Security">
            <summary>
            The operation is insecure.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.Network">
            <summary>
            A network error occurred.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.Abort">
            <summary>
            The operation was aborted.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.UrlMismatch">
            <summary>
            The given URL does not match another URL.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.QuotaExceeded">
            <summary>
            The quota has been exceeded.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.Timeout">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.InvalidNodeType">
            <summary>
            The supplied node is incorrect or has an incorrect ancestor for this operation.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.DomError.DataClone">
            <summary>
            The object can not be cloned.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DomEventHandler">
            <summary>
            Defines the callback signature for an event.
            </summary>
            <param name="sender">The callback this argument.</param>
            <param name="ev">The event arguments.</param>
        </member>
        <member name="T:AngleSharp.Dom.DomException">
            <summary>
            Represents a DOM exception.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DomException.#ctor(AngleSharp.Dom.DomError)">
            <summary>
            Creates a new DOMException.
            </summary>
            <param name="code">The error code.</param>
        </member>
        <member name="M:AngleSharp.Dom.DomException.#ctor(System.String)">
            <summary>
            Creates a new DOMException with a custom message.
            </summary>
            <param name="message">The message to transport.</param>
        </member>
        <member name="P:AngleSharp.Dom.DomException.Name">
            <summary>
            Gets the name of the error.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DomException.Code">
            <summary>
            Gets the error code for this exception.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ElementExtensions">
            <summary>
            Useful methods for element objects.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.LocatePrefixFor(AngleSharp.Dom.IElement,System.String)">
            <summary>
            Locates the prefix of the given namespace.
            </summary>
            <param name="element">The element that might contain the namespace information.</param>
            <param name="namespaceUri">The url of the namespace.</param>
            <returns>The prefix or null, if the namespace could not be found.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.LocateNamespaceFor(AngleSharp.Dom.IElement,System.String)">
            <summary>
            Locates the namespace of the given prefix.
            </summary>
            <param name="element">The element that might contain the namespace information.</param>
            <param name="prefix">The prefix of the namespace to find.</param>
            <returns>The url of the namespace or null, if the prefix could not be found.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.GetNamespaceUri(AngleSharp.Dom.IElement)">
            <summary>
            Gets the non-fixed namespace of the element.
            </summary>
            <param name="element">The element.</param>
            <returns>The url of the namespace.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.TryLocateCustomNamespace(AngleSharp.Dom.IElement,System.String,System.String@)">
            <summary>
            Tries to locate a custom namespace URI.
            </summary>
            <param name="element">The element to locate the namespace URI for.</param>
            <param name="prefix">The prefix of the custom namespace.</param>
            <param name="namespaceUri">The located namespace URI.</param>
            <returns>True if the namespace URI could be located, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.TryLocateStandardNamespace(AngleSharp.Dom.IElement,System.String@)">
            <summary>
            Tries to locate the standard namespace URI.
            </summary>
            <param name="element">The element to locate the namespace URI for.</param>
            <param name="namespaceUri">The located namespace URI.</param>
            <returns>True if the namespace URI could be located, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.CreateRequestFor(AngleSharp.Dom.IElement,AngleSharp.Url)">
            <summary>
            Creates a new resource request from the provided element for the
            given url.
            </summary>
            <param name="element">The element creating a request.</param>
            <param name="url">The address that specifies the target.</param>
            <returns>The new resource request with the information.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.MatchesCssNamespace(AngleSharp.Dom.IElement,System.String)">
            <summary>
            Checks if the element with the provided prefix matches the CSS
            namespace.
            </summary>
            <param name="el">The element to examine.</param>
            <param name="prefix">The namespace in question.</param>
            <returns>True if the namespace is matched, else false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.GetCssNamespace(AngleSharp.Dom.IElement,System.String)">
            <summary>
            Gets the CSS namespace that is defined via the provided prefix.
            </summary>
            <param name="el">The element that is connected to a doc.</param>
            <param name="prefix">The prefix to lookup.</param>
            <returns>The namespace url for the prefix.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsHovered(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently hovered.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently hovered, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsOnlyOfType(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is the only of its type among the parent's children.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is the only of its type among its siblings.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsFirstOfType(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is the first of its type among the parent's children.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is the first of its type among its siblings.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsLastOfType(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is the last of its type among the parent's children.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is the last of its type among its siblings.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsTarget(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently targeted.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element's ID is equal to the hash.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsEnabled(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently enabled.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently enabled, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsDisabled(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently disabled.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently disabled, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsDefault(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is an input element that is currently in its default state.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently in its default state, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsPseudo(AngleSharp.Dom.IElement,System.String)">
            <summary>
            Checks if the element is a pseudo element (before or after).
            </summary>
            <param name="element">The element to check.</param>
            <param name="name">The pseudo element's name.</param>
            <returns>True if the element is a pseudo element, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsChecked(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently checked.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently checked, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsIndeterminate(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently in its indeterminate state.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently indeterminate, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsPlaceholderShown(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently showing a placeholder.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently showing a placeholder, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsUnchecked(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently unchecked.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently unchecked, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsActive(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is currently active.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is currently active, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsVisited(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element has already been visited.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element has been visited, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsLink(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is a link.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is a link, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsShadow(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element hosts a shadow tree.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element hosts a shadow tree.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsOptional(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is only optional and not required.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is optional, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsRequired(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is required and must be filled out.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is required, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsInvalid(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element does not validate.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is invalid, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsValid(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element does validate.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is valid, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsReadOnly(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is readonly.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is readonly, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsEditable(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is editable.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element can be edited, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsOutOfRange(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element's value is out-of-range.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is invalid, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsInRange(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element's value is within the range.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is valid, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsOnlyChild(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is its parent's only child.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element has no siblings, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsFirstChild(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is its parent's first child.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element's first child is the given one, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.IsLastChild(AngleSharp.Dom.IElement)">
            <summary>
            Checks if the element is its parent's last child.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element's last child is the given one, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Attr``1(``0,System.String,System.String)">
            <summary>
            Sets the specified attribute name to the specified value for all
            elements in the given collection.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="attributeValue">The value of the attribute.</param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Attr``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets the specified attribute name to the specified value for all
            elements in the given collection.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection.</param>
            <param name="attributes">
            An enumeration of attributes in form of key-value pairs.
            </param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Attr``1(``0,System.Object)">
            <summary>
            Sets the specified attribute name to the specified value for all
            elements in the given collection.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection of elements.</param>
            <param name="attributes">
            An enumeration of attributes in form of an anonymous object, that
            carries key-value pairs.
            </param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Attr``1(``0,System.String)">
            <summary>
            Gets the values of the specified attribute for all elements in the
            given collection.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection of elements.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The attributes' values.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.ClearAttr(AngleSharp.Dom.IElement)">
            <summary>
            Clears the attributes of the given element.
            </summary>
            <param name="element">The element to clear.</param>
            <returns>The element itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.ClearAttr``1(``0)">
            <summary>
            Clears the attributes of all elements.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection to clear.</param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Empty(AngleSharp.Dom.IElement)">
            <summary>
            Empties the provided element.
            </summary>
            <param name="element">The element to empty.</param>
            <returns>The element itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Empty``1(``0)">
            <summary>
            Empties all provided elements.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection.</param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Html(AngleSharp.Dom.IElement)">
            <summary>
            Gets the inner HTML of the given element.
            </summary>
            <param name="element">The element.</param>
            <returns>The source code of the inner HTML.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Html``1(``0,System.String)">
            <summary>
            Sets the inner HTML of the given elements.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="elements">The collection.</param>
            <param name="html">
            The source code of the inner HTML to set.
            </param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.AddClass``1(``0,System.String)">
            <summary>
            Adds the specified class name(s) for all elements in the given
            collection.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection.</param>
            <param name="className">The name(s) of the class(es).</param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.RemoveClass``1(``0,System.String)">
            <summary>
            Removes the specified class name(s) for all elements in the given
            collection.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection.</param>
            <param name="className">The name(s) of the class(es).</param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.ToggleClass``1(``0,System.String)">
            <summary>
            Toggles the specified class name(s) for all elements in the given
            collection.
            </summary>
            <typeparam name="T">The type of element collection.</typeparam>
            <param name="elements">The collection.</param>
            <param name="className">The name(s) of the class(es).</param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.HasClass(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},System.String)">
            <summary>
            Checks if any element in the given collection has the given
            class(es).
            </summary>
            <param name="elements">The collection of elements.</param>
            <param name="className">The name(s) of the class(es).</param>
            <returns>
            True if any element has the class(es), otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Before``1(``0,System.String)">
            <summary>
            Inserts the nodes generated from the given HTML code before
            each element of the provided elements.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="elements">The elements to iterate through.</param>
            <param name="html">The HTML code that generates the nodes.</param>
            <returns>The unchanged collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.After``1(``0,System.String)">
            <summary>
            Inserts the nodes generated from the given HTML code after
            each element of the provided elements.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="elements">The elements to iterate through.</param>
            <param name="html">The HTML code that generates the nodes.</param>
            <returns>The unchanged collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Append``1(``0,System.String)">
            <summary>
            Appends the nodes generated from the given HTML code to each
            element of the provided elements.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="elements">The elements to iterate through.</param>
            <param name="html">The HTML code that generates the nodes.</param>
            <returns>The unchanged collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Prepend``1(``0,System.String)">
            <summary>
            Prepends the nodes generated from the given HTML code to each
            element of the provided elements.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="elements">The elements to iterate through.</param>
            <param name="html">The HTML code that generates the nodes.</param>
            <returns>The unchanged collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Wrap``1(``0,System.String)">
            <summary>
            Wraps the given elements in the inner most element of the tree
            generated form the provided HTML code.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="elements">The elements to iterate through.</param>
            <param name="html">The HTML code that generates the tree.</param>
            <returns>The unchanged collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.WrapInner``1(``0,System.String)">
            <summary>
            Wraps the content of the given elements in the inner most element
            of the tree generated form the provided HTML code.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="elements">The elements to iterate through.</param>
            <param name="html">The HTML code that generates the tree.</param>
            <returns>The unchanged collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.WrapAll``1(``0,System.String)">
            <summary>
            Wraps all elements in the inner most element of the tree
            generated form the provided HTML code. The tree is appended before
            the first element of the given list.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="elements">The elements to wrap.</param>
            <param name="html">The HTML code that generates the tree.</param>
            <returns>The unchanged collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new HTML Collection from the provided elements.
            </summary>
            <typeparam name="TElement">The base type of the elements.</typeparam>
            <param name="elements">The elements to include.</param>
            <returns>The created collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.NavigateAsync``1(``0)">
            <summary>
            Navigates to the hyper reference given by the provided element
            without any possibility for cancellation.
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="element">The element of navigation.</param>
            <returns>The task eventually resulting in the response.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.NavigateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Navigates to the hyper reference given by the provided element.
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="element">The element of navigation.</param>
            <param name="cancel">The token for cancellation.</param>
            <returns>The task eventually resulting in the response.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.Process(AngleSharp.Dom.Element,AngleSharp.Io.Processors.IRequestProcessor,AngleSharp.Url)">
            <summary>
            Creates a task to use the processor for loading and processing the
            resource from the provided url.
            </summary>
            <param name="element">The element to use.</param>
            <param name="processor">The processor to use.</param>
            <param name="url">The url of the resource.</param>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.GetImageCandidate(AngleSharp.Html.Dom.HtmlImageElement)">
            <summary>
            Gets a suitable image candidate for the provided image element.
            </summary>
            <param name="img">The element to use.</param>
            <returns>The possibly valid URL to the right candidate.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.NavigateToAsync(AngleSharp.Dom.Element,AngleSharp.Io.DocumentRequest)">
            <summary>
            Plan to navigate to an action using the specified method with the given
            entity body of the mime type.
            http://www.w3.org/html/wg/drafts/html/master/forms.html#plan-to-navigate
            </summary>
            <param name="element">The element to navigate from.</param>
            <param name="request">The request to issue.</param>
            <returns>A task that will eventually result in a new document.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.GetOwnAttribute(AngleSharp.Dom.Element,System.String)">
            <summary>
            Faster way of getting the (known) attribute.
            </summary>
            <param name="element">The element to host the attribute.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute's value, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.HasOwnAttribute(AngleSharp.Dom.Element,System.String)">
            <summary>
            Faster way of checking for a (known) attribute.
            </summary>
            <param name="element">The element to host the attribute.</param>
            <param name="name">The name of the attribute.</param>
            <returns>True if the attribute exists, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.GetUrlAttribute(AngleSharp.Dom.Element,System.String)">
            <summary>
            Easy way of getting the current absolute url from attributes.
            </summary>
            <param name="element">The element to host the attribute.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute's absolute url value.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.GetBoolAttribute(AngleSharp.Dom.Element,System.String)">
            <summary>
            Easy way of getting the current boolean value from attributes.
            </summary>
            <param name="element">The element to host the attribute.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The attribute's boolean value.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.SetBoolAttribute(AngleSharp.Dom.Element,System.String,System.Boolean)">
            <summary>
            Easy way of setting the current boolean value of an attribute.
            </summary>
            <param name="element">The element to host the attribute.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The attribute's value.</param>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.SetOwnAttribute(AngleSharp.Dom.Element,System.String,System.String,System.Boolean)">
            <summary>
            Faster way of setting the (known) attribute.
            </summary>
            <param name="element">The element to host the attribute.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The attribute's value.</param>
            <param name="suppressCallbacks">Flag to suppress callbacks.</param>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.GetSelector(AngleSharp.Dom.IElement)">
            <summary>
            Creates a unique selector path used to locate the element in the DOM.
            </summary>
            <param name="element">The starting node to create the selector path from.</param>
            <returns>The unique selector path for this element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ElementExtensions.ParseHtmlSubtree(AngleSharp.Dom.Element,System.String)">
            <summary>
            Parses the HTML subtree of the given content in the context of
            the provided element.
            </summary>
            <param name="element">The element to use as context.</param>
            <param name="html">The HTML source for the subtree.</param>
            <returns>The root element of the HTML subtree.</returns>
        </member>
        <member name="T:AngleSharp.Dom.EventNames">
            <summary>
            The collection of (known / used) event names.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Invalid">
            <summary>
            The invalid event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Load">
            <summary>
            The load event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DomContentLoaded">
            <summary>
            The DOMContentLoaded event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Error">
            <summary>
            The error event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.BeforeScriptExecute">
            <summary>
            The beforescriptexecute event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.AfterScriptExecute">
            <summary>
            The afterscriptexecute event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.ReadyStateChanged">
            <summary>
            The readystatechanged event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Abort">
            <summary>
            The abort event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Blur">
            <summary>
            The blur event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Cancel">
            <summary>
            The cancel event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Click">
            <summary>
            The click event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Change">
            <summary>
            The change event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.CanPlayThrough">
            <summary>
            The canplaythrough event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.CanPlay">
            <summary>
            The canplay event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.CueChange">
            <summary>
            The cuechange event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DblClick">
            <summary>
            The dblclick event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Drag">
            <summary>
            The drag event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DragEnd">
            <summary>
            The dragend event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DragEnter">
            <summary>
            The dragenter event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DragExit">
            <summary>
            The dragexit event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DragLeave">
            <summary>
            The dragleave event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DragOver">
            <summary>
            The dragover event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DragStart">
            <summary>
            The dragstart event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Drop">
            <summary>
            The drop event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.DurationChange">
            <summary>
            The durationchange event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Emptied">
            <summary>
            The emptied event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Focus">
            <summary>
            The focus event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.FullscreenChange">
            <summary>
            The fullscreenchange event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.FullscreenError">
            <summary>
            The fullscreenerror event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.HashChange">
            <summary>
            The hashchange event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Input">
            <summary>
            The input event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Message">
            <summary>
            The message event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Keydown">
            <summary>
            The keydown event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Keypress">
            <summary>
            The keypress event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Keyup">
            <summary>
            The keyup event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Ended">
            <summary>
            The ended event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.LoadedData">
            <summary>
            The loadeddata event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.LoadedMetaData">
            <summary>
            The loadedmetadata event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.LoadEnd">
            <summary>
            The loadend event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.LoadStart">
            <summary>
            The loadstart event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Wheel">
            <summary>
            The wheel event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Mouseup">
            <summary>
            The mouseup event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Mouseover">
            <summary>
            The mouseover event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Mouseout">
            <summary>
            The mouseout event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Mousemove">
            <summary>
            The mousemove event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Mouseleave">
            <summary>
            The mouseleave event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Mouseenter">
            <summary>
            The mouseenter event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Mousedown">
            <summary>
            The mousedown event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Pause">
            <summary>
            The pause event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Play">
            <summary>
            The play event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Playing">
            <summary>
            The playing event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Progress">
            <summary>
            The progress event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.RateChange">
            <summary>
            The ratechange event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Waiting">
            <summary>
            The waiting event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.VolumeChange">
            <summary>
            The volumechange event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Toggle">
            <summary>
            The toggle event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.TimeUpdate">
            <summary>
            The timeupdate event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Suspend">
            <summary>
            The suspend event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Submit">
            <summary>
            The submit event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Stalled">
            <summary>
            The stalled event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Show">
            <summary>
            The show event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Select">
            <summary>
            The select event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Seeking">
            <summary>
            The seeking event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Seeked">
            <summary>
            The seeked event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Scroll">
            <summary>
            The scroll event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Resize">
            <summary>
            The resize event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Reset">
            <summary>
            The reset event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.AfterPrint">
            <summary>
            The afterprint event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Print">
            <summary>
            The print event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.BeforePrint">
            <summary>
            The beforeprint event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.BeforeUnload">
            <summary>
            The beforeunload event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Unloading">
            <summary>
            The unloading event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Offline">
            <summary>
            The offline event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Online">
            <summary>
            The online event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.PageHide">
            <summary>
            The pagehide event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.PageShow">
            <summary>
            The pageshow event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.PopState">
            <summary>
            The popstate event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Unload">
            <summary>
            The unload event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.ConfirmUnload">
            <summary>
            The confirmUnload event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Storage">
            <summary>
            The storage event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Parsing">
            <summary>
            The parsing event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Parsed">
            <summary>
            The parsed event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Requesting">
            <summary>
            The requesting event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.EventNames.Requested">
            <summary>
            The requested event.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Events.CustomEvent">
            <summary>
            Represents a custom event that provides an additional details property.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.CustomEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.CustomEvent.#ctor(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="details">Sets the details for the custom event.</param>
        </member>
        <member name="P:AngleSharp.Dom.Events.CustomEvent.Details">
            <summary>
            Gets the details that have been associated with the custom event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.CustomEvent.Init(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Initializes the custom event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="details">Sets the details for the custom event.</param>
        </member>
        <member name="T:AngleSharp.Dom.Events.DefaultEventFactory">
            <summary>
            Provides string to Event instance creation mappings.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Events.DefaultEventFactory.Creator">
            <summary>
            Represents a creator delegate for creating a new event.
            </summary>
            <returns>The created event.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Events.DefaultEventFactory.#ctor">
            <summary>
            Creates a new event factory.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.DefaultEventFactory.Register(System.String,AngleSharp.Dom.Events.DefaultEventFactory.Creator)">
            <summary>
            Registers a new creator for the specified event name.
            Throws an exception if another creator for the given
            event name is already added.
            </summary>
            <param name="name">The name of the event.</param>
            <param name="creator">The creator to invoke.</param>
        </member>
        <member name="M:AngleSharp.Dom.Events.DefaultEventFactory.Unregister(System.String)">
            <summary>
            Unregisters an existing creator for the given event name.
            </summary>
            <param name="name">The name of the event.</param>
            <returns>The registered creator, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Events.DefaultEventFactory.CreateDefault(System.String)">
            <summary>
            Creates the default event for the given name. By default
            this returns null.
            </summary>
            <param name="name">The name of the event.</param>
            <returns>The created event.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Events.DefaultEventFactory.Create(System.String)">
            <summary>
            Creates a new event.
            </summary>
            <param name="name">The name of the event.</param>
            <returns>The created event.</returns>
        </member>
        <member name="T:AngleSharp.Dom.Events.ErrorEvent">
            <summary>
            Represents the error event arguments.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.ErrorEvent.Message">
            <summary>
            Gets the message describing the error.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.ErrorEvent.FileName">
            <summary>
            Gets the filename where the error occurred.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.ErrorEvent.Line">
            <summary>
            Gets the line number of the error.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.ErrorEvent.Column">
            <summary>
            Gets the column number of the error.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.ErrorEvent.Error">
            <summary>
            Gets the exception describing the error.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.ErrorEvent.Init(System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes the error event.
            </summary>
            <param name="filename">The name of the file containing the error.</param>
            <param name="line">The line within the file.</param>
            <param name="column">The column within the line,.</param>
            <param name="error">The specific error that was thrown.</param>
        </member>
        <member name="T:AngleSharp.Dom.Events.Event">
            <summary>
            Represents an event argument.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.Event.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.Event.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.Flags">
            <summary>
            Gets the associated flags.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.Type">
            <summary>
            Gets the type of event.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.OriginalTarget">
            <summary>
            Gets the original target of the event.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.CurrentTarget">
            <summary>
            Gets the current target (if bubbled).
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.Phase">
            <summary>
            Gets the phase of the event.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.IsBubbling">
            <summary>
            Gets if the event is actually bubbling.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.IsCancelable">
            <summary>
            Gets if the event is cancelable.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.IsDefaultPrevented">
            <summary>
            Gets if the default behavior has been prevented.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.IsTrusted">
            <summary>
            Gets if the event is trusted.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.Event.Time">
            <summary>
            Gets the originating timestamp.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.Event.Stop">
            <summary>
            Prevents further propagation of the event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.Event.StopImmediately">
            <summary>
            Stops the immediate propagation.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.Event.Cancel">
            <summary>
            Prevents the default behavior.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.Event.Init(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes the event.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
        </member>
        <member name="M:AngleSharp.Dom.Events.Event.Dispatch(AngleSharp.Dom.IEventTarget)">
            <summary>
            Dispatch the event as described in the specification.
            http://www.w3.org/TR/DOM-Level-3-Events/
            </summary>
            <param name="target">The target of the event.</param>
            <returns>A boolean if the event has been cancelled.</returns>
        </member>
        <member name="T:AngleSharp.Dom.Events.EventPhase">
            <summary>
            Represents the different phases of an event.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.Events.EventPhase.None">
            <summary>
            Events not currently dispatched are in this phase.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.Events.EventPhase.Capturing">
            <summary>
            When an event is dispatched to an object that
            participates in a tree it will be in this phase
            before it reaches its target attribute value.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.Events.EventPhase.AtTarget">
            <summary>
            When an event is dispatched it will be in this
            phase on its target attribute value.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.Events.EventPhase.Bubbling">
            <summary>
            When an event is dispatched to an object that
            participates in a tree it will be in this phase
            after it reaches its target attribute value.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Events.FocusEvent">
            <summary>
            Represents the arguments for a focus event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.FocusEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.FocusEvent.#ctor(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,AngleSharp.Dom.IEventTarget)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UIevent.</param>
            <param name="target">The target that is being focused.</param>
        </member>
        <member name="P:AngleSharp.Dom.Events.FocusEvent.Target">
            <summary>
            Gets the target of the event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.FocusEvent.Init(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,AngleSharp.Dom.IEventTarget)">
            <summary>
            Initializes the focus event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UIevent.</param>
            <param name="target">The target that is being focused.</param>
        </member>
        <member name="T:AngleSharp.Dom.Events.HashChangedEvent">
            <summary>
            Represents a custom event that provides an additional details property.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.HashChangedEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.HashChangedEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="oldURL">The previous URL.</param>
            <param name="newURL">The current URL.</param>
        </member>
        <member name="P:AngleSharp.Dom.Events.HashChangedEvent.PreviousUrl">
            <summary>
            Gets the URL before the hash changed.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.HashChangedEvent.CurrentUrl">
            <summary>
            Gets the URL after the hash changed.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.HashChangedEvent.Init(System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Initializes the hashchanged event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="previousUrl">The previous URL.</param>
            <param name="currentUrl">The current URL.</param>
        </member>
        <member name="T:AngleSharp.Dom.Events.IEventFactory">
            <summary>
            Represents a factory to create event data.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.IEventFactory.Create(System.String)">
            <summary>
            Creates a new event data object for the given event.
            </summary>
            <param name="name">The name of the event.</param>
            <returns>The event data for the given event.</returns>
        </member>
        <member name="T:AngleSharp.Dom.Events.IGlobalEventHandlers">
            <summary>
            Defines a set of event handlers that are implemented by all HTML elements.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Aborted">
            <summary>
            Event triggered after aborting.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Blurred">
            <summary>
            Event triggered after losing focus.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Cancelled">
            <summary>
            Event triggered after cancelling.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.CanPlay">
            <summary>
            Event triggered when the media can be played.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.CanPlayThrough">
            <summary>
            Event triggered when the media can be fully played.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Changed">
            <summary>
            Event triggered after the value changed.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Clicked">
            <summary>
            Event triggered after being clicked.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.CueChanged">
            <summary>
            Event triggered after changing the cue.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.DoubleClick">
            <summary>
            Event triggered after performing a double click.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Drag">
            <summary>
            Event triggered after starting to be dragged.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.DragEnd">
            <summary>
            Event triggered after being dragged.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.DragEnter">
            <summary>
            Event triggered after entering in dragging mode.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.DragExit">
            <summary>
            Event triggered after exiting the dragging mode.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.DragLeave">
            <summary>
            Event triggered after leaving in dragging mode.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.DragOver">
            <summary>
            Event triggered after hovering in dragging mode.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.DragStart">
            <summary>
            Event triggered after starting to drag.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Dropped">
            <summary>
            Event triggered after dropping.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.DurationChanged">
            <summary>
            Event triggered when the media cursor changed.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Emptied">
            <summary>
            Event triggered after being emptied.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Ended">
            <summary>
            Event triggered after the media ended.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Error">
            <summary>
            Event triggered after an error occurred.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Focused">
            <summary>
            Event triggered after receiving focus.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Input">
            <summary>
            Event triggered after input has happend.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Invalid">
            <summary>
            Event triggered after validation failed.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.KeyDown">
            <summary>
            Event triggered after key down.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.KeyPress">
            <summary>
            Event triggered after key press.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.KeyUp">
            <summary>
            Event triggered after key up.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Loaded">
            <summary>
            Event triggered after the content has been fully loaded.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.LoadedData">
            <summary>
            Event triggered after the data has been loaded.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.LoadedMetadata">
            <summary>
            Event triggered after the meta data has been received.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Loading">
            <summary>
            Event triggered when loading begins.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.MouseDown">
            <summary>
            Event triggered after mouse down.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.MouseEnter">
            <summary>
            Event triggered after mouse enter.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.MouseLeave">
            <summary>
            Event triggered after mouse leave.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.MouseMove">
            <summary>
            Event triggered after mouse move.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.MouseOut">
            <summary>
            Event triggered after mouse out.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.MouseOver">
            <summary>
            Event triggered after mouse over.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.MouseUp">
            <summary>
            Event triggered after mouse up.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.MouseWheel">
            <summary>
            Event triggered after mouse wheel.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Paused">
            <summary>
            Event triggered after the media paused.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Played">
            <summary>
            Event triggered after the media started.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Playing">
            <summary>
            Event triggered before the media started.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Progress">
            <summary>
            Event triggered after progress.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.RateChanged">
            <summary>
            Event triggered after the rate changed.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Resetted">
            <summary>
            Event triggered after resetting the form.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Resized">
            <summary>
            Event triggered after resizing the window.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Scrolled">
            <summary>
            Event triggered after scrolling has happened.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Seeked">
            <summary>
            Event triggered after seeking in the media stream.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Seeking">
            <summary>
            Event triggered before seeking in the media stream.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Selected">
            <summary>
            Event triggered after selected the element.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Shown">
            <summary>
            Event triggered after being shown.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Stalled">
            <summary>
            Event triggered after being stalled.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Submitted">
            <summary>
            Event triggered after the form has been submitted.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Suspended">
            <summary>
            Event triggered after suspending.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.TimeUpdated">
            <summary>
            Event triggered after the time updated.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Toggled">
            <summary>
            Event triggered after being toggled.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.VolumeChanged">
            <summary>
            Event triggered after the volume changed.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IGlobalEventHandlers.Waiting">
            <summary>
            Event triggered when waiting for input.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Events.IMessagePort">
            <summary>
            Represents a message port as defined here:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#messageport
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.IMessagePort.Send(System.Object)">
            <summary>
            Sends a message over the current message port.
            </summary>
            <param name="message">The message to send. Will be serialized to a string.</param>
        </member>
        <member name="M:AngleSharp.Dom.Events.IMessagePort.Open">
            <summary>
            Opens the message port.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.IMessagePort.Close">
            <summary>
            Closes the message port.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IMessagePort.MessageReceived">
            <summary>
            Fired when a message has been received.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Events.IWindowEventHandlers">
            <summary>
            Represents a set of event handlers for a Window.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.Printed">
            <summary>
            Event triggered after printing.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.Printing">
            <summary>
            Event triggered before printing.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.Unloading">
            <summary>
            Event triggered before closing the document.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.HashChanged">
            <summary>
            Event triggered when the hash has been changed.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.MessageReceived">
            <summary>
            Event triggered after receiving a message.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.WentOffline">
            <summary>
            Event triggered after losing connection.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.WentOnline">
            <summary>
            Event triggered after being connected.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.PageHidden">
            <summary>
            Event triggered after the page has been hidden.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.PageShown">
            <summary>
            Event triggered after showing the page.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.PopState">
            <summary>
            Event triggered after popping the state from the history.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.Storage">
            <summary>
            Event triggered after using the provided storage.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Events.IWindowEventHandlers.Unloaded">
            <summary>
            Event triggered after after closing the document.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Events.MessageEvent">
            <summary>
            Represents the event arguments when receiving a message.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.MessageEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.MessageEvent.#ctor(System.String,System.Boolean,System.Boolean,System.Object,System.String,System.String,AngleSharp.Dom.IWindow,AngleSharp.Dom.Events.IMessagePort[])">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="data">Sets the data for the message event.</param>
            <param name="origin">Sets the origin who send the message.</param>
            <param name="lastEventId">Sets the id of the last event.</param>
            <param name="source">Sets the source window of the message.</param>
            <param name="ports">The message ports to include.</param>
        </member>
        <member name="P:AngleSharp.Dom.Events.MessageEvent.Data">
            <summary>
            Gets the data that is carried by the message.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.MessageEvent.Origin">
            <summary>
            Gets the origin of the message.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.MessageEvent.LastEventId">
            <summary>
            Gets the id of the last event.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.MessageEvent.Source">
            <summary>
            Gets the source of the message.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.MessageEvent.Ports">
            <summary>
            Gets the used message ports.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.MessageEvent.Init(System.String,System.Boolean,System.Boolean,System.Object,System.String,System.String,AngleSharp.Dom.IWindow,AngleSharp.Dom.Events.IMessagePort[])">
            <summary>
            Initializes the message event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="data">Sets the data for the message event.</param>
            <param name="origin">Sets the origin who send the message.</param>
            <param name="lastEventId">Sets the id of the last event.</param>
            <param name="source">Sets the source window of the message.</param>
            <param name="ports">The message ports to include.</param>
        </member>
        <member name="T:AngleSharp.Dom.Events.PageTransitionEvent">
            <summary>
            Represents a page transition event argument.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.PageTransitionEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.PageTransitionEvent.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="persisted">Indicates if a webpage is loading from a cache.</param>
        </member>
        <member name="P:AngleSharp.Dom.Events.PageTransitionEvent.IsPersisted">
            <summary>
            Gets if a webpage is loading from a cache..
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.PageTransitionEvent.Init(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the event.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="persisted">Indicates if a webpage is loading from a cache.</param>
        </member>
        <member name="T:AngleSharp.Dom.Events.RequestEvent">
            <summary>
            The event that is published in case of new request.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.RequestEvent.#ctor(AngleSharp.Io.Request,AngleSharp.Io.IResponse)">
            <summary>
            Creates a new event for a request.
            </summary>
            <param name="request">The data of the request.</param>
            <param name="response">The received response.</param>
        </member>
        <member name="P:AngleSharp.Dom.Events.RequestEvent.Request">
            <summary>
            Gets the transmitted request.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.RequestEvent.Response">
            <summary>
            Gets the received response.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Events.UiEvent">
            <summary>
            Represents the event args for any UI event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.UiEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.UiEvent.#ctor(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UIevent.</param>
        </member>
        <member name="P:AngleSharp.Dom.Events.UiEvent.View">
            <summary>
            Gets the associated view.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Events.UiEvent.Detail">
            <summary>
            Gets the event details.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Events.UiEvent.Init(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32)">
            <summary>
            Initializes the UI event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UIevent.</param>
        </member>
        <member name="T:AngleSharp.Dom.EventTarget">
            <summary>
            Event target base of all DOM nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.EventTarget.AddEventListener(System.String,AngleSharp.Dom.DomEventHandler,System.Boolean)">
            <summary>
            Register an event handler of a specific event type on the Node.
            </summary>
            <param name="type">
            A string representing the event type to listen for.
            </param>
            <param name="callback">
            The listener parameter indicates the EventListener function to be
            added.
            </param>
            <param name="capture">
            True indicates that the user wishes to initiate capture. After
            initiating capture, all events of the specified type will be
            dispatched to the registered listener before being dispatched to
            any Node beneath it in the DOM tree. Events which are bubbling
            upward through the tree will not trigger a listener designated to
            use capture.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.EventTarget.RemoveEventListener(System.String,AngleSharp.Dom.DomEventHandler,System.Boolean)">
            <summary>
            Removes an event listener from the Node.
            </summary>
            <param name="type">
            A string representing the event type being removed.
            </param>
            <param name="callback">
            The listener parameter indicates the EventListener function to be
            removed.
            </param>
            <param name="capture">
            Specifies whether the EventListener being removed was registered as
            a capturing listener or not.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.EventTarget.RemoveEventListeners">
            <summary>
            Removes all listeners.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.EventTarget.InvokeEventListener(AngleSharp.Dom.Events.Event)">
            <summary>
            Calls the listener registered for the given event.
            </summary>
            <param name="ev">The event that asks for the listeners.</param>
        </member>
        <member name="M:AngleSharp.Dom.EventTarget.HasEventListener(System.String)">
            <summary>
            Checks if the given event type has any listeners registered.
            </summary>
            <param name="type">The name of the event.</param>
            <returns>
            True if listeners are registered, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.EventTarget.Dispatch(AngleSharp.Dom.Events.Event)">
            <summary>
            Dispatch an event to this Node.
            </summary>
            <param name="ev">The event to dispatch.</param>
            <returns>
            False if at least one of the event handlers, which handled this
            event called preventDefault(). Otherwise true.
            </returns>
        </member>
        <member name="T:AngleSharp.Dom.EventTargetExtensions">
            <summary>
            A set of extensions for EventTarget objects.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.EventTargetExtensions.FireSimpleEvent(AngleSharp.Dom.IEventTarget,System.String,System.Boolean,System.Boolean)">
            <summary>
            Firing a simple event means that a trusted event with a name, which
            does not bubble, is not cancelable and which uses the Event
            interface. It is created and dispatched at the given target.
            </summary>
            <param name="target">The target of the simple event.</param>
            <param name="eventName">The name of the event to be fired.</param>
            <param name="bubble">Optional parameter to enable bubbling.</param>
            <param name="cancelable">Should it be cancelable?</param>
            <returns>
            True if the element was cancelled, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.EventTargetExtensions.Fire(AngleSharp.Dom.IEventTarget,AngleSharp.Dom.Events.Event)">
            <summary>
            Fires a trusted event with the provided event data.
            </summary>
            <param name="target">The target of the event.</param>
            <param name="eventData">The event data to dispatch.</param>
            <returns>
            True if the element was cancelled, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.EventTargetExtensions.Fire``1(AngleSharp.Dom.IEventTarget,System.Action{``0},AngleSharp.Dom.IEventTarget)">
            <summary>
            Firing an event means dispatching the initialized (and trusted) 
            event at the specified event target.
            </summary>
            <param name="target">
            The target, where the event has been invoked.
            </param>
            <param name="initializer">The used initializer.</param>
            <param name="targetOverride">
            The current event target, if different to the invoked target.
            </param>
            <returns>
            True if the element was cancelled, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.EventTargetExtensions.AwaitEventAsync``1(``0,System.String)">
            <summary>
            Returns a task that is completed once the event is fired.
            </summary>
            <typeparam name="TEventTarget">The event target type.</typeparam>
            <param name="node">The node that fires the event.</param>
            <param name="eventName">The name of the event to be awaited.</param>
            <returns>The awaitable task returning the event arguments.</returns>
        </member>
        <member name="T:AngleSharp.Dom.FilterResult">
            <summary>
            An enumeration that contains the valid results of examining a node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterResult.Accept">
            <summary>
            The Node is accepted.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterResult.Reject">
            <summary>
            The Node (and its children) are rejected.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterResult.Skip">
            <summary>
            The Node is skipped. Children are still considered.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.FilterSettings">
            <summary>
            The enumeration with the flags for setting the NodeIterator.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.All">
            <summary>
            All nodes will be considered.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.Element">
            <summary>
            Elements will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.Attribute">
            <summary>
            Attributes will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.Text">
            <summary>
            Text nodes will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.CharacterData">
            <summary>
            CData sections will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.EntityReference">
            <summary>
            EntityReferences will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.Entity">
            <summary>
            Entities will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.ProcessingInstruction">
            <summary>
            ProcessingInstructions will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.Comment">
            <summary>
            Comments will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.Document">
            <summary>
            Documents will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.DocumentType">
            <summary>
            DocumentTypes will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.DocumentFragment">
            <summary>
            DocumentFragments will be shown.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.FilterSettings.Notation">
            <summary>
            Notations will be shown.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.HorizontalAlignment">
            <summary>
            The list of possible horizontal alignments.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.HorizontalAlignment.Left">
            <summary>
            The inline contents are aligned to the left edge of the line box.
            This is the default value for table data.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.HorizontalAlignment.Center">
            <summary>
            The inline contents are centered within the line box. This is
            the default value for table headers.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.HorizontalAlignment.Right">
            <summary>
            The inline contents are aligned to the right edge of the line box.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.HorizontalAlignment.Justify">
            <summary>
            The text is justified. Text should line up their left and right
            edges to the left and right content edges of the paragraph.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IAttr">
            <summary>
            This type represents a DOM element's attribute as an object. 
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IAttr.LocalName">
            <summary>
            Gets the local name of the attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IAttr.Name">
            <summary>
            Gets the attribute's name.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IAttr.Value">
            <summary>
            Gets the attribute's value.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IAttr.NamespaceUri">
            <summary>
            Gets the namespace URL of the attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IAttr.Prefix">
            <summary>
            Gets the prefix used by the namespace.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IAttributeObserver">
            <summary>
            Represents the interface for observing attribute changes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IAttributeObserver.NotifyChange(AngleSharp.Dom.IElement,System.String,System.String)">
            <summary>
            Defines the callback signature to react once an attribute changes.
            </summary>
            <param name="host">The element hosting the attribute.</param>
            <param name="name">The name of the changed attribute.</param>
            <param name="value">The new value of the attribute.</param>
        </member>
        <member name="T:AngleSharp.Dom.ICharacterData">
            <summary>
            The CharacterData abstract interface represents a Node object that
            contains characters. 
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ICharacterData.Data">
            <summary>
            Gets or sets the contained text.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ICharacterData.Length">
            <summary>
            Gets the length of the contained text.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.ICharacterData.Substring(System.Int32,System.Int32)">
            <summary>
            Returns a string containing the part of Data of the specified
            length and starting at the specified offset.
            </summary>
            <param name="offset">The point where to start.</param>
            <param name="count">The numbers of characters to copy.</param>
            <returns>
            A string that contains a subset of the characters of Data.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.ICharacterData.Append(System.String)">
            <summary>
            Appends the given value to the Data string.
            </summary>
            <param name="value">The text to append.</param>
        </member>
        <member name="M:AngleSharp.Dom.ICharacterData.Insert(System.Int32,System.String)">
            <summary>
            Inserts the specified characters, at the specified offset,
            in the Data text.
            </summary>
            <param name="offset">The offset where to insert the text.</param>
            <param name="value">The text to insert.</param>
        </member>
        <member name="M:AngleSharp.Dom.ICharacterData.Delete(System.Int32,System.Int32)">
            <summary>
            Removes the specified amount of characters, starting at
            the specified offset, from the Data.
            </summary>
            <param name="offset">
            The offset, where the removal should begin.
            </param>
            <param name="count">The number of characters to remove.</param>
        </member>
        <member name="M:AngleSharp.Dom.ICharacterData.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces the specified amount of characters, starting at the
            specified offset, with the specified value.
            </summary>
            <param name="offset">
            The offset, where the text should be inserted.
            </param>
            <param name="count">
            The amount of characters that should be overwritten.
            </param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="T:AngleSharp.Dom.IChildNode">
            <summary>
            The ChildNode interface contains methods that are particular to Node
            objects that can have a parent.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IChildNode.Before(AngleSharp.Dom.INode[])">
            <summary>
            Inserts nodes just before the current node.
            </summary>
            <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:AngleSharp.Dom.IChildNode.After(AngleSharp.Dom.INode[])">
            <summary>
            Inserts nodes just after the current node.
            </summary>
            <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:AngleSharp.Dom.IChildNode.Replace(AngleSharp.Dom.INode[])">
            <summary>
            Replaces the current node with nodes.
            </summary>
            <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:AngleSharp.Dom.IChildNode.Remove">
            <summary>
            Removes the current node.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IComment">
            <summary>
            The Comment interface represents textual notations within markup;
            although it is generally not visually shown, such comments are
            available to be read in the source view.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IDocument">
            <summary>
            The Document interface serves as an entry point to the web page's
            content.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.All">
            <summary>
            Gets a list of all elements in the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Anchors">
            <summary>
            Gets a list of all of the anchors in the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Implementation">
            <summary>
            Gets the DOM implementation associated with the current document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.DesignMode">
            <summary>
            Gets or sets whether the entire document is editable.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Direction">
            <summary>
            Gets or sets the value of the dir attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.DocumentUri">
            <summary>
            Gets the URI of the current document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.CharacterSet">
            <summary>
            Gets the character encoding of the current document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.CompatMode">
            <summary>
            Gets a value to indicate whether the document is rendered in Quirks
            mode (BackComp) or Strict mode (CSS1Compat).
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Url">
            <summary>
            Gets a string containing the URL of the current document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.ContentType">
            <summary>
            Gets the Content-Type from the MIME Header of the current document.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.Open(System.String,System.String)">
            <summary>
            Causes the Document to be replaced in-place, as if it was a new
            Document object, but reusing the previous object, which is then
            returned.
            </summary>
            <param name="type">The new content type.</param>
            <param name="replace">
            Special annotation to replace the history.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.Close">
            <summary>
            Finishes writing to a document.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.Write(System.String)">
            <summary>
            Writes text to a document.
            </summary>
            <param name="content">
            The text to be written on the document.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.WriteLine(System.String)">
            <summary>
            Writes a line of text to a document.
            </summary>
            <param name="content">
            The text to be written on the document.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.Load(System.String)">
            <summary>
            Loads the document content from the given url.
            </summary>
            <param name="url">The url that hosts the content.</param>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Doctype">
            <summary>
            Gets the document type.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.DocumentElement">
            <summary>
            Gets the root element of the document.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.GetElementsByName(System.String)">
            <summary>
            Returns a list of elements with a given name in the HTML document.
            </summary>
            <param name="name">
            The value of the name attribute of the element.
            </param>
            <returns>A collection of HTML elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.GetElementsByClassName(System.String)">
            <summary>
            Returns a set of elements which have all the given class names.
            </summary>
            <param name="classNames">
            A string representing the list of class names to match; class names
            are separated by whitespace.
            </param>
            <returns>A collection of elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.GetElementsByTagName(System.String)">
            <summary>
            Returns a NodeList of elements with the given tag name. The
            complete document is searched, including the root node.
            </summary>
            <param name="tagName">
            A string representing the name of the elements. The special string
            "*" represents all elements.
            </param>
            <returns>
            A collection of elements in the order they appear in the tree.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.GetElementsByTagName(System.String,System.String)">
            <summary>
            Returns a list of elements with the given tag name belonging to the
            given namespace. The complete document is searched, including the
            root node.
            </summary>
            <param name="namespaceUri">
            The namespace URI of elements to look for.
            </param>
            <param name="tagName">
            Either the local name of elements to look for or the special value
            "*", which matches all elements.
            </param>
            <returns>
            A collection of elements in the order they appear in the tree.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateEvent(System.String)">
            <summary>
            Creates an event of the type specified. 
            </summary>
            <param name="type">
            Represents the type of event (e.g., uievent, event, customevent,
            ...) to be created.
            </param>
            <returns>The event.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateRange">
            <summary>
            Creates a new Range object.
            </summary>
            <returns>The range.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateComment(System.String)">
            <summary>
            Creates a new comment node, and returns it.
            </summary>
            <param name="data">
            A string containing the data to be added to the Comment.
            </param>
            <returns>The new comment.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateDocumentFragment">
            <summary>
            Creates an empty DocumentFragment object.
            </summary>
            <returns>The new document fragment.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateElement(System.String)">
            <summary>
            Creates a new element with the given tag name.
            </summary>
            <param name="name">
            A string that specifies the type of element to be created.
            </param>
            <returns>The created element object.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateElement(System.String,System.String)">
            <summary>
            Creates a new element with the given tag name and namespace URI.
            </summary>
            <param name="namespaceUri">
            Specifies the namespace URI to associate with the element.
            </param>
            <param name="name">
            A string that specifies the type of element to be created.
            </param>
            <returns>The created element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateAttribute(System.String)">
            <summary>
            Creates an Attr of the given name.
            </summary>
            <param name="name">
            The name of the attribute.
            </param>
            <returns>
            A new Attr object with the nodeName attribute set to name, and
            localName, prefix, and namespaceURI set to null. The value of the
            attribute is the empty string.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an attribute of the given qualified name and namespace URI.
            </summary>
            <param name="namespaceUri">
            The namespace URI of the attribute to create.
            </param>
            <param name="name">
            The qualified name of the attribute to instantiate.
            </param>
            <returns>A new Attr object.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateProcessingInstruction(System.String,System.String)">
            <summary>
            Creates a ProcessingInstruction node given the specified name and
            data strings.
            </summary>
            <param name="target">
            The target part of the processing instruction.
            </param>
            <param name="data">The data for the node.</param>
            <returns>The new processing instruction.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateTextNode(System.String)">
            <summary>
            Creates a new text node and returns it.
            </summary>
            <param name="data">
            A string containing the data to be put in the text node.
            </param>
            <returns>The created text node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateNodeIterator(AngleSharp.Dom.INode,AngleSharp.Dom.FilterSettings,AngleSharp.Dom.NodeFilter)">
            <summary>
            Creates a new NodeIterator object.
            </summary>
            <param name="root">
            The root node at which to begin the NodeIterator's traversal.
            </param>
            <param name="settings">
            Indicates which nodes to iterate over.
            </param>
            <param name="filter">
            An optional callback function for filtering.
            </param>
            <returns>The created node NodeIterator.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.CreateTreeWalker(AngleSharp.Dom.INode,AngleSharp.Dom.FilterSettings,AngleSharp.Dom.NodeFilter)">
            <summary>
            Creates a new TreeWalker object.
            </summary>
            <param name="root">
            Is the root Node of this TreeWalker traversal.
            </param>
            <param name="settings">
            Indicates which nodes to iterate over.
            </param>
            <param name="filter">
            An optional callback function for filtering.
            </param>
            <returns>The created node TreeWalker.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.Import(AngleSharp.Dom.INode,System.Boolean)">
            <summary>
            Creates a copy of a node from an external document that can be
            inserted into the current document.
            </summary>
            <param name="externalNode">
            The node from another document to be imported.
            </param>
            <param name="deep">
            Optional argument, indicating whether the descendants of the
            imported node need to be imported.
            </param>
            <returns>
            The new node that is imported into the document. The new node's
            parentNode is null, since it has not yet been inserted into the
            document tree.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.Adopt(AngleSharp.Dom.INode)">
            <summary>
            Adopts a node from an external document. The node and its subtree
            is removed from the document it's in (if any), and its
            ownerDocument is changed to the current document. The node can then
            be inserted into the current document. The new node's parentNode is
            null, since it has not yet been inserted into the document tree.
            </summary>
            <param name="externalNode">
            The node from another document to be adopted.
            </param>
            <returns>
            The adopted node that can be used in the current document.
            </returns>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.LastModified">
            <summary>
            Gets the date of the last modification.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.ReadyState">
            <summary>
            Gets the current ready state of the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Location">
            <summary>
            Gets the current location of the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Forms">
            <summary>
            Gets the forms in the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Images">
            <summary>
            Gets the images in the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Scripts">
            <summary>
            Gets the scripts in the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Plugins">
            <summary>
            Gets a list of the embed elements within the current document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Commands">
            <summary>
            Gets a list of the commands (menu item, button, and link elements)
            within the current document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Links">
            <summary>
            Gets a collection of all area and anchor elements in a document
            with a value for the href attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Head">
            <summary>
            Gets or sets the head element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Body">
            <summary>
            Gets the body element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Cookie">
            <summary>
            Gets or sets the document cookie.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Origin">
            <summary>
            Gets the Unicode serialization of document's origin.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Domain">
            <summary>
            Gets or sets the domain portion of the origin of the current
            document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Referrer">
            <summary>
            Gets the referer to that pointed to the current document.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.IDocument.ReadyStateChanged">
            <summary>
            Event triggered after the ready state changed.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.ActiveElement">
            <summary>
            Gets the currently focused element, that is, the element that will
            get keystroke events if the user types any.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.CurrentScript">
            <summary>
            Gets the script element which is currently being processed.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.DefaultView">
            <summary>
            Gets the window object associated with the document or null if none
            available.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.HasFocus">
            <summary>
            Checks if the document is currently focused.
            </summary>
            <returns>True if the document is active and in the focus.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.ExecuteCommand(System.String,System.Boolean,System.String)">
            <summary>
            Executes a command with the provided id and the optional arguments.
            </summary>
            <param name="commandId">The id of the command to issue.</param>
            <param name="showUserInterface">Shall the UI be shown?</param>
            <param name="value">
            The argument value of the command, if any.
            </param>
            <returns>
            True if the command has been successfully executed, otherwise
            false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.IsCommandEnabled(System.String)">
            <summary>
            Checks if the command with the provided id is enabled.
            </summary>
            <param name="commandId">The id of the command to check.</param>
            <returns>
            True if the command exists and is enabled, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.IsCommandIndeterminate(System.String)">
            <summary>
            Checks if the command with the provided id is currently in an
            indeterminate state.
            </summary>
            <param name="commandId">The id of the command to check.</param>
            <returns>
            True if the command exists and is neither enabled nor disabled,
            otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.IsCommandExecuted(System.String)">
            <summary>
            Checks if the command with the provided id has already been
            executed for the current value.
            </summary>
            <param name="commandId">The id of the command to check.</param>
            <returns>
            True if the command has been executed, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.IsCommandSupported(System.String)">
            <summary>
            Checks if a command with the provided id exists and is supported
            in the current context.
            </summary>
            <param name="commandId">The id of the command to check.</param>
            <returns>True if the command exists, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IDocument.GetCommandValue(System.String)">
            <summary>
            Gets the value of the document, range, or current selection, for
            the provided command.
            </summary>
            <param name="commandId">The id of the command to issue.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Context">
            <summary>
            Gets the browsing context to use.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.ImportAncestor">
            <summary>
            Gets the import ancestor, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Source">
            <summary>
            Gets the underlying source.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.StatusCode">
            <summary>
            Gets the status code of the server's response, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocument.Entities">
            <summary>
            Gets the associated entity provider.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IDocumentFactory">
            <summary>
            Represents the factory for creating documents from responses.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IDocumentFactory.CreateAsync(AngleSharp.IBrowsingContext,AngleSharp.Dom.CreateDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new attribute selector from the given arguments.
            </summary>
            <param name="context">The browsing context to use.</param>
            <param name="options">The options to consider.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task creating the document from the response.</returns>
        </member>
        <member name="T:AngleSharp.Dom.IDocumentFragment">
            <summary>
            The DocumentFragment interface represents a minimal document object
            that has no parent.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IDocumentStyle">
            <summary>
            Extends the document with further properties for styling.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocumentStyle.StyleSheets">
            <summary>
            Gets a list of stylesheet objects for stylesheets explicitly linked
            into or embedded in a document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocumentStyle.SelectedStyleSheetSet">
            <summary>
            Gets or sets the selected set of stylesheets.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocumentStyle.LastStyleSheetSet">
            <summary>
            Gets the last stylesheet set.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocumentStyle.PreferredStyleSheetSet">
            <summary>
            Gets the preferred stylesheet set.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocumentStyle.StyleSheetSets">
            <summary>
            Gets a live list of all of the currently-available style sheet
            sets.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IDocumentStyle.EnableStyleSheetsForSet(System.String)">
            <summary>
            Enables the stylesheets matching the specified name in the current
            style sheet set, and disables all other style sheets (except those
            without a title, which are always enabled).
            </summary>
            <param name="name">The name of the sheets to enable.</param>
        </member>
        <member name="T:AngleSharp.Dom.IDocumentType">
            <summary>
            The DocumentType interface represents a Node containing a doctype.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocumentType.Name">
            <summary>
            Gets or sets the name of the document type.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocumentType.PublicIdentifier">
            <summary>
            Gets or sets the public ID of the document type.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDocumentType.SystemIdentifier">
            <summary>
            Gets or sets the system ID of the document type.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IDomException">
            <summary>
            Defines how a DOMException should look like.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IDomException.Code">
            <summary>
            Gets the error code for this exception.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IElement">
            <summary>
            The Element interface represents an object within a DOM document. 
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.Prefix">
            <summary>
            Gets the namespace prefix of this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.LocalName">
            <summary>
            Gets the local part of the qualified name of this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.NamespaceUri">
            <summary>
            Gets the namespace URI of this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.Attributes">
            <summary>
            Gets the sequence of associated attributes.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.ClassList">
            <summary>
            Gets the list of class names.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.ClassName">
            <summary>
            Gets or sets the value of the class attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.Id">
            <summary>
            Gets or sets the id value of the element.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IElement.Insert(AngleSharp.Dom.AdjacentPosition,System.String)">
            <summary>
            Inserts new HTML elements specified by the given HTML string at
            a position relative to the current element specified by the
            position.
            </summary>
            <param name="position">The relation to the current element.</param>
            <param name="html">The HTML code to generate elements for.</param>
        </member>
        <member name="M:AngleSharp.Dom.IElement.HasAttribute(System.String)">
            <summary>
            Returns a boolean value indicating whether the specified element
            has the specified attribute or not.
            </summary>
            <param name="name">The attributes name.</param>
            <returns>The return value of true or false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.HasAttribute(System.String,System.String)">
            <summary>
            Returns a boolean value indicating whether the specified element
            has the specified attribute or not.
            </summary>
            <param name="namespaceUri">
            A string specifying the namespace of the attribute.
            </param>
            <param name="localName">The attributes name.</param>
            <returns>The return value of true or false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.GetAttribute(System.String)">
            <summary>
            Returns the value of the named attribute on the specified element.
            </summary>
            <param name="name">
            The name of the attribute whose value you want to get.
            </param>
            <returns>
            If the named attribute does not exist, the value returned will be
            null, otherwise the attribute's value.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.GetAttribute(System.String,System.String)">
            <summary>
            Returns the value of the named attribute on the specified element.
            </summary>
            <param name="namespaceUri">
            A string specifying the namespace of the attribute.
            </param>
            <param name="localName">
            The name of the attribute whose value you want to get.
            </param>
            <returns>
            If the named attribute does not exist, the value returned will be
            null, otherwise the attribute's value.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.SetAttribute(System.String,System.String)">
            <summary>
            Adds a new attribute or changes the value of an existing attribute
            on the specified element.
            </summary>
            <param name="name">The name of the attribute as a string.</param>
            <param name="value">The desired new value of the attribute.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.SetAttribute(System.String,System.String,System.String)">
            <summary>
            Adds a new attribute or changes the value of an existing attribute
            on the specified element.
            </summary>
            <param name="namespaceUri">
            A string specifying the namespace of the attribute.
            </param>
            <param name="name">The name of the attribute as a string.</param>
            <param name="value">The desired new value of the attribute.</param>
        </member>
        <member name="M:AngleSharp.Dom.IElement.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute from the specified element.
            </summary>
            <param name="name">
            Is a string that names the attribute to be removed.
            </param>
            <returns>True if an attribute was removed, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.RemoveAttribute(System.String,System.String)">
            <summary>
            Removes an attribute from the specified element.
            </summary>
            <param name="namespaceUri">
            A string specifying the namespace of the attribute.
            </param>
            <param name="localName">
            Is a string that names the attribute to be removed.
            </param>
            <returns>True if an attribute was removed, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.GetElementsByClassName(System.String)">
            <summary>
            Returns a set of elements which have all the given class names.
            </summary>
            <param name="classNames">
            A string representing the list of class names to match; class names
            are separated by whitespace.
            </param>
            <returns>A collection of elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.GetElementsByTagName(System.String)">
            <summary>
            Returns a NodeList of elements with the given tag name. The
            complete document is searched, including the root node.
            </summary>
            <param name="tagName">
            A string representing the name of the elements. The special string
            "*" represents all elements.
            </param>
            <returns>
            A collection of elements in the order they appear in the tree.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.GetElementsByTagNameNS(System.String,System.String)">
            <summary>
            Returns a list of elements with the given tag name belonging to the
            given namespace. The complete document is searched, including the
            root node.
            </summary>
            <param name="namespaceUri">
            The namespace URI of elements to look for.
            </param>
            <param name="tagName">
            Either the local name of elements to look for or the special value
            "*", which matches all elements.
            </param>
            <returns>
            A collection of elements in the order they appear in the tree.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.Matches(System.String)">
            <summary>
            Checks if the element is matched by the given selector.
            </summary>
            <param name="selectors">Represents the selector to test.</param>
            <returns>
            True if the element would be selected by the specified selector,
            otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IElement.Closest(System.String)">
            <summary>
            Returns the closest ancestor of the current element (or the current element itself) which matches the selectors given in the parameter.
            </summary>
            <param name="selectors">Represents the selector to test.</param>
            <returns>
            The closest ancestor of the current element (or the current element itself) which matches the selectors given. If there isn't such an ancestor, it returns null.
            </returns>
        </member>
        <member name="P:AngleSharp.Dom.IElement.InnerHtml">
            <summary>
            Gets or sets the inner HTML (excluding the current element) of the
            element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.OuterHtml">
            <summary>
            Gets or sets the outer HTML (including the current element) of the
            element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.TagName">
            <summary>
            Gets the name of the tag that represents the current element.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IElement.AttachShadow(AngleSharp.Dom.ShadowRootMode)">
            <summary>
            Creates a new shadow root for the current element, if there is none
            already.
            </summary>
            <param name="mode">The mode of the shadow root.</param>
            <returns>The new shadow root.</returns>
        </member>
        <member name="P:AngleSharp.Dom.IElement.AssignedSlot">
            <summary>
            Gets the assigned slot of the current element, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.Slot">
            <summary>
            Gets the value of the slot attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.ShadowRoot">
            <summary>
            Gets the shadow root of the current element, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.IsFocused">
            <summary>
            Gets if the element is currently focused.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IElement.SourceReference">
            <summary>
            Gets the source reference if available.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IElementFactory`2">
            <summary>
            Represents an element factory.
            </summary>
            <typeparam name="TDocument">The type of root document.</typeparam>
            <typeparam name="TElement">The common type of elements to create.</typeparam>
        </member>
        <member name="M:AngleSharp.Dom.IElementFactory`2.Create(`0,System.String,System.String)">
            <summary>
            Creates a new element with the given local name and optional prefix.
            </summary>
            <param name="document">The owner of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="prefix">The optional prefix of the element.</param>
            <returns>The created document's child element.</returns>
        </member>
        <member name="T:AngleSharp.Dom.IEntityProvider">
            <summary>
            Defines methods to create a custom entity service.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IEntityProvider.GetSymbol(System.String)">
            <summary>
            Gets a symbol specified by its entity name usually trailed with
            the semicolon, if available.
            </summary>
            <param name="name">The name of the entity in the markup.</param>
            <returns>The string with the symbol or null.</returns>
        </member>
        <member name="T:AngleSharp.Dom.IEventTarget">
            <summary>
            EventTarget is a DOM interface implemented by objects that can receive
            DOM events and have listeners for them.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IEventTarget.AddEventListener(System.String,AngleSharp.Dom.DomEventHandler,System.Boolean)">
            <summary>
            Register an event handler of a specific event type on the
            EventTarget.
            </summary>
            <param name="type">
            A string representing the event type to listen for.
            </param>
            <param name="callback">
            The listener parameter indicates the EventListener function to be
            added.
            </param>
            <param name="capture">
            True indicates that the user wishes to initiate capture. After
            initiating capture, all events of the specified type will be
            dispatched to the registered listener before being dispatched to
            any EventTarget beneath it in the DOM tree. Events which are
            bubbling upward through the tree will not trigger a listener
            designated to use capture.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IEventTarget.RemoveEventListener(System.String,AngleSharp.Dom.DomEventHandler,System.Boolean)">
            <summary>
            Removes an event listener from the EventTarget.
            </summary>
            <param name="type">
            A string representing the event type being removed.
            </param>
            <param name="callback">
            The listener parameter indicates the EventListener function to be
            removed.
            </param>
            <param name="capture">
            Specifies whether the EventListener being removed was registered as
            a capturing listener or not.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IEventTarget.InvokeEventListener(AngleSharp.Dom.Events.Event)">
            <summary>
            Calls the listener registered for the given event.
            </summary>
            <param name="ev">The event that asks for the listeners.</param>
        </member>
        <member name="M:AngleSharp.Dom.IEventTarget.Dispatch(AngleSharp.Dom.Events.Event)">
            <summary>
            Dispatch an event to this EventTarget.
            </summary>
            <param name="ev">The event to dispatch.</param>
            <returns>
            False if at least one of the event handlers, which handled this
            event called preventDefault(). Otherwise true.
            </returns>
        </member>
        <member name="T:AngleSharp.Dom.IHtmlAllCollection">
            <summary>
            An HTMLAllCollection is always rooted at document and matching all
            elements. It represents the tree of elements in a one-dimensional
            fashion.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IHtmlCollection`1">
            <summary>
            HTMLCollection is an interface representing a generic collection
            (array) of elements (in document order) and offers methods and
            properties for selecting from the list.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IHtmlCollection`1.Length">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IHtmlCollection`1.Item(System.Int32)">
            <summary>
            Gets the specific node at the given zero-based index into the list.
            </summary>
            <param name="index">The zero-based index.</param>
            <returns>Returns the element at the specified index.</returns>
        </member>
        <member name="P:AngleSharp.Dom.IHtmlCollection`1.Item(System.String)">
            <summary>
            Gets the specific node whose ID or, as a fallback, name matches the
            string specified by name. Matching by name is only done as a last
            resort, only in HTML, and only if the referenced element supports 
            the name attribute.
            </summary>
            <param name="id">The id or name to match.</param>
            <returns>Returns the element with the specified name.</returns>
        </member>
        <member name="T:AngleSharp.Dom.IImplementation">
            <summary>
            The DOMImplementation interface represent an object providing methods
            which are not dependent on any particular document. 
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IImplementation.CreateHtmlDocument(System.String)">
            <summary>
            Creates and returns an HTML Document.
            </summary>
            <param name="title">
            The title to give the new HTML document.
            </param>
            <returns>A new document.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IImplementation.CreateDocumentType(System.String,System.String,System.String)">
            <summary>
            Creates and returns a DocumentType.
            </summary>
            <param name="qualifiedName">
            The qualified name, like svg:svg.
            </param>
            <param name="publicId">
            The PUBLIC identifier.
            </param>
            <param name="systemId">
            The SYSTEM identifiers.
            </param>
            <returns>A document type with the specified attributes.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IImplementation.HasFeature(System.String,System.String)">
            <summary>
            Returns a Boolean indicating if a given feature is supported or
            not. This function is unreliable and kept for compatibility purpose
            alone: except for SVG-related queries, it always returns true.
            </summary>
            <param name="feature">The feature name.</param>
            <param name="version">
            The version of the specification defining the feature.
            </param>
            <returns></returns>
        </member>
        <member name="T:AngleSharp.Dom.ILinkImport">
            <summary>
            Implemented by elements that may expose imports.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ILinkImport.Import">
            <summary>
            Gets the Document object associated with the given element, or null
            if there is none.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ILinkStyle">
            <summary>
            Implemented by elements that may expose stylesheets.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ILinkStyle.Sheet">
            <summary>
            Gets the StyleSheet object associated with the given element, or
            null if there is none.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ILocation">
            <summary>
            The Location interface represents the location of the object it is
            linked to. Changes done on it are reflected on the object it relates
            to. 
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.ILocation.Assign(System.String)">
            <summary>
            Loads the resource at the URL provided in parameter.
            </summary>
            <param name="url">The path to the resource.</param>
        </member>
        <member name="M:AngleSharp.Dom.ILocation.Replace(System.String)">
            <summary>
            Replaces the current resource with the one at the provided URL. The
            difference from the assign() method is that after using replace()
            the current page will not be saved in session History, meaning the
            user won't be able to use the back button to navigate to it. 
            </summary>
            <param name="url">
            The path to the resource that should replace the current resource.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.ILocation.Reload">
            <summary>
            Reloads the resource from the current URL.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IMutationRecord">
            <summary>
            MutationRecord defines an interface that will be passed to the
            observer's callback.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.Type">
            <summary>
            Gets attributes if the mutation was an attribute mutation,
            characterData if it was a mutation to a CharacterData node, and
            childList if it was a mutation to the tree of nodes.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.Target">
            <summary>
            Gets the node the mutation affected, depending on the type. For
            attributes, it is the Element whose attribute changed. For
            CharacterData, it is the CharacterData node. For ChildList, it is
            the node whose children changed.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.Added">
            <summary>
            Gets the nodes added, or null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.Removed">
            <summary>
            Gets the nodes removed, or null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.PreviousSibling">
            <summary>
            Gets the previous sibling of the added or removed nodes, or null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.NextSibling">
            <summary>
            Gets the next sibling of the added or removed nodes, or null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.AttributeName">
            <summary>
            Gets the local name of the changed attribute, or null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.AttributeNamespace">
            <summary>
            Gets the namespace of the changed attribute, or null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IMutationRecord.PreviousValue">
            <summary>
            Gets a string depending on the type. For attributes, it is the
            value of the changed attribute before the change. For
            characterData, it is the data of the changed node before the
            change. For childList, it is null.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.INamedNodeMap">
            <summary>
            NamedNodeNap is a key/value pair of nodes that can be accessed by
            numeric or string index.
            https://dom.spec.whatwg.org/#interface-namednodemap
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INamedNodeMap.Item(System.Int32)">
            <summary>
            Gets the node at the specified numeric index.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The attribute at the specified numeric index.</returns>
        </member>
        <member name="P:AngleSharp.Dom.INamedNodeMap.Item(System.String)">
            <summary>
            Gets the node with the specified name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>The attribute at the specfied name.</returns>
        </member>
        <member name="P:AngleSharp.Dom.INamedNodeMap.Length">
            <summary>
            Gets the number of nodes in the NamedNodeMap.
            </summary>
            <returns>The number of nodes in the collection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INamedNodeMap.GetNamedItem(System.String)">
            <summary>
            Gets a named item in the NamedNodeMap.
            </summary>
            <param name="name">The name of the item to get.</param>
            <returns>The attribute with the given name.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INamedNodeMap.SetNamedItem(AngleSharp.Dom.IAttr)">
            <summary>
            Sets a named item in the NamedNodeMap.
            </summary>
            <param name="item">The named item to set.</param>
            <returns>The replaced attribute, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INamedNodeMap.RemoveNamedItem(System.String)">
            <summary>
            Removes a named item from the NamedNodeMap
            </summary>
            <param name="name">The named item to remove.</param>
            <returns>The removed attribute.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INamedNodeMap.GetNamedItem(System.String,System.String)">
            <summary>
            Gets a named item in the NamedNodeMap identified by namespace and
            local name.
            </summary>
            <param name="namespaceUri">The namespace of the item.</param>
            <param name="localName">The local name of the item.</param>
            <returns>The attribute with the namespaceUri and name.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INamedNodeMap.SetNamedItemWithNamespaceUri(AngleSharp.Dom.IAttr)">
            <summary>
            Sets a named item in the NamedNodeMap.
            </summary>
            <param name="item">The named item to set.</param>
            <returns>The replaced attribute, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INamedNodeMap.RemoveNamedItem(System.String,System.String)">
            <summary>
            Removes a named item from the NamedNodeMap.
            </summary>
            <param name="namespaceUri">The namespace of the item.</param>
            <param name="localName">The local name of the item.</param>
            <returns>The removed attribute.</returns>
        </member>
        <member name="T:AngleSharp.Dom.INode">
            <summary>
            A Node is an interface from which a number of DOM types inherit, and
            allows these various types to be treated similarly.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.BaseUri">
            <summary>
            Gets a string representing the base URL. 
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.BaseUrl">
            <summary>
            Gets the base url.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.NodeName">
            <summary>
            Gets a string containing the name of the Node. The structure of the
            name will differ with the name type. 
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.ChildNodes">
            <summary>
            Gets a live NodeList containing all the children of this node.
            Being live means that if the children of the node change, the
            NodeList object is automatically updated.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.INode.Clone(System.Boolean)">
            <summary>
            Clones the node, and optionally, all of its contents.
            By default, it clones the content of the node.
            </summary>
            <param name="deep">
            Optionally: Sets if all of the content should be cloned as well.
            </param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INode.Equals(AngleSharp.Dom.INode)">
            <summary>
            Determines if two nodes are equal.
            </summary>
            <param name="otherNode">
            The node to be compared to the node that is executing the method.
            </param>
            <returns>
            True if the node specified in the otherNode parameter is equal to
            the current node.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.INode.CompareDocumentPosition(AngleSharp.Dom.INode)">
            <summary>
            Compares the position of two nodes in a document.
            </summary>
            <param name="otherNode">
            The node to be compared to the reference node, which is the node
            executing the method.
            </param>
            <returns>The relation between the two nodes.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INode.Normalize">
            <summary>
            Cleans up all the text nodes under this element, i.e. merges
            adjacent and removes empty text nodes.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.Owner">
            <summary>
            Gets the Document that this node belongs to. If no document is
            associated with it, returns null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.ParentElement">
            <summary>
            Gets an Element that is the parent of this node. If the node has no
            parent, or if that parent is not an Element, this property returns
            null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.Parent">
            <summary>
            Gets a node that is the parent of this node. If there is no such
            node, like if this node is the top of the tree or if doesn't
            participate in a tree, this property returns null.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.INode.Contains(AngleSharp.Dom.INode)">
            <summary>
            Returns true if other is an inclusive descendant of the context
            object, and false otherwise (including when other is null).
            </summary>
            <param name="otherNode">The Node to check the childs for.</param>
            <returns>
            True if the given node is contained within this Node, otherwise
            false.
            </returns>
        </member>
        <member name="P:AngleSharp.Dom.INode.FirstChild">
            <summary>
            Gets a Node representing the first direct child node of the node,
            or null if the node has no child.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.LastChild">
            <summary>
            Gets a node representing the last direct child node of the node,
            or null if the node has no child.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.NextSibling">
            <summary>
            Gets a Node representing the next node in the tree, or null if
            there isn't such node.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.PreviousSibling">
            <summary>
            Gets a Node representing the previous node in the tree, or null if
            there isn't such node.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.INode.IsDefaultNamespace(System.String)">
            <summary>
            Indicates whether or not a namespace is the default namespace for a
            document.
            </summary>
            <param name="namespaceUri">
            The namespace to be compared to the default namespace.
            </param>
            <returns>
            True if the given namespace URI is the default for the current
            document.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.INode.LookupNamespaceUri(System.String)">
            <summary>
            Gets the Uniform Resource Identifier (URI) of the namespace
            associated with a namespace prefix, if any.
            </summary>
            <param name="prefix">The namespace prefix.</param>
            <returns>The URI of the namespace.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INode.LookupPrefix(System.String)">
            <summary>
            Gets the namespace prefix associated with a Uniform
            Resource Identifier (URI), if any.
            </summary>
            <param name="namespaceUri">The URI.</param>
            <returns>The namespace prefix associated with the URI.</returns>
        </member>
        <member name="P:AngleSharp.Dom.INode.NodeType">
            <summary>
            Gets an unsigned short representing the type of the node. 
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.NodeValue">
            <summary>
            Gets or sets a string representing the value of an object. For most
            node types, this returns null and any set operation is ignored.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.TextContent">
            <summary>
            Gets or sets the textual content of an element and all its
            descendants.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INode.HasChildNodes">
            <summary>
            Gets an indicator if the element has any child nodes, or not.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.INode.AppendChild(AngleSharp.Dom.INode)">
            <summary>
            Inserts a node as the last child node of this element.
            </summary>
            <param name="child">The node to be appended.</param>
            <returns>The appended Node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INode.InsertBefore(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Inserts the newElement immediately before the referenceElement.
            </summary>
            <param name="newElement">The node to be inserted.</param>
            <param name="referenceElement">
            The existing child element that will succeed the new element.
            </param>
            <returns>The inserted node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INode.RemoveChild(AngleSharp.Dom.INode)">
            <summary>
            Removes a child node from the current element, which must be a
            child of the current node.
            </summary>
            <param name="child">The child to be removed.</param>
            <returns>The removed node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INode.ReplaceChild(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Replaces one child node of the current one with the second one
            given in the parameters.
            </summary>
            <param name="newChild">The child to be inserted.</param>
            <param name="oldChild">The child to be removed.</param>
            <returns>The old node, if any.</returns>
        </member>
        <member name="T:AngleSharp.Dom.INodeIterator">
            <summary>
            The NodeIterator interface represents an iterator over the members of a
            list of the nodes in a subtree of the DOM. The nodes will be returned
            in document order.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INodeIterator.Root">
            <summary>
            Gets a Node representing the root node as specified when the
            NodeIterator was created.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INodeIterator.Reference">
            <summary>
            Gets the Node to which the iterator is anchored.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INodeIterator.IsBeforeReference">
            <summary>
            Gets an indicator whether the NodeFilter is anchored before the
            reference node.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INodeIterator.Settings">
            <summary>
            Gets a description of the types of nodes that must to be presented.
            Non-matching nodes are skipped, but their children may be included,
            if relevant.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INodeIterator.Filter">
            <summary>
            Gets the NodeFilter used to select the relevant nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.INodeIterator.Next">
            <summary>
            Returns the next Node in the document, or null if there are none.
            </summary>
            <returns>The next Node, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.INodeIterator.Previous">
            <summary>
            Returns the previous Node in the document, or null if there are
            none.
            </summary>
            <returns>The previous Node, if any.</returns>
        </member>
        <member name="T:AngleSharp.Dom.INodeList">
            <summary>
            NodeList objects are collections of nodes.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INodeList.Item(System.Int32)">
            <summary>
            Returns an item in the list by its index, or throws an exception.
            </summary>
            <param name="index">The 0-based index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:AngleSharp.Dom.INodeList.Length">
            <summary>
            Gets the number of nodes in the NodeList.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.INonDocumentTypeChildNode">
            <summary>
            Extensions to ChildNode nodes that are not document type nodes.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INonDocumentTypeChildNode.NextElementSibling">
            <summary>
            Gets the Element immediately following this ChildNode in its
            parent's children list, or null if there is no Element in the list
            following this ChildNode.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.INonDocumentTypeChildNode.PreviousElementSibling">
            <summary>
            Gets the Element immediately prior to this ChildNode in its
            parent's children list, or null if there is no Element in the list
            prior to this ChildNode.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.INonElementParentNode">
            <summary>
            Extensions to ParentNode nodes that are not Element nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.INonElementParentNode.GetElementById(System.String)">
            <summary>
            Returns the Element whose ID is given by elementId. If no such
            element exists, returns null. The behavior is not defined if
            more than one element have this ID. 
            </summary>
            <param name="elementId">
            A case-sensitive string representing the unique ID of the element
            being sought.
            </param>
            <returns>The matching element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.AnyElement.ParseSubtree(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Dom.Attr">
            <summary>
            Represents a generic node attribute.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Attr.#ctor(System.String)">
            <summary>
            Creates a new attribute with the given local name.
            </summary>
            <param name="localName">The local name of the attribute.</param>
        </member>
        <member name="M:AngleSharp.Dom.Attr.#ctor(System.String,System.String)">
            <summary>
            Creates a new attribute with the given local name and value.
            </summary>
            <param name="localName">The local name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:AngleSharp.Dom.Attr.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new attribute with the given properties.
            </summary>
            <param name="prefix">The prefix of the attribute.</param>
            <param name="localName">The local name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <param name="namespaceUri">The namespace of the attribute.</param>
        </member>
        <member name="P:AngleSharp.Dom.Attr.Prefix">
            <summary>
            Gets the attribute's prefix.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Attr.IsId">
            <summary>
            Gets if the attribute is an id attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Attr.Specified">
            <summary>
            Gets if the value is given or not.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Attr.Name">
            <summary>
            Gets the attribute's fully qualified name.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Attr.Value">
            <summary>
            Gets the attribute's value.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Attr.LocalName">
            <summary>
            Gets the attribute's local name.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Attr.NamespaceUri">
            <summary>
            Gets the attribute's namespace.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Attr.Equals(AngleSharp.Dom.IAttr)">
            <summary>
            Checks if the attribute equals another attribute.
            </summary>
            <param name="other">The other attribute.</param>
            <returns>True if both are equivalent, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Attr.GetHashCode">
            <summary>
            Computes the hash code of the attribute.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:AngleSharp.Dom.CharacterData">
            <summary>
            The base class for all characterdata implementations.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.CollectionExtensions">
            <summary>
            A bunch of methods for getting DOM elements on some internal collections.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.CollectionExtensions.GetNodes``1(AngleSharp.Dom.INode,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Gets the descendents from the provided parent that fulfill the
            specified predicate, if any.
            </summary>
            <typeparam name="T">The type of elements to obtain.</typeparam>
            <param name="parent">The parent of the descendents.</param>
            <param name="deep">
            True if all descendents, false if only direct descendents should be
            considered.
            </param>
            <param name="predicate">The filter function, if any.</param>
            <returns>The collection with the corresponding elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.CollectionExtensions.GetElementById(AngleSharp.Dom.INodeList,System.String)">
            <summary>
            Gets an element by its ID.
            </summary>
            <param name="children">The nodelist to investigate.</param>
            <param name="id">The id to find.</param>
            <returns>The element or null.</returns>
        </member>
        <member name="M:AngleSharp.Dom.CollectionExtensions.GetElementsByName(AngleSharp.Dom.INodeList,System.String,System.Collections.Generic.List{AngleSharp.Dom.IElement})">
            <summary>
            Gets a list of HTML elements given by their name attribute.
            </summary>
            <param name="children">The list to investigate.</param>
            <param name="name">The name attribute's value.</param>
            <param name="result">The result collection.</param>
        </member>
        <member name="M:AngleSharp.Dom.CollectionExtensions.Accepts(AngleSharp.Dom.FilterSettings,AngleSharp.Dom.INode)">
            <summary>
            Determines if the current filter settings includes the provided
            node.
            </summary>
            <param name="filter">The filter settings to use.</param>
            <param name="node">The node to check against.</param>
            <returns>True if the node is accepted, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.CollectionExtensions.GetElementById``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Gets the element with the provided id, if any. Otherwise the
            element with the same name is searched.
            </summary>
            <typeparam name="T">The type of node to obtain.</typeparam>
            <param name="elements">The list of elements to filter.</param>
            <param name="id">The id of the element to find.</param>
            <returns>The element with the given id, or null.</returns>
        </member>
        <member name="T:AngleSharp.Dom.Comment">
            <summary>
            Represents a node that contains a comment.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ContentEditableMode">
            <summary>
            An enumeration with all contenteditable modes.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.ContentEditableMode.False">
            <summary>
            Not contenteditable.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.ContentEditableMode.True">
            <summary>
            The element is contenteditable.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.ContentEditableMode.Inherited">
            <summary>
            Inherited from the parent element.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DefaultAttributeObserver">
            <summary>
            Represents the default attribute observer.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DefaultAttributeObserver.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DefaultAttributeObserver.RegisterStandardObservers">
            <summary>
            Registers the standard attribute observers, e.g., for class, style, ... attributes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DefaultAttributeObserver.RegisterObserver``1(System.String,System.Action{``0,System.String})">
            <summary>
            Registers a new attribute observer.
            </summary>
            <typeparam name="TElement">The associated element type.</typeparam>
            <param name="expectedName">The name of the attribute.</param>
            <param name="callback">The callback to invoke when the condition is met.</param>
        </member>
        <member name="T:AngleSharp.Dom.Document">
            <summary>
            Represents a document node.
            </summary>
        </member>
        <member name="E:AngleSharp.Dom.Document.ReadyStateChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Aborted">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Blurred">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Cancelled">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.CanPlay">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.CanPlayThrough">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Changed">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Clicked">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.CueChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.DoubleClick">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Drag">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.DragEnd">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.DragEnter">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.DragExit">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.DragLeave">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.DragOver">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.DragStart">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Dropped">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.DurationChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Emptied">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Ended">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Error">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Focused">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Input">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Invalid">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.KeyDown">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.KeyPress">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.KeyUp">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Loaded">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.LoadedData">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.LoadedMetadata">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Loading">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.MouseDown">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.MouseEnter">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.MouseLeave">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.MouseMove">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.MouseOut">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.MouseOver">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.MouseUp">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.MouseWheel">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Paused">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Played">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Playing">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Progress">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.RateChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Resetted">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Resized">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Scrolled">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Seeked">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Seeking">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Selected">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Shown">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Stalled">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Submitted">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Suspended">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.TimeUpdated">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Toggled">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.VolumeChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Dom.Document.Waiting">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.#ctor(AngleSharp.IBrowsingContext,AngleSharp.Text.TextSource)">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Source">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Entities">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.ImportAncestor">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Loop">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.DesignMode">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.All">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Anchors">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.ChildElementCount">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Children">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.FirstElementChild">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.LastElementChild">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.IsAsync">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.CurrentScript">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Implementation">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.LastModified">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Doctype">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.ContentType">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.ReadyState">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.StyleSheets">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.StyleSheetSets">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Referrer">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Location">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.DocumentUri">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.DocumentUrl">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.DefaultView">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Direction">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.CharacterSet">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.DocumentElement">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.ActiveElement">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.CompatMode">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Url">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Forms">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Images">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Scripts">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Plugins">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Commands">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Links">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Title">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Head">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Body">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Context">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.StatusCode">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Cookie">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Domain">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.Origin">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.SelectedStyleSheetSet">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.LastStyleSheetSet">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.PreferredStyleSheetSet">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.IsReady">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Document.IsLoading">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Clear">
            <summary>
            Clears the whole document without any notification.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Document.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.EnableStyleSheetsForSet(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Open(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Load(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.GetElementsByName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Import(AngleSharp.Dom.INode,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Adopt(AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateEvent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateNodeIterator(AngleSharp.Dom.INode,AngleSharp.Dom.FilterSettings,AngleSharp.Dom.NodeFilter)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateTreeWalker(AngleSharp.Dom.INode,AngleSharp.Dom.FilterSettings,AngleSharp.Dom.NodeFilter)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateRange">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Prepend(AngleSharp.Dom.INode[])">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Append(AngleSharp.Dom.INode[])">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateElement(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateElement(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateComment(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateDocumentFragment">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateProcessingInstruction(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateTextNode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.GetElementById(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.QuerySelector(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.QuerySelectorAll(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.GetElementsByClassName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.GetElementsByTagName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.GetElementsByTagName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.ToHtml(System.IO.TextWriter,AngleSharp.IMarkupFormatter)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.HasFocus">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.Setup(AngleSharp.Io.IResponse,AngleSharp.Io.MimeType,AngleSharp.Dom.IDocument)">
            <summary>
            Sets the document up with the given parameters.
            </summary>
            <param name="response">The received response.</param>
            <param name="contentType">The content-type.</param>
            <param name="importAncestor">The ancestor, if any.</param>
        </member>
        <member name="M:AngleSharp.Dom.Document.CreateElementFrom(System.String,System.String)">
            <summary>
            Creates a new element in the current namespace from the infos.
            </summary>
            <param name="name">The name of the new element.</param>
            <param name="prefix">The optional prefix to use.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Document.GetAttachedReferences``1">
            <summary>
            Gets the specified attached references.
            </summary>
            <typeparam name="T">The type of values to get.</typeparam>
            <returns>Gets the enumeration over all values.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Document.AttachReference(System.Object)">
            <summary>
            Attaches another reference to this document.
            </summary>
            <param name="value">The value to attach.</param>
        </member>
        <member name="M:AngleSharp.Dom.Document.DelayLoad(System.Threading.Tasks.Task)">
            <summary>
            Waits for the given task before raising the load event.
            </summary>
            <param name="task">The task to wait for.</param>
        </member>
        <member name="M:AngleSharp.Dom.Document.SetFocus(AngleSharp.Dom.IElement)">
            <summary>
            Sets the focus to the provided element.
            </summary>
            <param name="element">The element to focus on.</param>
        </member>
        <member name="M:AngleSharp.Dom.Document.FinishLoadingAsync">
            <summary>
            Finishes writing to a document.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Document.PromptToUnloadAsync">
            <summary>
            Potentially prompts the user to unload the document.
            </summary>
            <returns>True if unload okay, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Document.Unload(System.Boolean)">
            <summary>
            Unloads the document. For more details, see:
            http://www.w3.org/html/wg/drafts/html/CR/browsers.html#unload-a-document
            </summary>
            <param name="recycle">The recycle parameter.</param>
        </member>
        <member name="M:AngleSharp.Dom.Document.LocateNamespace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.LocatePrefix(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.CloneDocument(AngleSharp.Dom.Document,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.GetTitle">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Document.SetTitle(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Dom.DocumentFragment">
            <summary>
            Represents a document fragment.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.DocumentType">
            <summary>
            Represents the document type node.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DocumentType.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new document type node.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DocumentType.PreviousElementSibling">
            <summary>
            Gets the element immediately preceding in this node's parent's list
            of nodes,  null if the current element is the first element in that
            list.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DocumentType.NextElementSibling">
            <summary>
            Gets the element immediately following in this node's parent's list
            of nodes, or null if the current element is the last element in
            that list.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DocumentType.Entities">
            <summary>
            Gets a list of defined entities.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DocumentType.Notations">
            <summary>
            Gets a list of defined notations.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DocumentType.Name">
            <summary>
            Gets or sets the name of the document type.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DocumentType.PublicIdentifier">
            <summary>
            Gets or sets the public ID of the document type.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DocumentType.SystemIdentifier">
            <summary>
            Gets or sets the system ID of the document type.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.DocumentType.InternalSubset">
            <summary>
            Gets or sets the internal subset of the document type.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DocumentType.Before(AngleSharp.Dom.INode[])">
            <summary>
            Inserts nodes before the current node.
            </summary>
            <param name="nodes">The nodes to insert before.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DocumentType.After(AngleSharp.Dom.INode[])">
            <summary>
            Inserts nodes after the current node.
            </summary>
            <param name="nodes">The nodes to insert after.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DocumentType.Replace(AngleSharp.Dom.INode[])">
            <summary>
            Replaces the current node with the nodes.
            </summary>
            <param name="nodes">The nodes to replace.</param>
        </member>
        <member name="M:AngleSharp.Dom.DocumentType.Remove">
            <summary>
            Removes the current element from the parent.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.DocumentType.ToHtml(System.IO.TextWriter,AngleSharp.IMarkupFormatter)">
            <summary>
            Returns an HTML-code representation of the node.
            </summary>
            <param name="writer">The serialization output target.</param>
            <param name="formatter">The formatter to use.</param>
            <returns>A string containing the HTML code.</returns>
        </member>
        <member name="M:AngleSharp.Dom.DocumentType.Clone(AngleSharp.Dom.Document,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Dom.DomImplementation">
            <summary>
            Provides a number of methods for performing operations that are
            independent of any particular instance of the DOM.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Element">
            <summary>
            Represents an element node.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Element.#ctor(AngleSharp.Dom.Document,System.String,System.String,System.String,AngleSharp.Dom.NodeFlags)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.#ctor(AngleSharp.Dom.Document,System.String,System.String,System.String,System.String,AngleSharp.Dom.NodeFlags)">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.AssignedSlot">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.Slot">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.ShadowRoot">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.Prefix">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.LocalName">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.NamespaceUri">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.TextContent">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.ClassList">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.ClassName">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.Id">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.TagName">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.SourceReference">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.PreviousElementSibling">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.NextElementSibling">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.ChildElementCount">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.Children">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.FirstElementChild">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.LastElementChild">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.InnerHtml">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.OuterHtml">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Element.IsFocused">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.ParseSubtree(System.String)">
            <summary>
            Takes a given string source and parses it into a subtree
            using the current element as context.
            Follows the fragment parsing strategy for the given namespace.
            </summary>
            <param name="source">The source to parse into a subtree.</param>
            <returns>The documentElement of the new subtree.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Element.AttachShadow(AngleSharp.Dom.ShadowRootMode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.QuerySelector(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.QuerySelectorAll(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.GetElementsByClassName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.GetElementsByTagName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.GetElementsByTagNameNS(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Matches(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Closest(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.HasAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.HasAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.GetAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.GetAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.SetAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.SetAttribute(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.AddAttribute(AngleSharp.Dom.Attr)">
            <summary>
            Adds an attribute.
            </summary>
            <param name="attr">The attribute to add.</param>
        </member>
        <member name="M:AngleSharp.Dom.Element.RemoveAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.RemoveAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Prepend(AngleSharp.Dom.INode[])">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Append(AngleSharp.Dom.INode[])">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Equals(AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Before(AngleSharp.Dom.INode[])">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.After(AngleSharp.Dom.INode[])">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Replace(AngleSharp.Dom.INode[])">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Remove">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Insert(AngleSharp.Dom.AdjacentPosition,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.ToHtml(System.IO.TextWriter,AngleSharp.IMarkupFormatter)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.Clone(AngleSharp.Dom.Document,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.UpdateAttribute(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.LocateNamespace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.LocatePrefix(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Element.CloneElement(AngleSharp.Dom.Element,AngleSharp.Dom.Document,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Dom.Entity">
            <summary>
            Represents an entity node.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Entity.#ctor(AngleSharp.Dom.Document)">
            <summary>
            Creates a new entity node.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Entity.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new entity node.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Entity.PublicId">
            <summary>
            Gets the public identiifer.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Entity.SystemId">
            <summary>
            Gets the system identifier.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Entity.NotationName">
            <summary>
            Gets or sets the notation name.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Entity.InputEncoding">
            <summary>
            Gets the used input encoding.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Entity.XmlEncoding">
            <summary>
            Gets the used XML encoding.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Entity.XmlVersion">
            <summary>
            Gets the used XML version.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Entity.TextContent">
            <summary>
            Gets or sets the entity's value.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Entity.NodeValue">
            <summary>
            Gets or sets the value of the entity.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Entity.Clone(AngleSharp.Dom.Document,System.Boolean)">
            <summary>
            Returns a duplicate of the node on which this method was called.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.EntityReference">
            <summary>
            Represents a reference to an entity.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.EntityReference.#ctor(AngleSharp.Dom.Document)">
            <summary>
            Creates a new entity node.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.EntityReference.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new entity node.
            </summary>
            <param name="owner">The initial owner.</param>
            <param name="name">Name of the entity reference.</param>
        </member>
        <member name="T:AngleSharp.Dom.HtmlAllCollection">
            <summary>
            A general collection for all elements of type IElement.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.HtmlCollection`1">
            <summary>
            A specialized collection containing elements of type T.
            </summary>
            <typeparam name="T">The type of elements that is contained.</typeparam>
        </member>
        <member name="T:AngleSharp.Dom.HtmlFormControlsCollection">
            <summary>
            A specialized collection containing elements of type HTMLFormControlElement.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Location">
            <summary>
            A location object with information about a Url.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.MutationHost">
            <summary>
            Couples the mutation events to mutation observers and the event loop.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.MutationRecord">
            <summary>
            Represents a recording of DOM changes.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.NamedNodeMap">
            <summary>
            NamedNodeNap is a key/value pair of nodes that can be accessed by
            numeric or string index.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.#ctor(AngleSharp.Dom.Element)">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.NamedNodeMap.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.NamedNodeMap.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.NamedNodeMap.Length">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.GetNamedItem(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.GetNamedItem(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.SetNamedItem(AngleSharp.Dom.IAttr)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.SetNamedItemWithNamespaceUri(AngleSharp.Dom.IAttr,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.SetNamedItemWithNamespaceUri(AngleSharp.Dom.IAttr)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.RemoveNamedItem(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.RemoveNamedItem(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.NamedNodeMap.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Dom.Node">
            <summary>
            Represents a node in the generated tree.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Node.#ctor(AngleSharp.Dom.Document,System.String,AngleSharp.Dom.NodeType,AngleSharp.Dom.NodeFlags)">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Node.HasChildNodes">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Node.BaseUri">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Node.BaseUrl">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Node.NodeType">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Node.NodeValue">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Node.TextContent">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Node.ParentElement">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Dom.Node.NodeName">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.Clone(AngleSharp.Dom.Document,System.Boolean)">
            <summary>
            Clones the current node using the new owner.
            </summary>
            <param name="newOwner">The new document owner, if any.</param>
            <param name="deep">True if a deep clone is wanted, otherwise false.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.Node.AppendText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.InsertText(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.InsertNode(System.Int32,AngleSharp.Dom.Node)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.AddNode(AngleSharp.Dom.Node)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.RemoveNode(System.Int32,AngleSharp.Dom.Node)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.ToHtml(System.IO.TextWriter,AngleSharp.IMarkupFormatter)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.AppendChild(AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.InsertChild(System.Int32,AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.InsertBefore(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.ReplaceChild(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.RemoveChild(AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.Clone(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.CompareDocumentPosition(AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.Contains(AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.Normalize">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.LookupNamespaceUri(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.LookupPrefix(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.IsDefaultNamespace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.Equals(AngleSharp.Dom.INode)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.GetPrefixAndLocalName(System.String,System.String@,System.String@,System.String@)">
            <summary>
            For more information, see:
            https://dom.spec.whatwg.org/#validate-and-extract
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Node.IsNamespaceError(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.LocateNamespace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.LocatePrefix(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.NodeIsAdopted(AngleSharp.Dom.Document)">
            <summary>
            Run any adopting steps defined for node in other applicable
            specifications and pass node and oldDocument as parameters.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Node.NodeIsInserted(AngleSharp.Dom.Node)">
            <summary>
            Specifications may define insertion steps for all or some nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Node.NodeIsRemoved(AngleSharp.Dom.Node,AngleSharp.Dom.Node)">
            <summary>
            Specifications may define removing steps for all or some nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Node.OnParentChanged">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Dom.Node.CloneNode(AngleSharp.Dom.Node,AngleSharp.Dom.Document,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Dom.NodeFlags">
            <summary>
            Defines some properties of a node.
            Exclusive maximum is 0x100000000.
            Inclusive maximum is 0x0FFFFFFFF.
            General range: 0x1 to 0x80
            HTML range   : 0x100 to 0x8000
            MathML range : 0x10000 to 0x800000
            SVG range    : 0x1000000 to 0x80000000
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.None">
            <summary>
            No special properties.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.SelfClosing">
            <summary>
            The element is self-closing.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.Special">
            <summary>
            The element is special.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.LiteralText">
            <summary>
            The element has literal text.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.LineTolerance">
            <summary>
            The element may start with an additional free line.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.ImplicitelyClosed">
            <summary>
            The element is implicitely closed.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.ImpliedEnd">
            <summary>
            The end of the element is implied.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.Scoped">
            <summary>
            The element is opening a scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.HtmlMember">
            <summary>
            The element is part of the HTML namespace.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.HtmlTip">
            <summary>
            The element is an HTML text integration point.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.HtmlFormatting">
            <summary>
            The element is an HTML formatting element.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.HtmlListScoped">
            <summary>
            The element is opening a list scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.HtmlSelectScoped">
            <summary>
            The element is opening a select scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.HtmlTableSectionScoped">
            <summary>
            The element is opening a table section scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.HtmlTableScoped">
            <summary>
            The element is opening a table scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.MathMember">
            <summary>
            The element is part of the MathML namespace.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.MathTip">
            <summary>
            The element is an MathML text integration point.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.SvgMember">
            <summary>
            The element is part of the SVG namespace.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeFlags.SvgTip">
            <summary>
            The element is an SVG text integration point.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.NodeIterator">
            <summary>
            The iterator through a collection of DOM nodes.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.NodeList">
            <summary>
            Represents a list of Node instances or nodes.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeList.Empty">
            <summary>
            Gets an empty node-list. Shouldn't be modified.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Notation">
            <summary>
            Represents a notation node.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Notation.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new notation node.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Notation.PublicId">
            <summary>
            Gets or sets the value of the public identifier.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Notation.SystemId">
            <summary>
            Gets or sets the value of the system identifier.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.Notation.Clone(AngleSharp.Dom.Document,System.Boolean)">
            <summary>
            Returns a duplicate of the node on which this method was called.
            </summary>
            <returns>The duplicate node.</returns>
        </member>
        <member name="T:AngleSharp.Dom.OptionsCollection">
            <summary>
            A collection specialized on IHtmlOptionElement elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ProcessingInstruction">
            <summary>
            Represents a processing instruction node.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.ProcessingInstruction.Create(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a processing instruction by splitting data into the name/target and data.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.QuirksMode">
            <summary>
            A list of possible quirks mode states.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.QuirksMode.Off">
            <summary>
            The quirks mode is deactivated.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.QuirksMode.Limited">
            <summary>
            The quirks mode is partly activated.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.QuirksMode.On">
            <summary>
            The quirks mode is activated.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Range">
            <summary>
            A DOM range to gather DOM tree information.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.SettableTokenList">
            <summary>
            A list of tokens that can be modified.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ShadowRoot">
            <summary>
            Represents a shadow root.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.SimpleChoice">
            <summary>
            Contains simple choices.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.SimpleChoice.Yes">
            <summary>
            Yes.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.SimpleChoice.No">
            <summary>
            No.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.StringList">
            <summary>
            Represents a string list.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.StringMap">
            <summary>
            Represents a list of DOMTokens.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.StyleSheetList">
            <summary>
            A collection of CSS elements.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.StyleSheetList.#ctor(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IStyleSheet})">
            <summary>
            Creates a new stylesheet class.
            </summary>
            <param name="sheets">The list to enumerate.</param>
        </member>
        <member name="P:AngleSharp.Dom.StyleSheetList.Item(System.Int32)">
            <summary>
            Gets the stylesheet at the specified index.
            If index is greater than or equal to the number
            of style sheets in the list, this returns null.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The stylesheet.</returns>
        </member>
        <member name="P:AngleSharp.Dom.StyleSheetList.Length">
            <summary>
            Gets the number of elements in the list of stylesheets.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.StyleSheetList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the stylesheets.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:AngleSharp.Dom.StyleSheetList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:AngleSharp.Dom.TextNode">
            <summary>
            Represents a text node.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.TokenList">
            <summary>
            A simple list of tokens that is immutable.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.TreeWalker">
            <summary>
            The treewalker for walking through the DOM tree.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Window">
            <summary>
            Represents a sample browsing Window implementation for automated tests,
            analysis and as a useful playground.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.Proxy">
            <summary>
            Gets the proxy to the current browsing context.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.Navigator">
            <summary>
            Gets the user-agent information.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.Document">
            <summary>
            Gets a reference to the document that the window contains.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.Name">
            <summary>
            Gets or sets the name of the window.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.OuterHeight">
            <summary>
            Gets or sets the height of the outside of the browser window.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.OuterWidth">
            <summary>
            Gets or sets the width of the outside of the browser window.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.ScreenX">
            <summary>
            Gets or sets the horizontal distance of the left border of the 
            user's browser from the left side of the screen.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.ScreenY">
            <summary>
            Gets or sets the vertical distance of the top border of the user's
            browser from the top side of the screen.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.Location">
            <summary>
            Gets the location of the currently contained document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.Status">
            <summary>
            Gets or sets the status string.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.Window.IsClosed">
            <summary>
            Gets if the window is currently open or already closed.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IParentNode">
            <summary>
            Defines the ParentNode interface that is implemented by possible
            parents.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IParentNode.Children">
            <summary>
            Gets the child elements.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IParentNode.FirstElementChild">
            <summary>
            Gets the first child element of this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IParentNode.LastElementChild">
            <summary>
            Gets the last child element of this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IParentNode.ChildElementCount">
            <summary>
            Gets the number of child elements.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IParentNode.Append(AngleSharp.Dom.INode[])">
            <summary>
            Appends nodes to current document.
            </summary>
            <param name="nodes">The nodes to append.</param>
        </member>
        <member name="M:AngleSharp.Dom.IParentNode.Prepend(AngleSharp.Dom.INode[])">
            <summary>
            Prepends nodes to the current document.
            </summary>
            <param name="nodes">The nodes to prepend.</param>
        </member>
        <member name="M:AngleSharp.Dom.IParentNode.QuerySelector(System.String)">
            <summary>
            Returns the first element within the document (using depth-first
            pre-order traversal of the document's nodes) that matches the
            specified group of selectors.
            </summary>
            <param name="selectors">The group of selectors to use.</param>
            <returns>The found element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IParentNode.QuerySelectorAll(System.String)">
            <summary>
            Returns a list of the elements within the document (using
            depth-first pre-order traversal of the document's nodes) that match
            the specified group of selectors.
            </summary>
            <param name="selectors">The group of selectors to use.</param>
            <returns>A non-live NodeList of element objects.</returns>
        </member>
        <member name="T:AngleSharp.Dom.IProcessingInstruction">
            <summary>
            A processing instruction provides an opportunity for
            application-specific instructions to be embedded within XML and which
            can be ignored by XML processors which do not support processing their
            instructions (outside of their having a place in the DOM).
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IProcessingInstruction.Target">
            <summary>
            Gets the target of the processing instruction.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IPseudoElement">
            <summary>
            The PseudoElement interface is used for representing CSS
            pseudo-elements.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IPseudoElement.PseudoName">
            <summary>
            Gets the assigned pseudo name (e.g., before).
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IRange">
            <summary>
            The Range interface represents a fragment of a document that can
            contain nodes and parts of text nodes in a given document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IRange.Head">
            <summary>
            Gets the node that starts the container.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IRange.Start">
            <summary>
            Gets the offset of the StartContainer in the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IRange.Tail">
            <summary>
            Gets the node that ends the container.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IRange.End">
            <summary>
            Gets the offset of the EndContainer in the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IRange.IsCollapsed">
            <summary>
            Gets a value that indicates if the representation is collapsed.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IRange.CommonAncestor">
            <summary>
            Gets the common ancestor node of the contained range.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IRange.StartWith(AngleSharp.Dom.INode,System.Int32)">
            <summary>
            Selects the start of the given range by using the given reference
            node and a relative offset.
            </summary>
            <param name="refNode">The reference node to use.</param>
            <param name="offset">
            The offset relative to the reference node.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.EndWith(AngleSharp.Dom.INode,System.Int32)">
            <summary>
            Selects the end of the given range by using the given reference
            node and a relative offset.
            </summary>
            <param name="refNode">The reference node to use.</param>
            <param name="offset">
            The offset relative to the reference node.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.StartBefore(AngleSharp.Dom.INode)">
            <summary>
            Selects the start of the given range by using an inclusive
            reference node.
            </summary>
            <param name="refNode">The reference node to use.</param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.EndBefore(AngleSharp.Dom.INode)">
            <summary>
            Selects the end of the given range by using an inclusive reference
            node.
            </summary>
            <param name="refNode">The reference node to use.</param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.StartAfter(AngleSharp.Dom.INode)">
            <summary>
            Selects the start of the given range by using an exclusive
            reference node.
            </summary>
            <param name="refNode">The reference node to use.</param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.EndAfter(AngleSharp.Dom.INode)">
            <summary>
            Selects the end of the given range by using an exclusive reference
            node.
            </summary>
            <param name="refNode">The referenced node.</param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.Collapse(System.Boolean)">
            <summary>
            Collapses the range to a single level.
            </summary>
            <param name="toStart">
            Determines if only the first level should be selected.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.Select(AngleSharp.Dom.INode)">
            <summary>
            Selects the contained node.
            </summary>
            <param name="refNode">The node to use.</param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.SelectContent(AngleSharp.Dom.INode)">
            <summary>
            Selects the contained nodes by taking a reference node as origin.
            </summary>
            <param name="refNode">The reference node.</param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.ClearContent">
            <summary>
            Clears the contained nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IRange.ExtractContent">
            <summary>
            Clears the node representation and returns a document fragment with
            the originally contained nodes.
            </summary>
            <returns>The document fragment containing the nodes.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IRange.CopyContent">
            <summary>
            Creates a document fragement of the contained nodes.
            </summary>
            <returns>The created document fragment.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IRange.Insert(AngleSharp.Dom.INode)">
            <summary>
            Inserts a node into the range.
            </summary>
            <param name="node">The node to include.</param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.Surround(AngleSharp.Dom.INode)">
            <summary>
            Includes the given node with its siblings in the range.
            </summary>
            <param name="newParent">The range to surround.</param>
        </member>
        <member name="M:AngleSharp.Dom.IRange.Clone">
            <summary>
            Creates a copy of this range.
            </summary>
            <returns>The copy representing the same range.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IRange.Detach">
            <summary>
            Detaches the range from the DOM tree.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IRange.Contains(AngleSharp.Dom.INode,System.Int32)">
            <summary>
            Checks if the given node is within this range by using a offset.
            </summary>
            <param name="node">The node to check for.</param>
            <param name="offset">The offset to use.</param>
            <returns>
            True if the point is within the range, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IRange.CompareBoundaryTo(AngleSharp.Dom.RangeType,AngleSharp.Dom.IRange)">
            <summary>
            Compares the boundary points of the range.
            </summary>
            <param name="how">
            Determines how these points should be compared.
            </param>
            <param name="sourceRange">
            The range of the other boundary points.
            </param>
            <returns>A relative position.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IRange.CompareTo(AngleSharp.Dom.INode,System.Int32)">
            <summary>
            Compares the node to the given offset and returns the relative
            position.
            </summary>
            <param name="node">The node to use.</param>
            <param name="offset">The offset to use.</param>
            <returns>The relative position in the range.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IRange.Intersects(AngleSharp.Dom.INode)">
            <summary>
            Checks if the given node is contained in this range.
            </summary>
            <param name="node">The node to check for.</param>
            <returns>
            True if the node is within the range, otherwise false.
            </returns>
        </member>
        <member name="T:AngleSharp.Dom.ISettableTokenList">
            <summary>
            The same as TokenList, except that it allows the underlying string to
            be directly changed.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ISettableTokenList.Value">
            <summary>
            Gets or sets the underlying string.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IShadowRoot">
            <summary>
            The ShadowRoot interface represents the shadow root.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IShadowRoot.ActiveElement">
            <summary>
            Gets the currently focused element in the shadow tree, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IShadowRoot.Host">
            <summary>
            Gets the host element, which contains this shadow root.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IShadowRoot.InnerHtml">
            <summary>
            Gets the markup of the current shadow root's contents.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IShadowRoot.StyleSheets">
            <summary>
            Gets the shadow root style sheets.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ISourceReference">
            <summary>
            Represents a reference from an element to its original source code.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ISourceReference.Position">
            <summary>
            Gets the position in the original source code.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IStringList">
            <summary>
            Represents a string list.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStringList.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">The index of the value.</param>
            <returns>The string value at the given index.</returns>
        </member>
        <member name="P:AngleSharp.Dom.IStringList.Length">
            <summary>
            Gets the number of entries.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IStringList.Contains(System.String)">
            <summary>
            Returns a boolean indicating if the specified entry is available.
            </summary>
            <param name="entry">The entry that will be looked for.</param>
            <returns>
            True if the element is available, otherwise false.
            </returns>
        </member>
        <member name="T:AngleSharp.Dom.IStringMap">
            <summary>
            The DOMStringMap interface represents a set of name-value pairs.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStringMap.Item(System.String)">
            <summary>
            Gets or sets an item in the dictionary.
            </summary>
            <param name="name">The name of the item to get or set.</param>
            <returns>The item with the associated name.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IStringMap.Remove(System.String)">
            <summary>
            Deletes the string with the given name from the map.
            </summary>
            <param name="name">The name of the string to remove.</param>
        </member>
        <member name="T:AngleSharp.Dom.IStyleSheet">
            <summary>
            Represent a stylesheet for collecting style information.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheet.Type">
            <summary>
            Gets the style sheet language for this style sheet.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheet.Href">
            <summary>
            Gets the value of the attribute, which is its location. For inline
            style sheets, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheet.OwnerNode">
            <summary>
            Gets the element that associates this style sheet with the
            document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheet.Title">
            <summary>
            Gets the advisory title. The title is often specified in the
            ownerNode.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheet.Media">
            <summary>
            Gets the indented destination media for style information. The
            media is often specified in the ownerNode. If no media has been
            specified, the MediaList is empty.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheet.IsDisabled">
            <summary>
            Gets or sets if the stylesheet is applied to the document.
            Modifying this attribute may cause a new resolution of style for
            the document. If the media doesn't apply to the current user agent,
            the disabled attribute is ignored.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheet.Context">
            <summary>
            Gets the browsing context to use.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheet.Source">
            <summary>
            Gets the underlying source.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IStyleSheet.SetOwner(AngleSharp.Dom.IElement)">
            <summary>
            Sets the owner of the sheet.
            </summary>
            <param name="element">The owning element.</param>
        </member>
        <member name="M:AngleSharp.Dom.IStyleSheet.LocateNamespace(System.String)">
            <summary>
            Tries to find the matching namespace url for the given prefix.
            </summary>
            <param name="prefix">The prefix of the namespace to find.</param>
            <returns>The namespace assigned to the prefix, if any.</returns>
        </member>
        <member name="T:AngleSharp.Dom.IStyleSheetList">
            <summary>
            Represents a list of stylesheet elements.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheetList.Item(System.Int32)">
            <summary>
            Gets the stylesheet at the specified index. If index is greater
            than or equal to the number of style sheets in the list, this
            returns null.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The stylesheet.</returns>
        </member>
        <member name="P:AngleSharp.Dom.IStyleSheetList.Length">
            <summary>
            Gets the number of elements in the list of stylesheets.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IText">
            <summary>
            The Text interface represents the textual content of Element or Attr.
            If an element has no markup within its content, it has a single child
            implementing Text that contains the element's text.  However, if the
            element contains markup, it is parsed into information items and Text
            nodes that form its children.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IText.Split(System.Int32)">
            <summary>
            Breaks the node into two nodes at a specified offset.
            </summary>
            <param name="offset">
            The point where the Node should be split.
            </param>
            <returns>
            The freshly created Text element with the rest of the content.
            </returns>
        </member>
        <member name="P:AngleSharp.Dom.IText.Text">
            <summary>
            Gets a string containing the text of all Text nodes logically
            adjacent to this Node, concatenated in document order.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IText.AssignedSlot">
            <summary>
            Gets the assigned slot of the current text, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ITokenList">
            <summary>
            This type represents a set of space-separated tokens. 
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ITokenList.Length">
            <summary>
            Gets the number of contained tokens.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ITokenList.Item(System.Int32)">
            <summary>
            Gets an item in the list by its index.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ITokenList.Contains(System.String)">
            <summary>
            Returns true if the underlying string contains a token, otherwise
            false.
            </summary>
            <param name="token">The token to search for.</param>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ITokenList.Add(System.String[])">
            <summary>
            Adds some tokens to the underlying string.
            </summary>
            <param name="tokens">A list of tokens to add.</param>
        </member>
        <member name="M:AngleSharp.Dom.ITokenList.Remove(System.String[])">
            <summary>
            Remove some tokens from the underlying string.
            </summary>
            <param name="tokens">A list of tokens to remove.</param>
        </member>
        <member name="M:AngleSharp.Dom.ITokenList.Toggle(System.String,System.Boolean)">
            <summary>
            Removes the specified token from string and returns false.
            If token doesn't exist it's added and the function returns true.
            </summary>
            <param name="token">The token to toggle.</param>
            <param name="force"></param>
            <returns>
            True if the token has been added, otherwise false.
            </returns>
        </member>
        <member name="T:AngleSharp.Dom.ITreeWalker">
            <summary>
            The TreeWalker object represents the nodes of a document subtree and a
            position within them.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ITreeWalker.Root">
            <summary>
            Gets a Node representing the root node as specified when the
            TreeWalker was created.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ITreeWalker.Current">
            <summary>
            Gets or sets the Node on which the TreeWalker is currently pointing
            at.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ITreeWalker.Settings">
            <summary>
            Gets a description of the types of nodes that must to be presented.
            Non-matching nodes are skipped, but their children may be included,
            if relevant.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.ITreeWalker.Filter">
            <summary>
            Gets the NodeFilter used to select the relevant nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.ITreeWalker.ToNext">
            <summary>
            Moves the current Node to the next visible node in the document
            order, and returns the found node. It also moves the current node
            to this one. If no such node exists, returns null and the current
            node is not changed.
            </summary>
            <returns>The next Node, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ITreeWalker.ToPrevious">
            <summary>
            Moves the current Node to the previous visible node in the document
            order, and returns the found node. It also moves the current node
            to this one. If no such node exists,or if it is before that the
            root node defined at the object construction, returns null and the
            current node is not changed.
            </summary>
            <returns>The previous Node, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ITreeWalker.ToParent">
            <summary>
            Moves the current Node to the first visible ancestor node in the
            document order, and returns the found node. It also moves the
            current node to this one. If no such node exists, or if it is
            before that the root node defined at the object construction,
            returns null and the current node is not changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngleSharp.Dom.ITreeWalker.ToFirst">
            <summary>
            Moves the current Node to the first visible child of the current
            node, and returns the found child. It also moves the current node
            to this child. If no such child exists, returns null and the
            current node is not changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngleSharp.Dom.ITreeWalker.ToLast">
            <summary>
            Moves the current Node to the last visible child of the current
            node, and returns the found child. It also moves the current node
            to this child. If no such child exists, returns null and the
            current node is not changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngleSharp.Dom.ITreeWalker.ToPreviousSibling">
            <summary>
            Moves the current Node to its previous sibling, if any, and returns
            the found sibling. I there is no such node, return null and the
            current node is not changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngleSharp.Dom.ITreeWalker.ToNextSibling">
            <summary>
            Moves the current Node to its next sibling, if any, and returns the
            found sibling. I there is no such node, return null and the current
            node is not changed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AngleSharp.Dom.IUrlUtilities">
            <summary>
            The URLUtils interface defines utility methods to work with URLs.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.Href">
            <summary>
            Gets or sets the whole URL.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.Protocol">
            <summary>
            Gets or sets the protocol scheme of the URL, including the final
            ':'.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.Host">
            <summary>
            Gets or sets the host, that is the hostname, a ':', and the port of
            the URL.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.HostName">
            <summary>
            Gets or sets the domain of the URL.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.Port">
            <summary>
            Gets or sets the port number of the URL.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.PathName">
            <summary>
            Gets or sets an initial '/' followed by the path of the URL.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.Search">
            <summary>
            Gets or sets a '?' followed by the parameters of the URL.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.Hash">
            <summary>
            Gets or sets a '#' followed by the fragment identifier of the URL.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.UserName">
            <summary>
            Gets or sets the username specified before the domain name..
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.Password">
            <summary>
            Gets or sets the password specified before the domain name.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IUrlUtilities.Origin">
            <summary>
            Gets the canonical form of the origin of the specific location.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IWindow">
            <summary>
            The interface for a browsing window element.
            https://developer.mozilla.org/en-US/docs/Web/API/Window
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.Document">
            <summary>
            Gets a reference to the document that the window contains.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.Location">
            <summary>
            Gets the location of the current document.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.IsClosed">
            <summary>
            Gets if the window has been closed.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.Status">
            <summary>
            Gets or sets the status of the window.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.Name">
            <summary>
            Gets or sets the name of the window.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.OuterHeight">
            <summary>
            Gets the height of the outside of the browser window.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.OuterWidth">
            <summary>
            Gets the width of the outside of the browser window.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.ScreenX">
            <summary>
            Gets the horizontal distance of the left border of the user's
            browser from the left side of the screen.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.ScreenY">
            <summary>
            Gets the vertical distance of the top border of the user's browser
            from the top side of the screen.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.Proxy">
            <summary>
            Gets the proxy to the current browsing context.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.Navigator">
            <summary>
            Gets the user-agent information.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IWindow.Close">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IWindow.Open(System.String,System.String,System.String,System.String)">
            <summary>
            Opens a window to show url, and returns it. If a window exists with
            the provided name already, it is reused.
            </summary>
            <param name="url">The URL to open initially.</param>
            <param name="name">The name of the new window.</param>
            <param name="features">
            Determines the rendering of the new window.
            </param>
            <param name="replace">
            Can be used to remove whatever page is currently open from the
            session history.
            </param>
            <returns>The new or reused window.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IWindow.Stop">
            <summary>
            Stops the current document from being loaded.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IWindow.Focus">
            <summary>
            Focuses the current window.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IWindow.Blur">
            <summary>
            Removes the focus from the current window.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IWindow.Alert(System.String)">
            <summary>
            Shows the messagebox with the given message.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:AngleSharp.Dom.IWindow.Confirm(System.String)">
            <summary>
            Opens a confirmation box with the provided message.
            </summary>
            <param name="message">The message to display.</param>
            <returns>
            True if the message has been confirmed, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IWindow.Print">
            <summary>
            Opens the print dialog for the current window.
            </summary>
        </member>
        <member name="P:AngleSharp.Dom.IWindow.History">
            <summary>
            Gets the history of the current window.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.IWindowTimers">
            <summary>
            Providers timers to the Window object.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.IWindowTimers.SetTimeout(System.Action{AngleSharp.Dom.IWindow},System.Int32)">
            <summary>
            Executes the provided handler after the timeout.
            </summary>
            <param name="handler">
            The handler that is called after the timeout.
            </param>
            <param name="timeout">The timeout in milliseconds.</param>
            <returns>
            The handler to reference clear the timeout.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.IWindowTimers.ClearTimeout(System.Int32)">
            <summary>
            Clears a timeout.
            </summary>
            <param name="handle">
            The handle that specifies, which timeout to clear.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.IWindowTimers.SetInterval(System.Action{AngleSharp.Dom.IWindow},System.Int32)">
            <summary>
            Keeps executing the provided handler with the interval.
            </summary>
            <param name="handler">The handler that is called each time.</param>
            <param name="timeout">The interval in milliseconds.</param>
            <returns>The handler to reference clear the interval.</returns>
        </member>
        <member name="M:AngleSharp.Dom.IWindowTimers.ClearInterval(System.Int32)">
            <summary>
            Clears an interval.
            </summary>
            <param name="handle">
            The handle that specifies, which interval to clear.
            </param>
        </member>
        <member name="T:AngleSharp.Dom.MutationCallback">
            <summary>
            Defines the callback signature for a mutation event.
            </summary>
            <param name="mutations">The sequence of mutations.</param>
            <param name="observer">The observer.</param>
        </member>
        <member name="T:AngleSharp.Dom.MutationObserver">
            <summary>
            MutationObserver provides developers a way to react to changes in a
            DOM.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.#ctor(AngleSharp.Dom.MutationCallback)">
            <summary>
            Creates a new mutation observer with the provided callback.
            </summary>
            <param name="callback">The callback to trigger.</param>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.Enqueue(AngleSharp.Dom.MutationRecord)">
            <summary>
            Queues a record.
            </summary>
            <param name="record">The record to queue up.</param>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.Trigger">
            <summary>
            Triggers the execution if the queue is not-empty.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.TriggerWith(AngleSharp.Dom.IMutationRecord[])">
            <summary>
            Triggers the execution with the provided records.
            </summary>
            <param name="records">The records to supply as argument.</param>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.ResolveOptions(AngleSharp.Dom.INode)">
            <summary>
            Gets the options, if any, for the given node. If null is returned
            then the node is not being observed.
            </summary>
            <param name="node">The node of interest.</param>
            <returns>The options set for the provided node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.AddTransient(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Adds a transient observer for the given node with the provided
            ancestor, if the node's ancestor is currently observed.
            </summary>
            <param name="ancestor">
            The ancestor that is currently observed.
            </param>
            <param name="node">
            The node to observe as a transient observer.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.ClearTransients">
            <summary>
            Clears all transient observers.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.Disconnect">
            <summary>
            Stops the MutationObserver instance from receiving
            notifications of DOM mutations. Until the observe()
            method is used again, observer's callback will not be invoked.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.Connect(AngleSharp.Dom.INode,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers the MutationObserver instance to receive notifications of
            DOM mutations on the specified node.
            </summary>
            <param name="target">
            The Node on which to observe DOM mutations.
            </param>
            <param name="childList">
            If additions and removals of the target node's child elements
            (including text nodes) are to be observed.
            </param>
            <param name="subtree">
            If mutations to not just target, but also target's descendants are
            to be observed.
            </param>
            <param name="attributes">
            If mutations to target's attributes are to be observed.
            </param>
            <param name="characterData">
            If mutations to target's data are to be observed.
            </param>
            <param name="attributeOldValue">
            If attributes is set to true and target's attribute value before
            the mutation needs to be recorded.
            </param>
            <param name="characterDataOldValue">
            If characterData is set to true and target's data before the
            mutation needs to be recorded.
            </param>
            <param name="attributeFilter">
            The attributes to observe. If this is not set, then all attributes
            are being observed.
            </param>
        </member>
        <member name="M:AngleSharp.Dom.MutationObserver.Flush">
            <summary>
            Empties the MutationObserver instance's record queue and returns
            what was in there.
            </summary>
            <returns>Returns an Array of MutationRecords.</returns>
        </member>
        <member name="T:AngleSharp.Dom.NamespaceNames">
            <summary>
            Contains a list of common namespaces.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.HtmlUri">
            <summary>
            Gets the namespace for HTML elements.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.XmlNsUri">
            <summary>
            Gets the namespace for XMLNS elements.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.XLinkUri">
            <summary>
            Gets the namespace for XMLNS elements.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.XmlUri">
            <summary>
            Gets the namespace for XML elements.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.SvgUri">
            <summary>
            Gets the namespace for SVG elements.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.MathMlUri">
            <summary>
            Gets the namespace for MathML elements.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.XmlNsPrefix">
            <summary>
            Gets the prefix for XMLNS elements.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.XLinkPrefix">
            <summary>
            Gets the prefix for XMLNS elements.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NamespaceNames.XmlPrefix">
            <summary>
            Gets the prefix for XML elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.NodeExtensions">
            <summary>
            Useful methods for node objects.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetRoot(AngleSharp.Dom.INode)">
            <summary>
            Gets the root of the given node, which is the node itself, if it has
            no parent, or the root of the parent.
            </summary>
            <param name="node">The node to get the root of.</param>
            <returns>The root node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsEndPoint(AngleSharp.Dom.INode)">
            <summary>
            Checks if the provided node is an endpoint, i.e., does not host any
            other node.
            </summary>
            <param name="node">The node that is checked.</param>
            <returns>True if the node is an endpoint, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsInsertable(AngleSharp.Dom.INode)">
            <summary>
            Checks if the provided node can be inserted into some other node.
            This excludes, e.g., documents from being inserted.
            </summary>
            <param name="node">The node that is checked.</param>
            <returns>True if the node is insertable, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.HyperReference(AngleSharp.Dom.INode,System.String)">
            <summary>
            Gets the hyperreference of the given URL - transforming the given
            (relative) URL to an absolute URL if required.
            </summary>
            <param name="node">The node that spawns the hyper reference.</param>
            <param name="url">The given URL.</param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsDescendantOf(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Checks if the node is an descendant of the given parent.
            </summary>
            <param name="node">The descendant node to use.</param>
            <param name="parent">The possible parent to use.</param>
            <returns>
            True if the given parent is actually an ancestor of the node.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetDescendants(AngleSharp.Dom.INode)">
            <summary>
            Gets the descendant nodes of the provided parent, in tree order.
            </summary>
            <param name="parent">The parent of the descendants.</param>
            <returns>An iterator over all descendants.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetDescendantsAndSelf(AngleSharp.Dom.INode)">
            <summary>
            Gets the descendant nodes and itself of the provided parent, in tree order.
            </summary>
            <param name="parent">The parent of the descendants.</param>
            <returns>An iterator over all descendants and itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsInclusiveDescendantOf(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Checks if the node is an inclusive descendant of the given parent.
            </summary>
            <param name="node">The descendant node to use.</param>
            <param name="parent">The possible parent to use.</param>
            <returns>
            True if the given parent is actually an inclusive ancestor of the
            provided node.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsAncestorOf(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Checks if the parent is an ancestor of the given node.
            </summary>
            <param name="parent">The possible parent to use.</param>
            <param name="node">The node to check for being descendent.</param>
            <returns>
            True if the given parent is actually an ancestor of the node.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetAncestors(AngleSharp.Dom.INode)">
            <summary>
            Gets the ancestor nodes of the provided node, in tree order.
            </summary>
            <param name="node">The child of the ancestors.</param>
            <returns>An iterator over all ancestors.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetInclusiveAncestors(AngleSharp.Dom.INode)">
            <summary>
            Gets the inclusive ancestor nodes of the provided node, in tree
            order.
            </summary>
            <param name="node">The child of the ancestors.</param>
            <returns>
            An iterator over all ancestors including the given node.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsInclusiveAncestorOf(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Checks if the parent is an inclusive ancestor of the given node.
            </summary>
            <param name="parent">The possible parent to use.</param>
            <param name="node">The node to check for being descendent.</param>
            <returns>
            True if the given parent is actually an inclusive ancestor of the
            provided node.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetAncestor``1(AngleSharp.Dom.INode)">
            <summary>
            Gets the first ancestor node that is of the specified type.
            </summary>
            <param name="node">The child of the potential ancestor.</param>
            <returns>The specified ancestor or its default value.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.HasDataListAncestor(AngleSharp.Dom.INode)">
            <summary>
            Checks if any parent is an HTML datalist element..
            </summary>
            <param name="child">The node to use as starting point.</param>
            <returns>
            True if a datalist element is among the ancestors, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsSiblingOf(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Checks if the current node is a sibling of the specified element.
            </summary>
            <param name="node">The maybe sibling.</param>
            <param name="element">
            The node to check for having the same parent.
            </param>
            <returns>
            True if the parent is actually non-null and actually the same.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.Index(AngleSharp.Dom.INode)">
            <summary>
            Gets the index of the provided node in the parent's collection.
            </summary>
            <param name="node">The node which needs to know its index.</param>
            <returns>
            The index of the node or -1 if the node is not a child of a parent.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IndexOf(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Finds the index of the given node of the provided parent node.
            </summary>
            <param name="parent">The parent of the given node.</param>
            <param name="node">The node which needs to know its index.</param>
            <returns>
            The node's index or -1 if the node is not a child of the parent.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsPreceding(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Checks if the context node is before the provided node.
            </summary>
            <param name="before">The context node.</param>
            <param name="after">The provided ref node.</param>
            <returns>
            True if the context node is preceding the ref node in tree order.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsFollowing(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Checks if the context node is after the provided node.
            </summary>
            <param name="after">The context node.</param>
            <param name="before">The provided ref node.</param>
            <returns>
            True if the context node is following the ref node in tree order.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetAssociatedHost(AngleSharp.Dom.INode)">
            <summary>
            Gets the associated host object, if any. This is mostly interesting
            for the HTML5 template tag.
            </summary>
            <param name="node">The node that probably has an host object</param>
            <returns>The host object or null.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsHostIncludingInclusiveAncestor(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Checks for an inclusive ancestor relationship or if the host (if
            any) has such a relationship.
            </summary>
            <param name="parent">The possible parent to use.</param>
            <param name="node">The node to check for being descendent.</param>
            <returns>
            True if the given parent is actually an inclusive ancestor
            (including the host) of the provided node.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.EnsurePreInsertionValidity(AngleSharp.Dom.INode,AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Ensures the validity for inserting the given node at parent before
            the provided child. Throws an error is the insertation is invalid.
            </summary>
            <param name="parent">The origin that will be mutated.</param>
            <param name="node">The node to be inserted.</param>
            <param name="child">The reference node of the insertation.</param>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.PreInsert(AngleSharp.Dom.INode,AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Pre-inserts the given node at the parent before the provided child.
            </summary>
            <param name="parent">The origin that will be mutated.</param>
            <param name="node">The node to be inserted.</param>
            <param name="child">The reference node of the insertation.</param>
            <returns>The inserted node, which is node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.PreRemove(AngleSharp.Dom.INode,AngleSharp.Dom.INode)">
            <summary>
            Pre-removes the given child of the parent.
            </summary>
            <param name="parent">The origin that will be mutated.</param>
            <param name="child">The node that will be removed.</param>
            <returns>The removed node, which is child.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.HasTextNodes(AngleSharp.Dom.INode)">
            <summary>
            Checks if the node has any text node children.
            </summary>
            <param name="node">The parent of the potential text nodes.</param>
            <returns>
            True if the node has any text nodes, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsFollowedByDoctype(AngleSharp.Dom.INode)">
            <summary>
            Checks if the given child is followed by a document type.
            </summary>
            <param name="child">The child that precedes the doctype.</param>
            <returns>
            True if a doctype node is following the child, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.IsPrecededByElement(AngleSharp.Dom.INode)">
            <summary>
            Checks if the given child is preceded by an element node.
            </summary>
            <param name="child">The child that follows any element.</param>
            <returns>
            True if an element node is preceded the child, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetElementCount(AngleSharp.Dom.INode)">
            <summary>
            Gets the element count of the given node.
            </summary>
            <param name="parent">The parent of potential element nodes.</param>
            <returns>The number of element nodes in the parent.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.FindChild``1(AngleSharp.Dom.INode)">
            <summary>
            Tries to find a direct child of a certain type.
            </summary>
            <typeparam name="TNode">The node type to find.</typeparam>
            <param name="parent">The parent that contains the elements.</param>
            <returns>The instance or null.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.FindDescendant``1(AngleSharp.Dom.INode)">
            <summary>
            Tries to find a descendant of a certain type.
            </summary>
            <typeparam name="TNode">The node type to find.</typeparam>
            <param name="parent">The parent that contains the elements.</param>
            <returns>The instance or null.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.GetAssignedSlot(AngleSharp.Dom.IShadowRoot,System.String)">
            <summary>
            Gets the assigned slot given by the shadow root and the slot name.
            </summary>
            <param name="root">The shadow tree hosting the slots.</param>
            <param name="name">The name of the slot to target.</param>
            <returns>The slot or default slot, if any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.Text(AngleSharp.Dom.INode)">
            <summary>
            Gets the content text of the given DOM node.
            </summary>
            <param name="node">The node to stringify.</param>
            <returns>The text of the node and its children.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.Text``1(``0,System.String)">
            <summary>
            Sets the text content of the given elements.
            </summary>
            <typeparam name="T">The type of collection.</typeparam>
            <param name="nodes">The collection.</param>
            <param name="text">The text that should be set.</param>
            <returns>The collection itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.NodeExtensions.Index(System.Collections.Generic.IEnumerable{AngleSharp.Dom.INode},AngleSharp.Dom.INode)">
            <summary>
            Gets the index of the given item in the list of nodes.
            </summary>
            <param name="nodes">The source list of nodes.</param>
            <param name="item">The item to search for.</param>
            <returns>The index of the item or -1 if not found.</returns>
        </member>
        <member name="T:AngleSharp.Dom.NodeFilter">
            <summary>
            The signature for a NodeFilter callback function.
            </summary>
            <param name="node">The node to examine.</param>
            <returns>The result after the examination of the node.</returns>
        </member>
        <member name="T:AngleSharp.Dom.NodeType">
            <summary>
            Contains an enumeration of various node types.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.Element">
            <summary>
            A standard node element.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.Attribute">
            <summary>
            An attribute node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.Text">
            <summary>
            A text node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.CharacterData">
            <summary>
            A CData text node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.EntityReference">
            <summary>
            An entity reference node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.Entity">
            <summary>
            An entity node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.ProcessingInstruction">
            <summary>
            A processing instruction node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.Comment">
            <summary>
            A comment node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.Document">
            <summary>
            A document node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.DocumentType">
            <summary>
            A document type node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.DocumentFragment">
            <summary>
            A document (fragment mode) node.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.NodeType.Notation">
            <summary>
            A notation node.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.ParentNodeExtensions">
            <summary>
            Useful methods for parent node objects.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.MutationMacro(AngleSharp.Dom.INode,AngleSharp.Dom.INode[])">
            <summary>
            Runs the mutation macro as defined in 5.2.2 Mutation methods
            of http://www.w3.org/TR/domcore/.
            </summary>
            <param name="parent">The parent, which invokes the algorithm.</param>
            <param name="nodes">The nodes array to add.</param>
            <returns>A (single) node.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.PrependNodes(AngleSharp.Dom.INode,AngleSharp.Dom.INode[])">
            <summary>
            Prepends nodes to the parent node.
            </summary>
            <param name="parent">The parent, where to prepend to.</param>
            <param name="nodes">The nodes to prepend.</param>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.AppendNodes(AngleSharp.Dom.INode,AngleSharp.Dom.INode[])">
            <summary>
            Appends nodes to parent node.
            </summary>
            <param name="parent">The parent, where to append to.</param>
            <param name="nodes">The nodes to append.</param>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.InsertBefore(AngleSharp.Dom.INode,AngleSharp.Dom.INode[])">
            <summary>
            Inserts nodes before the given child.
            </summary>
            <param name="child">The context object.</param>
            <param name="nodes">The nodes to insert before.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.InsertAfter(AngleSharp.Dom.INode,AngleSharp.Dom.INode[])">
            <summary>
            Inserts nodes after the given child.
            </summary>
            <param name="child">The context object.</param>
            <param name="nodes">The nodes to insert after.</param>
            <returns>The current element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.ReplaceWith(AngleSharp.Dom.INode,AngleSharp.Dom.INode[])">
            <summary>
            Replaces the given child with the nodes.
            </summary>
            <param name="child">The context object.</param>
            <param name="nodes">The nodes to replace.</param>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.RemoveFromParent(AngleSharp.Dom.INode)">
            <summary>
            Removes the child from its parent.
            </summary>
            <param name="child">The context object.</param>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.AppendElement``1(AngleSharp.Dom.INode,``0)">
            <summary>
            Inserts a node as the last child node of this element.
            </summary>
            <typeparam name="TElement">The type of element to add.</typeparam>
            <param name="parent">The parent of the node to add.</param>
            <param name="element">The element to be appended.</param>
            <returns>The appended element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.InsertElement``1(AngleSharp.Dom.INode,``0,AngleSharp.Dom.INode)">
            <summary>
            Inserts the newElement immediately before the referenceElement.
            </summary>
            <typeparam name="TElement">The type of element to add.</typeparam>
            <param name="parent">The parent of the node to add.</param>
            <param name="newElement">The node to be inserted.</param>
            <param name="referenceElement">
            The existing child element that will succeed the new element.
            </param>
            <returns>The inserted element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.RemoveElement``1(AngleSharp.Dom.INode,``0)">
            <summary>
            Removes a child node from the current element, which must be a
            child of the current node.
            </summary>
            <typeparam name="TElement">The type of element.</typeparam>
            <param name="parent">The parent of the node to remove.</param>
            <param name="element">The element to be removed.</param>
            <returns>The removed element.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.QuerySelector``1(AngleSharp.Dom.IParentNode,System.String)">
            <summary>
            Returns the first element matching the selectors with the provided
            type, or null.
            </summary>
            <typeparam name="TElement">The type to look for.</typeparam>
            <param name="parent">The parent of the nodes to gather.</param>
            <param name="selectors">The group of selectors to use.</param>
            <returns>The element, if there is any.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.QuerySelectorAll``1(AngleSharp.Dom.IParentNode,System.String)">
            <summary>
            Returns a list of elements matching the selectors with the
            provided type.
            </summary>
            <typeparam name="TElement">The type to look for.</typeparam>
            <param name="parent">The parent of the nodes to gather.</param>
            <param name="selectors">The group of selectors to use.</param>
            <returns>An enumeration with the elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.Descendents``1(AngleSharp.Dom.INode)">
            <summary>
            Gets the descendent nodes of the given parent.
            </summary>
            <typeparam name="TNode">The type of nodes to obtain.</typeparam>
            <param name="parent">The parent of the nodes to gather.</param>
            <returns>The descendent nodes.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.Descendents(AngleSharp.Dom.INode)">
            <summary>
            Gets the descendent nodes of the given parent.
            </summary>
            <param name="parent">The parent of the nodes to gather.</param>
            <returns>The descendent nodes.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.DescendentsAndSelf``1(AngleSharp.Dom.INode)">
            <summary>
            Gets the descendent nodes including itself of the given parent.
            </summary>
            <typeparam name="TNode">The type of nodes to obtain.</typeparam>
            <param name="parent">The parent of the nodes to gather.</param>
            <returns>The descendent nodes including itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.DescendentsAndSelf(AngleSharp.Dom.INode)">
            <summary>
            Gets the descendent nodes including itself of the given parent.
            </summary>
            <param name="parent">The parent of the nodes to gather.</param>
            <returns>The descendent nodes including itself.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.Ancestors``1(AngleSharp.Dom.INode)">
            <summary>
            Gets the ancestor nodes of the given child.
            </summary>
            <typeparam name="TNode">The type of nodes to obtain.</typeparam>
            <param name="child">The child of the nodes to gather.</param>
            <returns>The ancestor nodes.</returns>
        </member>
        <member name="M:AngleSharp.Dom.ParentNodeExtensions.Ancestors(AngleSharp.Dom.INode)">
            <summary>
            Gets the ancestor nodes of the given child.
            </summary>
            <param name="child">The child of the nodes to gather.</param>
            <returns>The ancestor nodes.</returns>
        </member>
        <member name="T:AngleSharp.Dom.QueryExtensions">
            <summary>
            Extensions for performing QuerySelector operations.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.QuerySelector(AngleSharp.Dom.INodeList,System.String,AngleSharp.Dom.INode)">
            <summary>
            Returns the first element within the document (using depth-first pre-order traversal
            of the document's nodes) that matches the specified group of selectors.
            Requires either a non-empty nodelist or a valid scope node.
            </summary>
            <param name="nodes">The nodes to take as source.</param>
            <param name="selectorText">A string containing one or more CSS selectors separated by commas.</param>
            <param name="scopeNode">The optional node to take as scope.</param>
            <returns>An element object.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.QuerySelectorAll(AngleSharp.Dom.INodeList,System.String,AngleSharp.Dom.INode)">
            <summary>
            Returns a list of the elements within the document (using depth-first pre-order traversal
            of the document's nodes) that match the specified group of selectors.
            Requires either a non-empty nodelist or a valid scope node.
            </summary>
            <param name="nodes">The nodes to take as source.</param>
            <param name="selectorText">A string containing one or more CSS selectors separated by commas.</param>
            <param name="scopeNode">The optional node to take as scope.</param>
            <returns>A HTMLCollection with all elements that match the selection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.GetElementsByClassName(AngleSharp.Dom.INodeList,System.String)">
            <summary>
            Returns a set of elements which have all the given class names.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="classNames">A string representing the list of class names to match; class names are separated by whitespace.</param>
            <returns>A collection of HTML elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.GetElementsByTagName(AngleSharp.Dom.INodeList,System.String)">
            <summary>
            Returns a NodeList of elements with the given tag name. The complete document is searched, including the root node.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="tagName">A string representing the name of the elements. The special string "*" represents all elements.</param>
            <returns>A NodeList of found elements in the order they appear in the tree.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.GetElementsByTagName(AngleSharp.Dom.INodeList,System.String,System.String)">
            <summary>
            Returns a list of elements with the given tag name belonging to the given namespace.
            The complete document is searched, including the root node.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="namespaceUri">The namespace URI of elements to look for.</param>
            <param name="localName">Either the local name of elements to look for or the special value "*", which matches all elements.</param>
            <returns>A NodeList of found elements in the order they appear in the tree.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.QuerySelector``1(AngleSharp.Dom.INodeList,AngleSharp.Css.Dom.ISelector)">
            <summary>
            Returns the first element within the document (using depth-first pre-order traversal
            of the document's nodes) that matches the given selector.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="selectors">A selector object.</param>
            <returns>An element object.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.QuerySelector(AngleSharp.Dom.INodeList,AngleSharp.Css.Dom.ISelector)">
            <summary>
            Returns the first element within the document (using depth-first pre-order traversal
            of the document's nodes) that matches the specified group of selectors.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="selector">A selector object.</param>
            <returns>An element object.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.QuerySelectorAll(AngleSharp.Dom.INodeList,AngleSharp.Css.Dom.ISelector)">
            <summary>
            Returns a list of the elements within the document (using depth-first pre-order traversal
            of the document's nodes) that matches the selector.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="selector">A selector object.</param>
            <returns>A HTMLCollection with all elements that match the selection.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.QuerySelectorAll(AngleSharp.Dom.INodeList,AngleSharp.Css.Dom.ISelector,System.Collections.Generic.List{AngleSharp.Dom.IElement})">
            <summary>
            Returns a list of the elements within the document (using depth-first pre-order traversal
            of the document's nodes) that match the specified group of selectors.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="selector">A selector object.</param>
            <param name="result">A reference to the list where to store the results.</param>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.Contains(AngleSharp.Dom.ITokenList,System.String[])">
            <summary>
            Returns true if the underlying string contains all of the tokens, otherwise false.
            </summary>
            <param name="list">The list that is considered.</param>
            <param name="tokens">The tokens to consider.</param>
            <returns>True if the string contained all tokens, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.GetElementsByClassName(AngleSharp.Dom.INodeList,System.String[],System.Collections.Generic.List{AngleSharp.Dom.IElement})">
            <summary>
            Returns a set of elements which have all the given class names.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="classNames">An array with class names to consider.</param>
            <param name="result">A reference to the list where to store the results.</param>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.GetElementsByTagName(AngleSharp.Dom.INodeList,System.String,System.Collections.Generic.List{AngleSharp.Dom.IElement})">
            <summary>
            Returns a NodeList of elements with the given tag name. The complete document is searched, including the root node.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="tagName">A string representing the name of the elements. The special string "*" represents all elements.</param>
            <param name="result">A reference to the list where to store the results.</param>
        </member>
        <member name="M:AngleSharp.Dom.QueryExtensions.GetElementsByTagName(AngleSharp.Dom.INodeList,System.String,System.String,System.Collections.Generic.List{AngleSharp.Dom.IElement})">
            <summary>
            Returns a list of elements with the given tag name belonging to the given namespace.
            The complete document is searched, including the root node.
            </summary>
            <param name="elements">The elements to take as source.</param>
            <param name="namespaceUri">The namespace URI of elements to look for.</param>
            <param name="localName">Either the local name of elements to look for or the special value "*", which matches all elements.</param>
            <param name="result">A reference to the list where to store the results.</param>
        </member>
        <member name="T:AngleSharp.Dom.RangePosition">
            <summary>
            An enumeration of possible values for position comparisons in a range object.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.RangePosition.Before">
            <summary>
            The position of the given point to the other point is before.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.RangePosition.Equal">
            <summary>
            The position of the given point to the other point is equal.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.RangePosition.After">
            <summary>
            The position of the given point to the other point is after.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.RangeType">
            <summary>
            An enumeration with possible values on how to compare boundary points.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.RangeType.StartToStart">
            <summary>
            From the start to the start (periodic).
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.RangeType.StartToEnd">
            <summary>
            From the start to the end (non-periodic).
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.RangeType.EndToEnd">
            <summary>
            From the end to the end (periodic).
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.RangeType.EndToStart">
            <summary>
            From the end to the start (non-periodic).
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.SelectorExtensions">
            <summary>
            Defines a set of extension methods involving selectors.
            </summary>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Eq``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Reduces the elements to the one at the given index, if any.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="elements">The collection.</param>
            <param name="index">The index of the element.</param>
            <returns>The element, or its default value.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Gt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Reduces the elements to the ones above the given index.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="elements">The collection.</param>
            <param name="index">The minimum exclusive index.</param>
            <returns>The remaining elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Lt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Reduces the elements to the ones below the given index.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="elements">The collection.</param>
            <param name="index">The maximum exclusive index.</param>
            <returns>The remaining elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Even``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reduces the elements to the ones with even index.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="elements">The collection.</param>
            <returns>The remaining elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Odd``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reduces the elements to the ones with odd index.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="elements">The collection.</param>
            <returns>The remaining elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Filter``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Keeps elements that are matched by the provided selector.
            </summary>
            <param name="elements">The elements to be filtered.</param>
            <param name="selectorText">The CSS selector to use.</param>
            <returns>The filtered list of elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Not``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Keeps elements that are not matched by the provided selector.
            </summary>
            <param name="elements">The elements to be filtered.</param>
            <param name="selectorText">The CSS selector to use.</param>
            <returns>The filtered list of elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Children(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},System.String)">
            <summary>
            Gets the children of the provided elements. Optionally uses a CSS
            selector to filter the results.
            </summary>
            <param name="elements">The elements owning the children.</param>
            <param name="selectorText">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the children.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Siblings(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},System.String)">
            <summary>
            Gets the siblings of the provided elements. Optionally uses a CSS
            selector to filter the results.
            </summary>
            <param name="elements">The elements with siblings.</param>
            <param name="selectorText">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the siblings.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Parent(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},System.String)">
            <summary>
            Gets the parents of the provided elements. Optionally uses a CSS
            selector to filter the results.
            </summary>
            <param name="elements">The elements with parents.</param>
            <param name="selectorText">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the parents.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Next(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},System.String)">
            <summary>
            Gets the following siblings of the provided elements. Optionally
            uses a CSS selector to filter the results.
            </summary>
            <param name="elements">The elements with siblings.</param>
            <param name="selectorText">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the next siblings.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Previous(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},System.String)">
            <summary>
            Gets the preceding siblings of the provided elements. Optionally
            uses a CSS selector to filter the results.
            </summary>
            <param name="elements">The elements with siblings.</param>
            <param name="selectorText">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the previous siblings.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Is``1(System.Collections.Generic.IEnumerable{``0},AngleSharp.Css.Dom.ISelector)">
            <summary>
            Keeps elements that are matched by the provided selector.
            </summary>
            <param name="elements">The elements to be filtered.</param>
            <param name="selector">The CSS selector to use.</param>
            <returns>The filtered list of elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Not``1(System.Collections.Generic.IEnumerable{``0},AngleSharp.Css.Dom.ISelector)">
            <summary>
            Keeps elements that are not matched by the provided selector.
            </summary>
            <param name="elements">The elements to be filtered.</param>
            <param name="selector">The CSS selector to use.</param>
            <returns>The filtered list of elements.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Children(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},AngleSharp.Css.Dom.ISelector)">
            <summary>
            Gets the children of the provided elements. Optionally uses a CSS
            selector to filter the results.
            </summary>
            <param name="elements">The elements owning the children.</param>
            <param name="selector">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the children.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Siblings(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},AngleSharp.Css.Dom.ISelector)">
            <summary>
            Gets the siblings of the provided elements. Optionally uses a CSS
            selector to filter the results.
            </summary>
            <param name="elements">The elements with siblings.</param>
            <param name="selector">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the siblings.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Parent(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},AngleSharp.Css.Dom.ISelector)">
            <summary>
            Gets the parents of the provided elements. Optionally uses a CSS
            selector to filter the results.
            </summary>
            <param name="elements">The elements with parents.</param>
            <param name="selector">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the parents.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Next(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},AngleSharp.Css.Dom.ISelector)">
            <summary>
            Gets the following siblings of the provided elements. Optionally
            uses a CSS selector to filter the results.
            </summary>
            <param name="elements">The elements with siblings.</param>
            <param name="selector">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the next siblings.</returns>
        </member>
        <member name="M:AngleSharp.Dom.SelectorExtensions.Previous(System.Collections.Generic.IEnumerable{AngleSharp.Dom.IElement},AngleSharp.Css.Dom.ISelector)">
            <summary>
            Gets the preceding siblings of the provided elements. Optionally
            uses a CSS selector to filter the results.
            </summary>
            <param name="elements">The elements with siblings.</param>
            <param name="selector">The CSS selector to use, if any.</param>
            <returns>A filtered list containing the previous siblings.</returns>
        </member>
        <member name="T:AngleSharp.Dom.ShadowRootMode">
            <summary>
            List of possible shadow root mode states.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.ShadowRootMode.Open">
            <summary>
            Specifies open encapsulation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.ShadowRootMode.Closed">
            <summary>
            Specifies closed encapsulation mode.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.TagNames">
            <summary>
            The collection of (known / used) tags.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Doctype">
            <summary>
            Gets the DOCTYPE constant.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Html">
            <summary>
            The html tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Body">
            <summary>
            The body tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Head">
            <summary>
            The head tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Meta">
            <summary>
            The meta tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Title">
            <summary>
            The title tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Bgsound">
            <summary>
            The bgsound tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Script">
            <summary>
            The script tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Style">
            <summary>
            The style tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.NoEmbed">
            <summary>
            The noembed tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.NoScript">
            <summary>
            The noscript tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.NoFrames">
            <summary>
            The noframes tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Menu">
            <summary>
            The menu tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.MenuItem">
            <summary>
            The menuitem tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Var">
            <summary>
            The var tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Ruby">
            <summary>
            The ruby tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Sub">
            <summary>
            The sub tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Sup">
            <summary>
            The sup tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Rp">
            <summary>
            The rp tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Rt">
            <summary>
            The rt tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Rb">
            <summary>
            The rb tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Rtc">
            <summary>
            The rtc tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Applet">
            <summary>
            The applet tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Embed">
            <summary>
            The embed tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Marquee">
            <summary>
            The marquee tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Param">
            <summary>
            The param tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Object">
            <summary>
            The object tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Canvas">
            <summary>
            The canvas tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Font">
            <summary>
            The font tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Ins">
            <summary>
            The ins tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Del">
            <summary>
            The del tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Template">
            <summary>
            The template tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Slot">
            <summary>
            The slot tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Caption">
            <summary>
            The caption tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Col">
            <summary>
            The col tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Colgroup">
            <summary>
            The colgroup tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Table">
            <summary>
            The table tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Thead">
            <summary>
            The thead tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Tbody">
            <summary>
            The tbody tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Tfoot">
            <summary>
            The tfoot tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Th">
            <summary>
            The th tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Td">
            <summary>
            The td tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Tr">
            <summary>
            The tr tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Input">
            <summary>
            The input tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Keygen">
            <summary>
            The keygen tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Textarea">
            <summary>
            The textarea tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.P">
            <summary>
            The p tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Span">
            <summary>
            The span tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Dialog">
            <summary>
            The dialog tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Fieldset">
            <summary>
            The fieldset tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Legend">
            <summary>
            The legend tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Label">
            <summary>
            The label tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Details">
            <summary>
            The details tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Form">
            <summary>
            The form tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.IsIndex">
            <summary>
            The isindex tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Pre">
            <summary>
            The pre tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Data">
            <summary>
            The data tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Datalist">
            <summary>
            The datalist tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Ol">
            <summary>
            The ol tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Ul">
            <summary>
            The tag ul.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Dl">
            <summary>
            The dl tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Li">
            <summary>
            The li tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Dd">
            <summary>
            The dd tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Dt">
            <summary>
            The dt tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.B">
            <summary>
            The b tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Big">
            <summary>
            The big tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Strike">
            <summary>
            The strike tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Code">
            <summary>
            The code tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Em">
            <summary>
            The em tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.I">
            <summary>
            The i tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.S">
            <summary>
            The s tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Small">
            <summary>
            The small tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Strong">
            <summary>
            The strong tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.U">
            <summary>
            The u tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Tt">
            <summary>
            The tt tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.NoBr">
            <summary>
            The nobr tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Select">
            <summary>
            The select tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Option">
            <summary>
            The option tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Optgroup">
            <summary>
            The optgroup tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Link">
            <summary>
            The link tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Frameset">
            <summary>
            The frameset tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Frame">
            <summary>
            The frame tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Iframe">
            <summary>
            The iframe tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Audio">
            <summary>
            The audio tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Video">
            <summary>
            The video tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Source">
            <summary>
            The source tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Track">
            <summary>
            The track tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.H1">
            <summary>
            The h1 tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.H2">
            <summary>
            The h2 tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.H3">
            <summary>
            The h3 tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.H4">
            <summary>
            The h4 tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.H5">
            <summary>
            The h5 tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.H6">
            <summary>
            The h6 tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Div">
            <summary>
            The div tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Quote">
            <summary>
            The quote tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.BlockQuote">
            <summary>
            The blockquote tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Q">
            <summary>
            The q tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Base">
            <summary>
            The base tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.BaseFont">
            <summary>
            The basefont tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.A">
            <summary>
            The a tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Area">
            <summary>
            The area tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Button">
            <summary>
            The button tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Cite">
            <summary>
            The cite tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Main">
            <summary>
            The main tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Summary">
            <summary>
            The summary tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Xmp">
            <summary>
            The xmp tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Br">
            <summary>
            The br tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Wbr">
            <summary>
            The wbr tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Hr">
            <summary>
            The hr tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Dir">
            <summary>
            The dir tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Center">
            <summary>
            The center tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Listing">
            <summary>
            The listing tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Img">
            <summary>
            The img tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Image">
            <summary>
            The image tag (this is not the right tag).
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Nav">
            <summary>
            The nav tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Address">
            <summary>
            The address tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Article">
            <summary>
            The article tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Aside">
            <summary>
            The aside tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Figcaption">
            <summary>
            The figcaption tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Figure">
            <summary>
            The figure tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Section">
            <summary>
            The section tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Footer">
            <summary>
            The footer tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Header">
            <summary>
            The header tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Hgroup">
            <summary>
            The hgroup tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Plaintext">
            <summary>
            The plaintext tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Time">
            <summary>
            The time tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Progress">
            <summary>
            The progress tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Meter">
            <summary>
            The meter tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Output">
            <summary>
            The output tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Map">
            <summary>
            The map tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Picture">
            <summary>
            The picture tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Mark">
            <summary>
            The mark tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Dfn">
            <summary>
            The dfn tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Kbd">
            <summary>
            The kbd tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Samp">
            <summary>
            The samp tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Abbr">
            <summary>
            The abbr tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Bdi">
            <summary>
            The bdi tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Bdo">
            <summary>
            The bdo tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Math">
            <summary>
            The math tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Mi">
            <summary>
            The mi tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Mo">
            <summary>
            The mo tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Mn">
            <summary>
            The mn tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Ms">
            <summary>
            The ms tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Mtext">
            <summary>
            The mtext tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.AnnotationXml">
            <summary>
            The annotation-xml tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Svg">
            <summary>
            The svg tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.ForeignObject">
            <summary>
            The foreignObject tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Desc">
            <summary>
            The desc tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Circle">
            <summary>
            The circle tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.TagNames.Xml">
            <summary>
            The xml tag.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.VerticalAlignment">
            <summary>
            The list of possible vertical alignments (extended by CSS).
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.VerticalAlignment.Baseline">
            <summary>
            Aligns the baseline of the element with the baseline of its parent.
            The baseline of some replaced elements, like textarea is not specified
            by the HTML specification, meaning that their behavior with this keyword
            may change from one browser to the other.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.VerticalAlignment.Sub">
            <summary>
            Aligns the baseline of the element with the subscript-baseline
            of its parent.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.VerticalAlignment.Super">
            <summary>
            Aligns the baseline of the element with the superscript-baseline
            of its parent.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.VerticalAlignment.TextTop">
            <summary>
            Aligns the top of the element with the top of the parent
            element's font.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.VerticalAlignment.TextBottom">
            <summary>
            Aligns the bottom of the element with the bottom of the parent
            element's font.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.VerticalAlignment.Middle">
            <summary>
            Aligns the middle of the element with the middle of lowercase
            letters in the parent.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.VerticalAlignment.Top">
            <summary>
            Align the top of the element and its descendants with the top
            of the entire line.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.VerticalAlignment.Bottom">
            <summary>
            Align the bottom of the element and its descendants with the
            bottom of the entire line.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.Visibility">
            <summary>
            An enumeration with the various visibility states.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.Visibility.Visible">
            <summary>
            Default value, the box is visible.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.Visibility.Hidden">
            <summary>
            The box is invisible (fully transparent, nothing is drawn),
            but still affects layout. 
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.Visibility.Collapse">
            <summary>
            For table rows, columns, column groups, and row groups the
            row(s) or column(s) are hidden and the space they would have
            occupied is removed (as if display: none were applied to the
            column/row of the table). However, the size of other rows and
            columns is still calculated as though the cells in the collapsed
            row(s) or column(s) are present. This was designed for fast
            removal of a row/column from a table without having to recalculate
            widths and heights for every portion of the table. For XUL elements,
            the computed size of the element is always zero, regardless of other
            styles that would normally affect the size, although margins still
            take effect. For other elements, collapse is treated the same as hidden.
            </summary>
        </member>
        <member name="T:AngleSharp.Dom.WordBreak">
            <summary>
            The list of possible horizontal alignments.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.WordBreak.Normal">
            <summary>
            Use the default line break rule.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.WordBreak.BreakAll">
            <summary>
            Word breaks may be inserted between any 
            character for non-CJK (Chinese/Japanese/Korean) text.
            </summary>
        </member>
        <member name="F:AngleSharp.Dom.WordBreak.KeepAll">
            <summary>
            Don't allow word breaks for CJK text.  
            Non-CJK text behavior is the same as for normal.
            </summary>
        </member>
        <member name="T:AngleSharp.FormatExtensions">
            <summary>
            Extensions for formatting, e.g., markup or styling.
            </summary>
        </member>
        <member name="M:AngleSharp.FormatExtensions.ToCss(AngleSharp.IStyleFormattable)">
            <summary>
            Returns the (complete) CSS style representation of the node.
            </summary>
            <param name="style">The style node to format.</param>
            <returns>The source code snippet.</returns>
        </member>
        <member name="M:AngleSharp.FormatExtensions.ToCss(AngleSharp.IStyleFormattable,AngleSharp.IStyleFormatter)">
            <summary>
            Returns the (complete) CSS style representation of the node.
            </summary>
            <param name="style">The style node to format.</param>
            <param name="formatter">The formatter to use.</param>
            <returns>The source code snippet.</returns>
        </member>
        <member name="M:AngleSharp.FormatExtensions.ToCss(AngleSharp.IStyleFormattable,System.IO.TextWriter)">
            <summary>
            Writes the serialization of the node guided by the formatter.
            </summary>
            <param name="style">The style node to format.</param>
            <param name="writer">The output target of the serialization.</param>
        </member>
        <member name="M:AngleSharp.FormatExtensions.ToHtml(AngleSharp.IMarkupFormattable)">
            <summary>
            Returns the (complete) HTML markup representation of the node.
            </summary>
            <param name="markup">The markup node to format.</param>
            <returns>The source code snippet.</returns>
        </member>
        <member name="M:AngleSharp.FormatExtensions.ToHtml(AngleSharp.IMarkupFormattable,AngleSharp.IMarkupFormatter)">
            <summary>
            Returns the serialization of the node guided by the formatter.
            </summary>
            <param name="markup">The markup node to format.</param>
            <param name="formatter">The formatter to use.</param>
            <returns>The source code snippet.</returns>
        </member>
        <member name="M:AngleSharp.FormatExtensions.ToHtml(AngleSharp.IMarkupFormattable,System.IO.TextWriter)">
            <summary>
            Writes the serialization of the node guided by the formatter.
            </summary>
            <param name="markup">The markup node to format.</param>
            <param name="writer">The output target of the serialization.</param>
        </member>
        <member name="T:AngleSharp.Html.DefaultInputTypeFactory">
            <summary>
            Provides string to InputType instance mappings.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.DefaultInputTypeFactory.Creator">
            <summary>
            Represents a creator delegate for creating input type providers.
            </summary>
            <param name="input">The input to create the provider for.</param>
            <returns>The created input type provider.</returns>
        </member>
        <member name="M:AngleSharp.Html.DefaultInputTypeFactory.Register(System.String,AngleSharp.Html.DefaultInputTypeFactory.Creator)">
            <summary>
            Registers a new creator for the specified input type.
            Throws an exception if another creator for the given
            input type is already added.
            </summary>
            <param name="type">The input type value.</param>
            <param name="creator">The creator to invoke.</param>
        </member>
        <member name="M:AngleSharp.Html.DefaultInputTypeFactory.Unregister(System.String)">
            <summary>
            Unregisters an existing creator for the given input type.
            </summary>
            <param name="type">The input type value.</param>
            <returns>The registered creator, if any.</returns>
        </member>
        <member name="M:AngleSharp.Html.DefaultInputTypeFactory.CreateDefault(AngleSharp.Html.Dom.IHtmlInputElement,System.String)">
            <summary>
            Creates the default InputType provider for the given input element
            and input type. By default this is the text input type.
            </summary>
            <param name="input">The input element.</param>
            <param name="type">The current value of the type attribute.</param>
            <returns>The InputType provider instance.</returns>
        </member>
        <member name="M:AngleSharp.Html.DefaultInputTypeFactory.Create(AngleSharp.Html.Dom.IHtmlInputElement,System.String)">
            <summary>
            Creates an InputType provider for the provided element.
            </summary>
            <param name="input">The input element.</param>
            <param name="type">The current value of the type attribute.</param>
            <returns>The InputType provider instance.</returns>
        </member>
        <member name="T:AngleSharp.Html.DefaultLinkRelationFactory">
            <summary>
            Provides string to Relation instance mappings.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.DefaultLinkRelationFactory.Creator">
            <summary>
            Represents a creator delegate for creating link relation providers.
            </summary>
            <param name="link">The link to create the provider for.</param>
            <returns>The created link relation provider.</returns>
        </member>
        <member name="M:AngleSharp.Html.DefaultLinkRelationFactory.Register(System.String,AngleSharp.Html.DefaultLinkRelationFactory.Creator)">
            <summary>
            Registers a new creator for the specified relation.
            Throws an exception if another creator for the given
            relation is already added.
            </summary>
            <param name="rel">The relation value.</param>
            <param name="creator">The creator to invoke.</param>
        </member>
        <member name="M:AngleSharp.Html.DefaultLinkRelationFactory.Unregister(System.String)">
            <summary>
            Unregisters an existing creator for the given relation.
            </summary>
            <param name="rel">The relation value.</param>
            <returns>The registered creator, if any.</returns>
        </member>
        <member name="M:AngleSharp.Html.DefaultLinkRelationFactory.CreateDefault(AngleSharp.Html.Dom.IHtmlLinkElement,System.String)">
            <summary>
            Creates the default LinkRel provider for the given link element
            and relation. By default this is null.
            </summary>
            <param name="link">The link element.</param>
            <param name="rel">The current value of the rel attribute.</param>
            <returns>The LinkRel provider instance or null.</returns>
        </member>
        <member name="M:AngleSharp.Html.DefaultLinkRelationFactory.Create(AngleSharp.Html.Dom.IHtmlLinkElement,System.String)">
            <summary>
            Creates an LinkRel provider for the provided element.
            </summary>
            <param name="link">The link element.</param>
            <param name="rel">The current value of the rel attribute.</param>
            <returns>The LinkRel provider instance or null.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.CompositionEvent">
            <summary>
            Represents the event arguments for a composed event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.CompositionEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.CompositionEvent.#ctor(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.String)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="data">Sets the data to carry.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.CompositionEvent.Data">
            <summary>
            Gets the associated data.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.CompositionEvent.Init(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.String)">
            <summary>
            Initializes the composition event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="data">Sets the data to carry.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.HtmlErrorEvent">
            <summary>
            The event that is published in case of an HTML parse error.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.HtmlErrorEvent.#ctor(AngleSharp.Html.Parser.HtmlParseError,AngleSharp.Text.TextPosition)">
            <summary>
            Creates a new HtmlParseErrorEvent event.
            </summary>
            <param name="code">The provided error code.</param>
            <param name="position">The position in the source.</param>
            
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.HtmlErrorEvent.Position">
            <summary>
            Gets the position of the error.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.HtmlErrorEvent.Code">
            <summary>
            Gets the provided error code.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.HtmlErrorEvent.Message">
            <summary>
            Gets the associated error message.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.HtmlParseEvent">
            <summary>
            The event that is published in case of starting HTML parsing.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.HtmlParseEvent.#ctor(AngleSharp.Html.Dom.IHtmlDocument,System.Boolean)">
            <summary>
            Creates a new event for starting HTML parsing.
            </summary>
            <param name="document">The document to be filled.</param>
            <param name="completed">Determines if parsing is done.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.HtmlParseEvent.Document">
            <summary>
            Gets the document, which is to be filled.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.InputEvent">
            <summary>
            Represents the event arguments for an input event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.InputEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.InputEvent.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="data">Sets the data for the input event.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.InputEvent.Data">
            <summary>
            Gets the data that has been entered.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.InputEvent.Init(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes the input event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="data">Sets the data for the input event.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.ITouchList">
            <summary>
            Represents a list with touch points.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchList.Length">
            <summary>
            Gets the number of contained touch points.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchList.Item(System.Int32)">
            <summary>
            Gets the data of the touch point at the given index.
            </summary>
            <param name="index">The index of the touch point.</param>
            <returns>The touch point at the index.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.ITouchPoint">
            <summary>
            Represents the interface for the data of a single touch point.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchPoint.Id">
            <summary>
            Gets the id of the touch point.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchPoint.Target">
            <summary>
            Gets the target of the touch point.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchPoint.ScreenX">
            <summary>
            Gets the x-coordinate relative to the screen.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchPoint.ScreenY">
            <summary>
            Gets the y-coordinate relative to the screen.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchPoint.ClientX">
            <summary>
            Gets the x-coordinate relative to the client.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchPoint.ClientY">
            <summary>
            Gets the y-coordinate relative to the client.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchPoint.PageX">
            <summary>
            Gets the x-coordinate relative to the page.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.ITouchPoint.PageY">
            <summary>
            Gets the y-coordinate relative to the page.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.KeyboardEvent">
            <summary>
            Represents the event arguments for a keyboard event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.KeyboardEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.KeyboardEvent.#ctor(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,System.String,AngleSharp.Html.Dom.Events.KeyboardLocation,System.String,System.Boolean)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UI event.</param>
            <param name="key">Sets the key that is currently pressed.</param>
            <param name="location">Sets the position of the originating keyboard.</param>
            <param name="modifiersList">A list with keyboard modifiers that have been pressed.</param>
            <param name="repeat">Sets if the key has been pressed again.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.KeyboardEvent.Key">
            <summary>
            Gets string representation of the pressed key.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.KeyboardEvent.Location">
            <summary>
            Gets the location of the keyboard that initiated the event.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.KeyboardEvent.IsCtrlPressed">
            <summary>
            Gets if the control key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.KeyboardEvent.IsShiftPressed">
            <summary>
            Gets if the shift key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.KeyboardEvent.IsAltPressed">
            <summary>
            Gets if the alt key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.KeyboardEvent.IsMetaPressed">
            <summary>
            Gets if the meta key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.KeyboardEvent.IsRepeated">
            <summary>
            Gets if the key press was repeated.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.KeyboardEvent.GetModifierState(System.String)">
            <summary>
            Returns the current state of the specified modifier key.
            </summary>
            <param name="key">The modifier key to lookup.</param>
            <returns>True if the key is currently pressed, otherwise false.</returns>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.KeyboardEvent.Locale">
            <summary>
            Gets the locale of the keyboard.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.KeyboardEvent.Init(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,System.String,AngleSharp.Html.Dom.Events.KeyboardLocation,System.String,System.Boolean)">
            <summary>
            Initializes the keyboard event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UI event.</param>
            <param name="key">Sets the key that is currently pressed.</param>
            <param name="location">Sets the position of the originating keyboard.</param>
            <param name="modifiersList">A list with keyboard modifiers that have been pressed.</param>
            <param name="repeat">Sets if the key has been pressed again.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.KeyboardLocation">
            <summary>
            An enumeration over all possible keyboard locations.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.KeyboardLocation.Standard">
            <summary>
            The standard location.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.KeyboardLocation.Left">
            <summary>
            The left location.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.KeyboardLocation.Right">
            <summary>
            The right location.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.KeyboardLocation.NumPad">
            <summary>
            The location of the numpad.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.ModifierExtensions">
            <summary>
            A couple of useful extensions for the modifier list.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.MouseButton">
            <summary>
            All possible mouse button values that may appear in UI events.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.MouseButton.Primary">
            <summary>
            The primary button of the device. In general, the left button or the only button on single-button
            devices, used to activate a user interface control or select text.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.MouseButton.Auxiliary">
            <summary>
            The auxiliary button. In general, the middle button, often combined with a mouse wheel.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.MouseButton.Secondary">
            <summary>
            The secondary button. In general, the right button, often used to display a context menu.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.MouseButtons">
            <summary>
            All possible mouse button values that are currently pressed.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.MouseButtons.None">
            <summary>
            No buttons currently pressed.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.MouseButtons.Primary">
            <summary>
            The primary button of the device. In general, the left button or the only button on single-button
            devices, used to activate a user interface control or select text.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.MouseButtons.Secondary">
            <summary>
            The secondary button. In general, the right button, often used to display a context menu.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.MouseButtons.Auxiliary">
            <summary>
            The auxiliary button. In general, the middle button, often combined with a mouse wheel.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.MouseEvent">
            <summary>
            Represents the event args for a mouse event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.MouseEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.MouseEvent.#ctor(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,AngleSharp.Html.Dom.Events.MouseButton,AngleSharp.Dom.IEventTarget)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UI event.</param>
            <param name="screenX">Sets the screen X coordinate.</param>
            <param name="screenY">Sets the screen Y coordinate.</param>
            <param name="clientX">Sets the client X coordinate.</param>
            <param name="clientY">Sets the client Y coordinate.</param>
            <param name="ctrlKey">Sets if the control key was pressed.</param>
            <param name="altKey">Sets if the alt key was pressed.</param>
            <param name="shiftKey">Sets if the shift key was pressed.</param>
            <param name="metaKey">Sets if the meta key was pressed.</param>
            <param name="button">Sets which button has been pressed.</param>
            <param name="relatedTarget">The target of the mouse event.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.ScreenX">
            <summary>
            Gets the screen X coordinates.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.ScreenY">
            <summary>
            Gets the screen Y coordinates.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.ClientX">
            <summary>
            Gets the client X coordinates.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.ClientY">
            <summary>
            Gets the client Y coordinates.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.IsCtrlPressed">
            <summary>
            Gets if the control key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.IsShiftPressed">
            <summary>
            Gets if the shift key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.IsAltPressed">
            <summary>
            Gets if the alt key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.IsMetaPressed">
            <summary>
            Gets if the meta key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.Button">
            <summary>
            Gets which button has been pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.Buttons">
            <summary>
            Gets the currently pressed buttons.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.MouseEvent.Target">
            <summary>
            Gets the target of the mouse event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.MouseEvent.GetModifierState(System.String)">
            <summary>
            Returns the current state of the specified modifier key.
            </summary>
            <param name="key">The modifier key to lookup.</param>
            <returns>True if the key is currently pressed, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.MouseEvent.Init(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,AngleSharp.Html.Dom.Events.MouseButton,AngleSharp.Dom.IEventTarget)">
            <summary>
            Initializes the mouse event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UIevent.</param>
            <param name="screenX">Sets the screen X coordinate.</param>
            <param name="screenY">Sets the screen Y coordinate.</param>
            <param name="clientX">Sets the client X coordinate.</param>
            <param name="clientY">Sets the client Y coordinate.</param>
            <param name="ctrlKey">Sets if the control key was pressed.</param>
            <param name="altKey">Sets if the alt key was pressed.</param>
            <param name="shiftKey">Sets if the shift key was pressed.</param>
            <param name="metaKey">Sets if the meta key was pressed.</param>
            <param name="button">Sets which button has been pressed.</param>
            <param name="target">The target of the mouse event.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.TouchEvent">
            <summary>
            Represents the event arguments for a touch event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.TouchEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.TouchEvent.#ctor(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,AngleSharp.Html.Dom.Events.ITouchList,AngleSharp.Html.Dom.Events.ITouchList,AngleSharp.Html.Dom.Events.ITouchList,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UIevent.</param>
            <param name="touches">The list of active touches.</param>
            <param name="targetTouches">The list of target-active toches.</param>
            <param name="changedTouches">The list of changed touches.</param>
            <param name="ctrlKey">Sets if the control key was pressed.</param>
            <param name="altKey">Sets if the alt key was pressed.</param>
            <param name="shiftKey">Sets if the shift key was pressed.</param>
            <param name="metaKey">Sets if the meta key was pressed.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.TouchEvent.Touches">
            <summary>
            Gets a list with all active touch points.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.TouchEvent.TargetTouches">
            <summary>
            Gets a list with touch points over the target.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.TouchEvent.ChangedTouches">
            <summary>
            Gets a list with changed touch points.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.TouchEvent.IsAltPressed">
            <summary>
            Gets if the alt key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.TouchEvent.IsMetaPressed">
            <summary>
            Gets if the meta key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.TouchEvent.IsCtrlPressed">
            <summary>
            Gets if the control key is pressed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.TouchEvent.IsShiftPressed">
            <summary>
            Gets if the shift key is pressed.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.TouchEvent.Init(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,AngleSharp.Html.Dom.Events.ITouchList,AngleSharp.Html.Dom.Events.ITouchList,AngleSharp.Html.Dom.Events.ITouchList,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the focus event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UIevent.</param>
            <param name="touches">The list of active touches.</param>
            <param name="targetTouches">The list of target-active toches.</param>
            <param name="changedTouches">The list of changed touches.</param>
            <param name="ctrlKey">Sets if the control key was pressed.</param>
            <param name="altKey">Sets if the alt key was pressed.</param>
            <param name="shiftKey">Sets if the shift key was pressed.</param>
            <param name="metaKey">Sets if the meta key was pressed.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.TrackEvent">
            <summary>
            Represents a track that provides an additional track information.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.TrackEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.TrackEvent.#ctor(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="track">The track object.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.TrackEvent.Track">
            <summary>
            Gets the assigned track object, if any.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.TrackEvent.Init(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Initializes the mouse event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="track">The track object.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.WheelEvent">
            <summary>
            Represents the event args for a mouse wheel event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.WheelEvent.#ctor">
            <summary>
            Creates a new event.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.WheelEvent.#ctor(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngleSharp.Html.Dom.Events.MouseButton,AngleSharp.Dom.IEventTarget,System.String,System.Double,System.Double,System.Double,AngleSharp.Html.Dom.Events.WheelMode)">
            <summary>
            Creates a new event and initializes it.
            </summary>
            <param name="type">The type of the event.</param>
            <param name="bubbles">If the event is bubbling.</param>
            <param name="cancelable">If the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UI event.</param>
            <param name="screenX">Sets the screen X coordinate.</param>
            <param name="screenY">Sets the screen Y coordinate.</param>
            <param name="clientX">Sets the client X coordinate.</param>
            <param name="clientY">Sets the client Y coordinate.</param>
            <param name="button">Sets which button has been pressed.</param>
            <param name="target">The target of the mouse event.</param>
            <param name="modifiersList">A list with keyboard modifiers that have been pressed.</param>
            <param name="deltaX">The mouse wheel delta in X direction.</param>
            <param name="deltaY">The mouse wheel delta in Y direction.</param>
            <param name="deltaZ">The mouse wheel delta in Z direction.</param>
            <param name="deltaMode">The delta mode for the wheel event.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.WheelEvent.DeltaX">
            <summary>
            Gets the mouse wheel delta X.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.WheelEvent.DeltaY">
            <summary>
            Gets the mouse wheel delta Y.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.WheelEvent.DeltaZ">
            <summary>
            Gets the mouse wheel delta Z.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.Events.WheelEvent.DeltaMode">
            <summary>
            Gets the mouse wheel delta mode.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.Events.WheelEvent.Init(System.String,System.Boolean,System.Boolean,AngleSharp.Dom.IWindow,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngleSharp.Html.Dom.Events.MouseButton,AngleSharp.Dom.IEventTarget,System.String,System.Double,System.Double,System.Double,AngleSharp.Html.Dom.Events.WheelMode)">
            <summary>
            Initializes the mouse wheel event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="bubbles">Determines if the event bubbles.</param>
            <param name="cancelable">Determines if the event is cancelable.</param>
            <param name="view">Sets the associated view for the UI event.</param>
            <param name="detail">Sets the detail id for the UIevent.</param>
            <param name="screenX">Sets the screen X coordinate.</param>
            <param name="screenY">Sets the screen Y coordinate.</param>
            <param name="clientX">Sets the client X coordinate.</param>
            <param name="clientY">Sets the client Y coordinate.</param>
            <param name="button">Sets which button has been pressed.</param>
            <param name="target">The target of the mouse event.</param>
            <param name="modifiersList">A list with keyboard modifiers that have been pressed.</param>
            <param name="deltaX">The mouse wheel delta in X direction.</param>
            <param name="deltaY">The mouse wheel delta in Y direction.</param>
            <param name="deltaZ">The mouse wheel delta in Z direction.</param>
            <param name="deltaMode">The delta mode for the wheel event.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.Events.WheelMode">
            <summary>
            Enumeration with the various mouse wheel modes.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.WheelMode.Pixel">
            <summary>
            The unit of change is pixels.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.WheelMode.Line">
            <summary>
            The unit of change is lines.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Events.WheelMode.Page">
            <summary>
            The unit of change is pages.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.FormExtensions">
            <summary>
            A set of useful extension methods when dealing with the DOM.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.FormExtensions.SetValues(AngleSharp.Html.Dom.IHtmlFormElement,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Set the field values of given form by using the dictionary which
            contains name value pairs of input fields.
            </summary>
            <param name="form">The form to set.</param>
            <param name="fields">The fields to use as values.</param>
            <param name="createMissing">
            What to do if some field(s) have not been found in the form. If
            true, then new input will be created. Otherwise, an exception will
            be thrown.
            </param>
            <returns>The given form for chaining.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.FormExtensions.SubmitAsync(AngleSharp.Html.Dom.IHtmlFormElement,System.Object)">
            <summary>
            Submits the given form by decomposing the object into a dictionary
            that contains its properties as name value pairs.
            </summary>
            <param name="form">The form to submit.</param>
            <param name="fields">The fields to use as values.</param>
            <returns>The task eventually resulting in the response.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.FormExtensions.SubmitAsync(AngleSharp.Html.Dom.IHtmlFormElement,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Submits the given form by using the dictionary which contains name
            value pairs of input fields to submit.
            </summary>
            <param name="form">The form to submit.</param>
            <param name="fields">The fields to use as values.</param>
            <param name="createMissing">
            What to do if some field(s) have not been found in the form. If
            true, then new input will be created. Otherwise, an exception will
            be thrown.
            </param>
            <returns>The task eventually resulting in the response.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.FormExtensions.SubmitAsync(AngleSharp.Html.Dom.IHtmlElement,System.Object)">
            <summary>
            Submits the form of the element by decomposing the object into a dictionary
            that contains its properties as name value pairs.
            </summary>
            <param name="element">The element to submit its form.</param>
            <param name="fields">The optional fields to use as values.</param>
            <returns>The task eventually resulting in the response.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.FormExtensions.SubmitAsync(AngleSharp.Html.Dom.IHtmlElement,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Submits the form of the element by using the dictionary which contains name
            value pairs of input fields to submit.
            </summary>
            <param name="element">The element to submit its form.</param>
            <param name="fields">The fields to use as values.</param>
            <param name="createMissing">
            What to do if some field(s) have not been found in the form. If
            true, then new input will be created. Otherwise, an exception will
            be thrown.
            </param>
            <returns>The task eventually resulting in the response.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlAnchorElement">
            <summary>
            Represents the a HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAnchorElement.Target">
            <summary>
            Gets or sets the name of the target frame to which the resource applies.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAnchorElement.Download">
            <summary>
            Gets or sets the linked resource is intended to be downloaded rather than displayed.
            The value represent the proposed name of the file. If the name is not a valid filename of the
            underlying OS, the navigator will adapt it.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAnchorElement.Ping">
            <summary>
            Gets the element's ping attribute as a settable list of tokens.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAnchorElement.Relation">
            <summary>
            Gets or sets the rel HTML attribute, specifying the relationship
            of the target object to the link object.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAnchorElement.RelationList">
            <summary>
            Gets the rel HTML attribute, as a list of tokens.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAnchorElement.TargetLanguage">
            <summary>
            Gets or sets the language code for the linked resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAnchorElement.Type">
            <summary>
            Gets or sets the type of the resource. If present, the attribute must be a valid MIME type.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAnchorElement.Text">
            <summary>
            Gets the text of the anchor tag (same as TextContent).
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlAreaElement">
            <summary>
            Represents the area HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.AlternativeText">
            <summary>
            Gets or sets the alternative text for the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.Coordinates">
            <summary>
            Gets or sets the coordinates to define the hot-spot region.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.Shape">
            <summary>
            Gets or sets the shape of the hot-spot, limited to known values.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.Target">
            <summary>
            Gets or sets the browsing context in which to open the linked resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.Download">
            <summary>
            Gets or sets the linked resource is intended to be downloaded rather than displayed.
            The value represent the proposed name of the file. If the name is not a valid filename of the
            underlying OS, the navigator will adapt it.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.Ping">
            <summary>
            Gets the ping HTML attribute, as a settable list of otkens.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.Relation">
            <summary>
            Gets or sets the value indicating relationships of the
            current document to the linked resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.RelationList">
            <summary>
            Gets the value indicating relationships of the current
            document to the linked resource, as a list of tokens.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.TargetLanguage">
            <summary>
            Gets or sets the language of the linked resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlAreaElement.Type">
            <summary>
            Gets or sets the MIME type of the linked resource.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlAudioElement">
            <summary>
            Represents the audio HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlBaseElement">
            <summary>
            Represents the base HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlBaseElement.Href">
            <summary>
            Gets or sets the hyperreference to the base URL.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlBaseElement.Target">
            <summary>
            Gets or sets the base target.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlBodyElement">
            <summary>
            Represents the body HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlBreakRowElement">
            <summary>
            Represents the br HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlButtonElement">
            <summary>
            Represents the button HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.Autofocus">
            <summary>
            Gets or sets the autofocus HTML attribute, which indicates whether the
            control should have input focus when the page loads.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.IsDisabled">
            <summary>
            Gets or sets if the button is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.Labels">
            <summary>
            Gets the list of assigned labels.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.Type">
            <summary>
            Gets or sets the type of button.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.FormAction">
            <summary>
            Gets or sets the URI of a resource that processes information submitted by the button.
            If specified, this attribute overrides the action attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.FormEncType">
            <summary>
            Gets or sets the type of content that is used to submit the form to the server. If specified, this
            attribute overrides the enctype attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.FormMethod">
            <summary>
            Gets or sets the HTTP method that the browser uses to submit the form. If specified, this attribute
            overrides the method attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.FormNoValidate">
            <summary>
            Gets or sets that the form is not to be validated when it is submitted. If specified, this attribute
            overrides the enctype attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlButtonElement.FormTarget">
            <summary>
            Gets or sets A name or keyword indicating where to display the response that is received after submitting
            the form. If specified, this attribute overrides the target attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlCanvasElement">
            <summary>
            Represents the canvas HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCanvasElement.Width">
            <summary>
            Gets or sets the pixel width of the canvas element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCanvasElement.Height">
            <summary>
            Gets or sets the pixel height of the canvas element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlCanvasElement.ToDataUrl(System.String)">
            <summary>
            Returns a Data URI with the bitmap data of the context.
            </summary>
            <param name="type">The type of image e.g image/png.</param>
            <returns>A data URI with the data if any.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlCanvasElement.ToBlob(System.Action{System.IO.Stream},System.String)">
            <summary>
            Creates a BLOB out of the canvas pixel data and passes it
            to the given callback.
            </summary>
            <param name="callback">The callback function.</param>
            <param name="type">The type of object to create.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlCanvasElement.GetContext(System.String)">
            <summary>
            Gets the drawing context.
            </summary>
            <param name="contextId">A context id like 2d.</param>
            <returns>An object that defines the drawing context.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlCanvasElement.SetContext(AngleSharp.Media.Dom.IRenderingContext)">
            <summary>
            Changes the context the element is related to the given one.
            </summary>
            <param name="context">The new context.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlCanvasElement.IsSupportingContext(System.String)">
            <summary>
            Gets an indicator if a context with the given parameters could be created.
            </summary>
            <param name="contextId">A context id like 2d.</param>
            <returns>True if the context is supported, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlCommandElement">
            <summary>
            Represents the command HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCommandElement.Type">
            <summary>
            Gets or sets the type of command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCommandElement.Label">
            <summary>
            Gets or sets the assigned label.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCommandElement.Icon">
            <summary>
            Gets or sets the icon of the command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCommandElement.IsDisabled">
            <summary>
            Gets or sets if the command is disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCommandElement.IsChecked">
            <summary>
            Gets or sets if the command is checked.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCommandElement.RadioGroup">
            <summary>
            Gets or sets the id of the radio group of the command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlCommandElement.Command">
            <summary>
            Gets the assigned element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlDataElement">
            <summary>
            Represents the data HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlDataElement.Value">
            <summary>
            Gets or sets the machine readable value.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlDataListElement">
            <summary>
            Represents the datalist HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlDataListElement.Options">
            <summary>
            Gets the associated options.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlDetailsElement">
            <summary>
            Represents the details HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlDetailsElement.IsOpen">
            <summary>
            Gets or sets if the element is opened.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlDialogElement">
            <summary>
            Repesents the dialog HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlDialogElement.Open">
            <summary>
            Gets or sets if the dialog is open.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlDialogElement.ReturnValue">
            <summary>
            Gets or sets the return value of the dialog.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlDialogElement.Show(AngleSharp.Dom.IElement)">
            <summary>
            Shows the dialog, optionally anchored to the element.
            </summary>
            <param name="anchor">The element, where the dialog is anchored.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlDialogElement.ShowModal(AngleSharp.Dom.IElement)">
            <summary>
            Shows the dialog modally, optionally anchored to the element.
            </summary>
            <param name="anchor">The element, where the dialog is anchored.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlDialogElement.Close(System.String)">
            <summary>
            Closes the dialog.
            </summary>
            <param name="returnValue">The return value to set.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlDivElement">
            <summary>
            Represents the div HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlDocument">
            <summary>
            Serves as an entry point to the content of an HTML document.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlElement">
            <summary>
            The HTMLElement interface represents any HTML element. Some elements directly
            implement this interface, other implement it via an interface that inherit it.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.Language">
            <summary>
            Gets or sets the value of the lang attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.Title">
            <summary>
            Gets or sets the value of the title attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.Direction">
            <summary>
            Gets or sets the value of the dir attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.Dataset">
            <summary>
            Gets access to all the custom data attributes (data-*) set on the element. It is a map of DOMString,
            one entry for each custom data attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.IsTranslated">
            <summary>
            Gets or sets if the element should be translated.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.TabIndex">
            <summary>
            Gets or sets the position of the element in the tabbing order.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.IsSpellChecked">
            <summary>
            Gets or sets if spell-checking is activated.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.ContentEditable">
            <summary>
            Gets or sets whether or not the element is editable. This enumerated
            attribute can have the values true, false and inherited.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.IsContentEditable">
            <summary>
            Gets if the element is currently contenteditable.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.IsHidden">
            <summary>
            Gets or sets if the element is hidden.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.IsDraggable">
            <summary>
            Gets or sets if the element is draggable.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.AccessKey">
            <summary>
            Gets or sets the access key assigned to the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.AccessKeyLabel">
            <summary>
            Gets the element's assigned access key.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.ContextMenu">
            <summary>
            Gets or sets the assigned context menu.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlElement.DropZone">
            <summary>
            Gets the dropzone for this element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlElement.DoClick">
            <summary>
            Simulates a mouse click on an element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlElement.DoFocus">
            <summary>
            Puts the keyboard focus on the given element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlElement.DoBlur">
            <summary>
            Removes the keyboard focus on the given element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlElement.DoSpellCheck">
            <summary>
            Forces the invocation of a spell check on the content.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlEmbedElement">
            <summary>
            The embed HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlEmbedElement.Source">
            <summary>
            Gets or sets the source of the object to embed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlEmbedElement.Type">
            <summary>
            Gets or sets the type of the embedded object.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlEmbedElement.DisplayWidth">
            <summary>
            Gets or sets the display width of the object.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlEmbedElement.DisplayHeight">
            <summary>
            Gets or sets the display height of the object.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlFieldSetElement">
            <summary>
            Represents the fieldset HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFieldSetElement.IsDisabled">
            <summary>
            Gets or sets if the element is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFieldSetElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFieldSetElement.Name">
            <summary>
            Gets or sets the value of the name attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFieldSetElement.Type">
            <summary>
            Gets the type of input control (fieldset).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFieldSetElement.Elements">
            <summary>
            Gets the elements belonging to this field set.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlFormControlsCollection">
            <summary>
            Represents a collection of HTML form controls.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlFormElement">
            <summary>
            Represents the form HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.AcceptCharset">
            <summary>
            Gets or sets the character encodings that are to be used for the submission.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Action">
            <summary>
            Gets or sets the form's name within the forms collection.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Autocomplete">
            <summary>
            Gets or sets if autocomplete is turned on or off.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Enctype">
            <summary>
            Gets or sets the encoding to use for sending the form.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Encoding">
            <summary>
            Gets or sets the encoding to use for sending the form.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Method">
            <summary>
            Gets or sets the method to use for transmitting the form.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Name">
            <summary>
            Gets or sets the value of the name attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.NoValidate">
            <summary>
            Gets or sets the indicator that the form is not to be validated during submission.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Target">
            <summary>
            Gets or sets the target name of the response to the request.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Length">
            <summary>
            Gets the number of elements in the Elements collection.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Elements">
            <summary>
            Gets all the form controls belonging to this form element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlFormElement.SubmitAsync">
            <summary>
            Submits the form element from the form element itself.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlFormElement.SubmitAsync(AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            Submits the form element as triggered from another element.
            </summary>
            <param name="sourceElement">The form's submitter.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlFormElement.GetSubmission">
            <summary>
            Creates the document request from the form submitting itself.
            </summary>
            <returns>The resulting document (e.g., HTTP) request.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlFormElement.GetSubmission(AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            Creates the document request from the form by submitting by
            some element.
            </summary>
            <param name="sourceElement">The form's submitter.</param>
            <returns>The resulting document (e.g., HTTP) request.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlFormElement.Reset">
            <summary>
            Resets the form to the previous (default) state.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlFormElement.CheckValidity">
            <summary>
            Checks if the form is valid, i.e. if all fields fulfill their requirements.
            </summary>
            <returns>True if the form is valid, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlFormElement.ReportValidity">
            <summary>
            Reports the current validity state after checking the current state
            interactively the constraints of the form element.
            </summary>
            <returns>True if the form element is valid, otherwise false.</returns>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Item(System.Int32)">
            <summary>
            Gets the form element at the specified index.
            </summary>
            <param name="index">The index in the elements collection.</param>
            <returns>The element or null.</returns>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlFormElement.Item(System.String)">
            <summary>
            Gets the form element(s) with the specified name.
            </summary>
            <param name="name">The name or id of the element.</param>
            <returns>A collection with elements, an element or null.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlFormElement.RequestAutocomplete">
            <summary>
            Requests the input fields to be automatically filled with previous entries.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlHeadElement">
            <summary>
            Represents the head HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlHeadingElement">
            <summary>
            Represents the heading HTML element(s).
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlHrElement">
            <summary>
            Represents the hr HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlHtmlElement">
            <summary>
            Represents the html HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlHtmlElement.Manifest">
            <summary>
            Gets or sets the value of the manifest attribute.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlImageElement">
            <summary>
            Represents the image HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.AlternativeText">
            <summary>
            Gets or sets the alternative text.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.ActualSource">
            <summary>
            Gets the actual used image source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.SourceSet">
            <summary>
            Gets or sets the image candidates for higher density images.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.Sizes">
            <summary>
            Gets or sets the sizes to responsively.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.CrossOrigin">
            <summary>
            Gets or sets the cross-origin attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.UseMap">
            <summary>
            Gets or sets the usemap attribute, which indicates that the image
            has an associated image map.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.IsMap">
            <summary>
            Gets or sets if the image element is a map. The attribute must not
            be specified on an element that does not have an ancestor a
            element with an href attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.DisplayWidth">
            <summary>
            Gets or sets the displayed width of the image element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.DisplayHeight">
            <summary>
            Gets or sets the displayed width of the image element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.OriginalWidth">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.OriginalHeight">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlImageElement.IsCompleted">
            <summary>
            Gets if the image is completely available.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlInlineFrameElement">
            <summary>
            Represents the iframe HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.Source">
            <summary>
            Gets or sets the frame source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.ContentHtml">
            <summary>
            Gets the content of the page that the nested browsing context is to contain.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.Name">
            <summary>
            Gets or sets the name of the frame.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.Sandbox">
            <summary>
            Gets the tokens of the sandbox attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.IsSeamless">
            <summary>
            Gets or sets if the seamless attribute has been set.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.IsFullscreenAllowed">
            <summary>
            Gets or sets if the frame's content can trigger the fullscreen mode.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.IsPaymentRequestAllowed">
            <summary>
            Gets or sets if the frame's content can trigger a payment request.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.ReferrerPolicy">
            <summary>
            Gets or sets the frame's referrer policy.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.DisplayWidth">
            <summary>
            Gets or sets the display width of the frame.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.DisplayHeight">
            <summary>
            Gets or sets the display height of the frame.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.ContentDocument">
            <summary>
            Gets the document this frame contains, if there is any.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInlineFrameElement.ContentWindow">
            <summary>
            Gets the frame's parent's window context.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlInputElement">
            <summary>
            Represents the input HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Autofocus">
            <summary>
            Gets or sets the autofocus HTML attribute, which indicates whether
            the control should have input focus when the page loads.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Accept">
            <summary>
            Gets or sets the accept HTML attribute, containing comma-separated 
            list of file types accepted by the server when type is file.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Autocomplete">
            <summary>
            Gets or sets the autocomplete HTML attribute, indicating whether
            the value of the control can be automatically completed by the
            browser. Ignored if the value of the type attribute is hidden,
            checkbox, radio, file, or a button type (button, submit, reset,
            image).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.IsDisabled">
            <summary>
            Gets or sets if the textarea is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Labels">
            <summary>
            Gets the list of assigned labels.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Files">
            <summary>
            Gets a list of selected files.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Type">
            <summary>
            Gets or sets the type of input control.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.IsRequired">
            <summary>
            Gets or sets if the field is required.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.IsReadOnly">
            <summary>
            Gets or sets if the field is read-only.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.AlternativeText">
            <summary>
            Gets or sets the alternative text.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Maximum">
            <summary>
            Gets or sets max HTML attribute, containing the maximum (numeric
            or date-time) value for this item, which must not be less than its
            minimum (min attribute) value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Minimum">
            <summary>
            Gets or sets the min HTML attribute, containing the minimum (numeric
            or date-time) value for this item, which must not be greater than
            its maximum (max attribute) value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Pattern">
            <summary>
            Gets or sets the pattern HTML attribute, containing a regular 
            expression that the control's value is checked against. The pattern
            must match the entire value, not just some subset. This attribute
            applies when the value of the type attribute is text, search, tel, 
            url or email; otherwise it is ignored.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Step">
            <summary>
            Gets or sets the step HTML attribute, which works with min and max 
            to limit the increments at which a numeric or date-time value can be
            set. It can be the string any or a positive floating point number. 
            If this is not set to any, the control accepts only values at 
            multiples of the step value greater than the minimum.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlInputElement.StepUp(System.Int32)">
            <summary>
            Increments the value by (step * n), where n defaults to 1 if not
            specified.
            </summary>
            <param name="n">Optional: The number of steps to take.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlInputElement.StepDown(System.Int32)">
            <summary>
            Decrements the value by (step * n), where n defaults to 1 if not 
            specified. 
            </summary>
            <param name="n">Optional: The number of steps to take.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.List">
            <summary>
            Gets the datalist element in the same document. Only options that
            are valid values for this input element will be displayed. This 
            attribute is ignored when the type attribute's value is hidden, 
            checkbox, radio, file, or a button type.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.FormAction">
            <summary>
            Gets or sets the URI of a resource that processes information 
            submitted by the button. If specified, this attribute overrides the
            action attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.FormEncType">
            <summary>
            Gets or sets the type of content that is used to submit the form to
            the server. If specified, this attribute overrides the enctype
            attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.FormMethod">
            <summary>
            Gets or sets the HTTP method that the browser uses to submit the
            form. If specified, this attribute overrides the method attribute
            of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.FormNoValidate">
            <summary>
            Gets or sets that the form is not to be validated when it is
            submitted. If specified, this attribute overrides the enctype 
            attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.FormTarget">
            <summary>
            Gets or sets A name or keyword indicating where to display the 
            response that is received after submitting the form. If specified,
            this attribute overrides the target attribute of the form element
            that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.HasValue">
            <summary>
            Gets if the input field has a value (via attribute or directly).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.ValueAsNumber">
            <summary>
            Gets or sets the value of the element, interpreted as one of the
            following in order:
            1.) Time value 
            2.) Number 
            3.) otherwise NaN.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.ValueAsDate">
            <summary>
            Gets or sets the value of the element, interpreted as a date, or
            null if conversion is not possible.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.IsIndeterminate">
            <summary>
            Gets or sets if the state if indeterminate.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.IsDefaultChecked">
            <summary>
            Gets or sets
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.IsChecked">
            <summary>
            Gets or sets if the input element is checked or not.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Size">
            <summary>
            Gets or sets the display size of the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.IsMultiple">
            <summary>
            Gets or sets the multiple HTML attribute, whichindicates whether
            multiple items can be selected.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.MaxLength">
            <summary>
            Gets or sets the maxlength HTML attribute, indicating the maximum
            number of characters the user can enter. This constraint is 
            evaluated only when the value changes.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.MinLength">
            <summary>
            Gets or sets the minlength HTML attribute, indicating the minimum
            number of characters the user can enter. This constraint is 
            evaluated only when the value changes.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.Placeholder">
            <summary>
            Gets or sets the placeholder HTML attribute, containing a hint to
            the user about what to enter in the control.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.DisplayWidth">
            <summary>
            Gets or sets the display width of the input element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.DisplayHeight">
            <summary>
            Gets or sets the display height of the input element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.SelectionDirection">
            <summary>
            Gets the direction in which selection occurred. This is "forward" if
            selection was performed in the start-to-end direction of the current
            locale, or "backward" for the opposite direction.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.DirectionName">
            <summary>
            Gets or sets the directionality of the form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.SelectionStart">
            <summary>
            Gets or sets the index of the beginning of selected text. If no 
            text is selected, contains the index of the character that 
            follows the input cursor. On being set, the control behaves as if
            setSelectionRange() had been called with this as the first argument,
            and selectionEnd as the second argument.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlInputElement.SelectionEnd">
            <summary>
            Gets or sets the index of the end of selected text. If no text
            is selected, contains the index of the character that follows the
            input cursor. On being set, the control behaves as if 
            setSelectionRange() had been called with this as the second 
            argument, and selectionStart as the first argument.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlInputElement.SelectAll">
            <summary>
            Selects the contents of the textarea.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlInputElement.Select(System.Int32,System.Int32,System.String)">
            <summary>
            Selects a range of text, and sets selectionStart and selectionEnd.
            If either argument is greater than the length of the value, it is 
            treated as pointing to the end of the value. If end is less than 
            start, then both are treated as the value of end.
            </summary>
            <param name="selectionStart">The start of the selection.</param>
            <param name="selectionEnd">The end of the selection.</param>
            <param name="selectionDirection">
            Optional: The direction of the selection.
            </param>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlKeygenElement">
            <summary>
            Represents the keygen HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlKeygenElement.Autofocus">
            <summary>
            Gets or sets the autofocus HTML attribute, which indicates whether the
            control should have input focus when the page loads.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlKeygenElement.Labels">
            <summary>
            Gets the list of assigned labels.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlKeygenElement.IsDisabled">
            <summary>
            Gets or sets if the keygen is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlKeygenElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlKeygenElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlKeygenElement.Type">
            <summary>
            Gets the type of input control (keygen).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlKeygenElement.KeyEncryption">
            <summary>
            Gets or sets the type of encryption used.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlKeygenElement.Challenge">
            <summary>
            Gets or sets the challenge attribute.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlLabelElement">
            <summary>
            Represents the label HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLabelElement.Form">
            <summary>
            Gets the form element that the label is assigned for, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLabelElement.HtmlFor">
            <summary>
            Gets or sets the ID of the labeled control. Reflects the for attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLabelElement.Control">
            <summary>
            Gets the control that the label is assigned for, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlLegendElement">
            <summary>
            Represents the legend HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLegendElement.Form">
            <summary>
            Gets the associated form element, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlLinkElement">
            <summary>
            Represents a link HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.IsDisabled">
            <summary>
            Gets or sets if the stylesheet is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.Href">
            <summary>
            Gets or sets the URI for the target resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.Relation">
            <summary>
            Gets or sets the forward relationship of the linked resource from the document to the resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.ReverseRelation">
            <summary>
            Gets or sets the reverse relationship of the linked resource from the resource to the document.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.RelationList">
            <summary>
            Gets the list of relations contained in the rel attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.Media">
            <summary>
            Gets or sets the use with one or more target media.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.TargetLanguage">
            <summary>
            Gets or sets the language code for the linked resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.Type">
            <summary>
            Gets or sets the content type of the style sheet language.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.Sizes">
            <summary>
            Gets the list of sizes defined in the sizes attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.Integrity">
            <summary>
            Gets or sets the linked source's integrity, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.CrossOrigin">
            <summary>
            Gets or sets the cross-origin attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlLinkElement.NumberUsedOnce">
            <summary>
            Gets or sets the nonce attribute.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlListItemElement">
            <summary>
            Represents the li HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlListItemElement.Value">
            <summary>
            Gets or sets the value in an ordered list.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlMapElement">
            <summary>
            Represents the map HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMapElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMapElement.Areas">
            <summary>
            Gets a collection representing the area elements
            associated to this map.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMapElement.Images">
            <summary>
            Gets a collection representing the img and object
            elements associated to this element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlMarqueeElement">
            <summary>
            Used to declare properties for the marquee element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMarqueeElement.MinimumDelay">
            <summary>
            Gets the minimum delay in ms.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMarqueeElement.ScrollAmount">
            <summary>
            Gets or sets the amount of scrolling in pixels.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMarqueeElement.ScrollDelay">
            <summary>
            Gets or sets the delay of scrolling in ms.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMarqueeElement.Loop">
            <summary>
            Gets or sets the loop number.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlMediaElement">
            <summary>
            Represents the base for all HTML media elements.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.Source">
            <summary>
            Gets or sets the media source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.CrossOrigin">
            <summary>
            Gets or sets the cross-origin attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.Preload">
            <summary>
            Gets or sets the preload attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.MediaGroup">
            <summary>
            Gets or sets the id of the assigned media group.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.NetworkState">
            <summary>
            Gets the current network state.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.IsSeeking">
            <summary>
            Gets if seeking is currently active.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.CurrentSource">
            <summary>
            Gets the current media source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.MediaError">
            <summary>
            Gets the current media error, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.Controller">
            <summary>
            Gets the current media's controller, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.IsEnded">
            <summary>
            Gets if the media has ended.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.IsAutoplay">
            <summary>
            Gets or sets if the media is automatically played.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.IsLoop">
            <summary>
            Gets or sets if the media should loop.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.IsShowingControls">
            <summary>
            Gets or sets if the controls should be shown to the user.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.IsDefaultMuted">
            <summary>
            Gets or sets if the media is muted by default.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlMediaElement.Load">
            <summary>
            Loads the currently assigned media source.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlMediaElement.CanPlayType(System.String)">
            <summary>
            Checks if the given type can be played.
            </summary>
            <param name="type">The type to check for.</param>
            <returns>One of the following values: probably, maybe or an empty string.</returns>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.StartDate">
            <summary>
            Gets the datetime when the download started.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.AudioTracks">
            <summary>
            Gets a list of contained audio tracks.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.VideoTracks">
            <summary>
            Gets a list of contained video tracks.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMediaElement.TextTracks">
            <summary>
            Gets a list of contained text tracks.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlMediaElement.AddTextTrack(System.String,System.String,System.String)">
            <summary>
            Adds a new text track to the media element.
            </summary>
            <param name="kind">The kind of text track to create.</param>
            <param name="label">The optional label of the track.</param>
            <param name="language">The optional language of the track.</param>
            <returns>The freshly created text track.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlMenuElement">
            <summary>
            Represents the menu HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuElement.Label">
            <summary>
            Gets or sets the text label of the menu element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuElement.Type">
            <summary>
            Gets or sets the type of the menu element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlMenuItemElement">
            <summary>
            Represents the menuitem HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuItemElement.Command">
            <summary>
            Gets the assigned master command, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuItemElement.Type">
            <summary>
            Gets or sets the type of command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuItemElement.Label">
            <summary>
            Gets or sets the user-visible label.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuItemElement.Icon">
            <summary>
            Gets or sets the icon for the command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuItemElement.IsDisabled">
            <summary>
            Gets or sets if the menuitem element is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuItemElement.IsChecked">
            <summary>
            Gets or sets if the menuitem element is checked or not.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuItemElement.IsDefault">
            <summary>
            Gets or sets if the menuitem element is the default command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMenuItemElement.RadioGroup">
            <summary>
            Gets or sets the name of group of commands to
            treat as a radio button group.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlMetaElement">
            <summary>
            Represents the meta HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMetaElement.Name">
            <summary>
            Gets or sets the name of the meta element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMetaElement.HttpEquivalent">
            <summary>
            Gets or sets the value of the equivalent in a meta element, which
            is effective if the server doesn't send a corresponding real header.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMetaElement.Charset">
            <summary>
            Gets or sets the associated charset.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMetaElement.Content">
            <summary>
            Gets or sets the value of the content attribute of the meta element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlMeterElement">
            <summary>
            Represents the meter HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMeterElement.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMeterElement.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMeterElement.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMeterElement.Low">
            <summary>
            Gets or sets the low value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMeterElement.High">
            <summary>
            Gets or sets the high value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlMeterElement.Optimum">
            <summary>
            Gets or sets the optimum value.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlModElement">
            <summary>
            Represents the mod HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlModElement.Citation">
            <summary>
            Gets the cite HTML attribute, containing a URI of a
            resource explaining the change.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlModElement.DateTime">
            <summary>
            Gets the datetime HTML attribute, containing a date-and-time
            string representing a timestamp for the change.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlObjectElement">
            <summary>
            Represents the object HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.Source">
            <summary>
            Gets or sets the address of the resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.Type">
            <summary>
            Gets or sets the type of the resource. If present,
            the attribute must be a valid MIME type.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.TypeMustMatch">
            <summary>
            Gets or sets an attribute whose presence indicates that the resource specified by the data
            attribute is only to be used if the value of the type attribute and the Content-Type of the
            aforementioned resource match.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.UseMap">
            <summary>
            Gets or sets the associated image map of the object if the object element represents an image.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.DisplayWidth">
            <summary>
            Gets or sets the display width of the object element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.DisplayHeight">
            <summary>
            Gets or sets the display height of the object element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.ContentDocument">
            <summary>
            Gets the active document of the object element's nested browsing context, if it has one;
            otherwise returns null.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlObjectElement.ContentWindow">
            <summary>
            Gets the object element's nested browsing context, if it has one; otherwise returns null.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlOptionElement">
            <summary>
            Represents the option HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionElement.IsDisabled">
            <summary>
            Gets or sets if the option is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionElement.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionElement.IsDefaultSelected">
            <summary>
            Gets or sets if the option is selected by default.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionElement.IsSelected">
            <summary>
            Gets or sets if the option is currently selected.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionElement.Text">
            <summary>
            Gets or sets the text of the option.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionElement.Index">
            <summary>
            Gets the index of the option element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlOptionsCollection">
            <summary>
            Represents a collection of HTML option elements.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlOptionsCollection.GetOptionAt(System.Int32)">
            <summary>
            Gets an HTML option element at the specified index.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The option at the given position.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlOptionsCollection.SetOptionAt(System.Int32,AngleSharp.Html.Dom.IHtmlOptionElement)">
            <summary>
            Sets an HTML option element at the specified index.
            </summary>
            <param name="index">The index of the element.</param>
            <param name="option">The option to set at the given position.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlOptionsCollection.Add(AngleSharp.Html.Dom.IHtmlOptionElement,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            Adds an option element to the collection.
            </summary>
            <param name="element">The element to add.</param>
            <param name="before">The optional reference element for inserting.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlOptionsCollection.Add(AngleSharp.Html.Dom.IHtmlOptionsGroupElement,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            Adds an options group element to the collection.
            </summary>
            <param name="element">The element to add.</param>
            <param name="before">The optional reference element for inserting.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlOptionsCollection.Remove(System.Int32)">
            <summary>
            Removes an element from the collection.
            </summary>
            <param name="index">The index of the element of remove.</param>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionsCollection.SelectedIndex">
            <summary>
            Gets or sets the selected index.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlOptionsGroupElement">
            <summary>
            Represents the optgroup HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionsGroupElement.IsDisabled">
            <summary>
            Gets or sets if the optgroup is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOptionsGroupElement.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlOrderedListElement">
            <summary>
            Represents the ol HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOrderedListElement.IsReversed">
            <summary>
            Gets or sets if the order is reversed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOrderedListElement.Start">
            <summary>
            Gets or sets the lowest number.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOrderedListElement.Type">
            <summary>
            Gets or sets the type of enumeration.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlOutputElement">
            <summary>
            Represents the output HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOutputElement.HtmlFor">
            <summary>
            Gets or sets the IDs of the input elements.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOutputElement.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOutputElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOutputElement.Labels">
            <summary>
            Gets the list of assigned labels.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOutputElement.Type">
            <summary>
            Gets the type of input control (output).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOutputElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlOutputElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlParagraphElement">
            <summary>
            Represents the p HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlParamElement">
            <summary>
            Represents the param HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlParamElement.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlParamElement.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlPreElement">
            <summary>
            Represents the pre HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlProgressElement">
            <summary>
            Represents the progress HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlProgressElement.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlProgressElement.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlProgressElement.Position">
            <summary>
            Gets the position.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlQuoteElement">
            <summary>
            Represents the q HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlQuoteElement.Citation">
            <summary>
            Gets or sets the citation of the element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlScriptElement">
            <summary>
            Represents the script HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlScriptElement.Source">
            <summary>
            Gets or sets the source URL of the script.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlScriptElement.IsAsync">
            <summary>
            Gets or sets if the script should be run asynchronously.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlScriptElement.IsDeferred">
            <summary>
            Gets or sets if script execution should be deferred.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlScriptElement.Type">
            <summary>
            Gets or sets the type of script.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlScriptElement.CharacterSet">
            <summary>
            Gets or sets the character set of the script.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlScriptElement.CrossOrigin">
            <summary>
            Gets or sets the cross-origin attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlScriptElement.Text">
            <summary>
            Gets or sets the script's source code.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlScriptElement.Integrity">
            <summary>
            Gets or sets the linked source's integrity, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlSelectElement">
            <summary>
            Represents the select HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Autofocus">
            <summary>
            Gets or sets the autofocus HTML attribute, which indicates whether the
            control should have input focus when the page loads.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.IsDisabled">
            <summary>
            Gets or sets if the button is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Labels">
            <summary>
            Gets the list of assigned labels.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Type">
            <summary>
            Gets the type of input element (select).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.IsRequired">
            <summary>
            Gets or sets if the field is required.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.SelectedOptions">
            <summary>
            Gets the set of options that are selected.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Size">
            <summary>
            Gets or sets the display size of the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Options">
            <summary>
            Gets the set of option elements contained by this element. 
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Length">
            <summary>
            Gets the number of option elements in this select element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.IsMultiple">
            <summary>
            Gets or sets the multiple HTML attribute, whichindicates whether multiple items can be selected.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.SelectedIndex">
            <summary>
            Gets the index of the first selected option element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSelectElement.Item(System.Int32)">
            <summary>
            Gets or sets an HTML option element at the specified index.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The option at the given position.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlSelectElement.AddOption(AngleSharp.Html.Dom.IHtmlOptionElement,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            Adds an option element to the options collection.
            </summary>
            <param name="element">The element to add.</param>
            <param name="before">The optional reference element for inserting.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlSelectElement.AddOption(AngleSharp.Html.Dom.IHtmlOptionsGroupElement,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            Adds an options group element to the options collection.
            </summary>
            <param name="element">The element to add.</param>
            <param name="before">The optional reference element for inserting.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlSelectElement.RemoveOptionAt(System.Int32)">
            <summary>
            Removes an element from the options collection.
            </summary>
            <param name="index">The index of the element of remove.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlSlotElement">
            <summary>
            Represents a slot in the shadow tree.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSlotElement.Name">
            <summary>
            Gets or sets the name attribute.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlSlotElement.GetDistributedNodes">
            <summary>
            Gets the nodes from the distributed nodes of the context.
            </summary>
            <returns>The sequence of distributed nodes.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlSourceElement">
            <summary>
            Represents the source HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSourceElement.Source">
            <summary>
            Gets or sets the URL for a media resource. Is ignored when used for
            the picture element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSourceElement.SourceSet">
            <summary>
            Gets or sets the URL of a picture element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSourceElement.Sizes">
            <summary>
            Gets or sets the sizes if used in conjunction with a picture.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSourceElement.Type">
            <summary>
            Gets or sets the type of the media source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlSourceElement.Media">
            <summary>
            Gets or sets the intended type of the media resource.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlSpanElement">
            <summary>
            Represents the span HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlStyleElement">
            <summary>
            Represents a style HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlStyleElement.IsDisabled">
            <summary>
            Gets or sets if the style is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlStyleElement.Media">
            <summary>
            Gets or sets the use with one or more target media.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlStyleElement.Type">
            <summary>
            Gets or sets the content type of the style sheet language.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlStyleElement.IsScoped">
            <summary>
            Gets or sets if the style is scoped.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTableCaptionElement">
            <summary>
            Represents the caption HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTableCellElement">
            <summary>
            Reprsents the base for td / th HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableCellElement.ColumnSpan">
            <summary>
            Gets or sets the number of columns spanned by cell. 
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableCellElement.RowSpan">
            <summary>
            Gets or sets the number of rows spanned by cell. 
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableCellElement.Headers">
            <summary>
            Gets or sets the list of id attribute values for header cells. 
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableCellElement.Index">
            <summary>
            Gets the index of this cell in the row, starting from 0.
            This index is in document tree order and not display order.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTableColumnElement">
            <summary>
            Represents the col HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableColumnElement.Span">
            <summary>
            Gets or sets the number of columns in a group or affected by a grouping.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTableDataCellElement">
            <summary>
            Represents the td HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTableElement">
            <summary>
            Represents the table HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableElement.Caption">
            <summary>
            Gets or sets the assigned caption element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.CreateCaption">
            <summary>
            Creates a new table caption object or returns the existing one.
            </summary>
            <returns>A caption element.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.DeleteCaption">
            <summary>
            Deletes the table caption, if one exists.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableElement.Head">
            <summary>
            Gets or sets the assigned head section.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.CreateHead">
            <summary>
            Creates a new table header section or returns the existing one.
            </summary>
            <returns>A table header element.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.DeleteHead">
            <summary>
            Deletes the header from the table, if one exists. 
            </summary> 
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableElement.Foot">
            <summary>
            Gets or sets the assigned foot section.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.CreateFoot">
            <summary>
            Creates a table footer section or returns an existing one.
            </summary>
            <returns>A footer element.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.DeleteFoot">
            <summary>
            Deletes the footer from the table, if one exists.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableElement.Bodies">
            <summary>
            Gets the assigned body sections.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.CreateBody">
            <summary>
            Creates a new table body section.
            </summary>
            <returns>A body element.</returns>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableElement.Rows">
            <summary>
            Gets the assigned table rows.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.InsertRowAt(System.Int32)">
            <summary>
            Inserts a new empty row in the table. The new row is inserted immediately before
            and in the same section as the current indexth row in the table. If index is -1
            or equal to the number of rows, the new row is appended. In addition, when the
            table is empty the row is inserted into a TBODY which is created and inserted
            into the table.
            </summary>
            <param name="index">
            The row number where to insert a new row. This index starts from 0 and is relative
            to the logical order (not document order) of all the rows contained inside the table.
            </param>
            <returns>The inserted table row.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableElement.RemoveRowAt(System.Int32)">
            <summary>
            Deletes a table row.
            </summary>
            <param name="index">
            The index of the row to be deleted. This index starts from 0 and is relative to the
            logical order (not document order) of all the rows contained inside the table. If the
            index is -1 the last row in the table is deleted.
            </param>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableElement.Border">
            <summary>
            Gets or sets the border attribute.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTableHeaderCellElement">
            <summary>
            Represents the th HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableHeaderCellElement.Scope">
            <summary>
            Gets or sets the scope of the th element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTableRowElement">
            <summary>
            Represents the tr HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableRowElement.Index">
            <summary>
            Gets the index in the logical order and not in document order. 
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableRowElement.IndexInSection">
            <summary>
            Gets the index of this row, relative to the current section starting
            from 0.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableRowElement.Cells">
            <summary>
            Gets the assigned table cells.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableRowElement.InsertCellAt(System.Int32)">
            <summary>
            Insert an empty TD cell into this row. If index is -1 or equal to
            the number of cells, the new cell is appended.
            </summary>
            <param name="index">
            [Optional] The place to insert the cell, starting from 0. A negative
            value indicates that the cell should be appended to the row.
            </param>
            <returns>The inserted table cell.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableRowElement.RemoveCellAt(System.Int32)">
            <summary>
            Deletes a cell from the current row.
            </summary>
            <param name="index">
            The index of the cell to delete, starting from 0. If the index is
            -1 the last cell in the row is deleted.
            </param>
            <returns>The current row.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTableSectionElement">
            <summary>
            Represent the base of table section (tbody, thead, tfoot) elements.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTableSectionElement.Rows">
            <summary>
            Gets the assigned table rows.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableSectionElement.InsertRowAt(System.Int32)">
            <summary>
            Inserts a row into this section. The new row is inserted immediately before the
            current indexth row in this section. If index is -1 or equal to the number of
            rows in this section, the new row is appended.
            </summary>
            <param name="index">
            The row number where to insert a new row. This index starts from 0 and is relative
            only to the rows contained inside this section, not all the rows in the table.
            </param>
            <returns>The inserted table row.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTableSectionElement.RemoveRowAt(System.Int32)">
            <summary>
            Deletes a row from this section.
            </summary>
            <param name="index">
            The index of the row to be deleted, or -1 to delete the last row.
            This index starts from 0 and is relative only to the rows contained
            inside this section, not all the rows in the table.
            </param>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTemplateElement">
            <summary>
            Represents the template HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTemplateElement.Content">
            <summary>
            Gets the template's content for cloning.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTextAreaElement">
            <summary>
            Represents the textarea HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Autofocus">
            <summary>
            Gets or sets the autofocus HTML attribute, which indicates whether the
            control should have input focus when the page loads.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.IsDisabled">
            <summary>
            Gets or sets if the textarea is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Form">
            <summary>
            Gets the associated HTML form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Labels">
            <summary>
            Gets the list of assigned labels.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Type">
            <summary>
            Gets the type (textarea).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.IsRequired">
            <summary>
            Gets or sets if the field is required.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.IsReadOnly">
            <summary>
            Gets or sets if the field is read-only.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Wrap">
            <summary>
            Gets or sets the wrap HTML attribute, indicating how the control wraps text.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.TextLength">
            <summary>
            Gets the codepoint length of the control's value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Rows">
            <summary>
            Gets or sets the rows HTML attribute, indicating
            the number of visible text lines for the control.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Columns">
            <summary>
            Gets or sets the cols HTML attribute, indicating
            the visible width of the text area.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.MaxLength">
            <summary>
            Gets or sets the maxlength HTML attribute, indicating
            the maximum number of characters the user can enter.
            This constraint is evaluated only when the value changes.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.Placeholder">
            <summary>
            Gets or sets the placeholder HTML attribute, containing a hint to
            the user about what to enter in the control.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.SelectionDirection">
            <summary>
            Gets the direction in which selection occurred. This is "forward" if
            selection was performed in the start-to-end direction of the current
            locale, or "backward" for the opposite direction.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.DirectionName">
            <summary>
            Gets or sets the directionality of the form element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.SelectionStart">
            <summary>
            Gets or sets the index of the beginning of selected text.
            If no text is selected, contains the index of the character
            that follows the input cursor. On being set, the control behaves
            as if setSelectionRange() had been called with this as the first
            argument, and selectionEnd as the second argument.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTextAreaElement.SelectionEnd">
            <summary>
            Gets or sets the index of the end of selected text. If no text
            is selected, contains the index of the character that follows
            the input cursor. On being set, the control behaves as if
            setSelectionRange() had been called with this as the second
            argument, and selectionStart as the first argument.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTextAreaElement.SelectAll">
            <summary>
            Selects the contents of the textarea.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IHtmlTextAreaElement.Select(System.Int32,System.Int32,System.String)">
            <summary>
            Selects a range of text, and sets selectionStart and selectionEnd.
            If either argument is greater than the length of the value, it is treated
            as pointing to the end of the value. If end is less than start, then
            both are treated as the value of end.
            </summary>
            <param name="selectionStart">The start of the selection.</param>
            <param name="selectionEnd">The end of the selection.</param>
            <param name="selectionDirection">Optional: The direction of the selection.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTimeElement">
            <summary>
            Represents the time HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTimeElement.DateTime">
            <summary>
            Gets or sets the time.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTitleElement">
            <summary>
            Represents the title HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTitleElement.Text">
            <summary>
            Gets or sets the text of the title.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlTrackElement">
            <summary>
            Represents the track HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTrackElement.Kind">
            <summary>
            Gets or sets the kind of the track.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTrackElement.Source">
            <summary>
            Gets or sets the media source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTrackElement.SourceLanguage">
            <summary>
            Gets or sets the language of the source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTrackElement.Label">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTrackElement.IsDefault">
            <summary>
            Gets or sets if given track is the default track.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTrackElement.ReadyState">
            <summary>
            Gets the ready state of the given track.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlTrackElement.Track">
            <summary>
            Gets the associated text track.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlUnknownElement">
            <summary>
            Represents an unknown HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlUnorderedListElement">
            <summary>
            Represents an ul HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IHtmlVideoElement">
            <summary>
            Represents the video HTML element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlVideoElement.DisplayWidth">
            <summary>
            Gets or sets the displayed width of the video element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlVideoElement.DisplayHeight">
            <summary>
            Gets or sets the displayed height of the video element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlVideoElement.OriginalWidth">
            <summary>
            Gets the width of the video.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlVideoElement.OriginalHeight">
            <summary>
            Gets the height of the video.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IHtmlVideoElement.Poster">
            <summary>
            Gets or sets the URL to a preview image.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.ILabelabelElement">
            <summary>
            This interface marks elements that allow to have an attached label.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ILabelabelElement.Labels">
            <summary>
            Gets the list of assigned labels.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.ImageExtensions">
            <summary>
            Useful extension methods for the HtmlImageElement.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.ImageExtensions.GetSources(AngleSharp.Html.Dom.IHtmlImageElement)">
            <summary>
            Gathers the source elements for the provided image element.
            </summary>
            <param name="img">The image to extend.</param>
            <returns>The stack of source elements.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.Alignment">
            <summary>
            The list of possible horizontal alignments.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Alignment.Bottom">
            <summary>
            The bottom of the object should be vertically aligned with
            the current baseline. This is the default value.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Alignment.Middle">
            <summary>
            The center of the object should be vertically aligned with
            the current baseline.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Alignment.Top">
            <summary>
            The top of the object should be vertically aligned with the
            top of the current text line.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Alignment.Left">
            <summary>
            Float to the current left margin.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.Alignment.Right">
            <summary>
            Float to the current right margin.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlAddressElement">
            <summary>
            The address HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlAnchorElement">
            <summary>
            Represents an anchor element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlAnchorElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new anchor element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlAnchorElement.Charset">
            <summary>
            Gets or sets the character encoding for the target resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlAnchorElement.Name">
            <summary>
            Gets or sets the anchor name.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlAnchorElement.Text">
            <summary>
            Gets or sets the text of the anchor tag (same as TextContent).
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlAppletElement">
            <summary>
            Represents the HTML applet element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlAreaElement">
            <summary>
            Represents the area element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlAreaElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new area element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlAreaElement.AlternativeText">
            <summary>
            Gets or sets the alternative text for the element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlAreaElement.Coordinates">
            <summary>
            Gets or sets the coordinates to define the hot-spot region.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlAreaElement.Shape">
            <summary>
            Gets or sets the shape of the hot-spot, limited to known values.
            The known values are: circle, default. poly, rect. The missing
            value is rect.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlAudioElement">
            <summary>
            Represents the HTML audio element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlAudioElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML audio element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlBaseElement">
            <summary>
            Represents the HTML base element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlBaseFontElement">
            <summary>
            Represents an HTML basefont element.
            Deprecated in HTML 4.01.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlBgsoundElement">
            <summary>
            Represents the HTML bgsound element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlBigElement">
            <summary>
            The big HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlBodyElement">
            <summary>
            Represents the HTML body element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlBoldElement">
            <summary>
            The bold HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlBreakRowElement">
            <summary>
            Represents the HTML br element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlButtonElement">
            <summary>
            Represents an HTML button element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlButtonElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML button element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.Type">
            <summary>
            Gets or sets the behavior of the button.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.FormAction">
            <summary>
            Gets or sets the URI of a resource that processes information submitted by the button.
            If specified, this attribute overrides the action attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.FormEncType">
            <summary>
            Gets or sets the type of content that is used to submit the form to the server. If specified, this
            attribute overrides the enctype attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.FormMethod">
            <summary>
            Gets or sets the HTTP method that the browser uses to submit the form. If specified, this attribute
            overrides the method attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.FormNoValidate">
            <summary>
            Gets or sets that the form is not to be validated when it is submitted. If specified, this attribute
            overrides the enctype attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.FormTarget">
            <summary>
            Gets or sets A name or keyword indicating where to display the response that is received after submitting
            the form. If specified, this attribute overrides the target attribute of the form element that owns this element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.Value">
            <summary>
            Gets or sets the current value of the control.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.IsVisited">
            <summary>
            Gets or sets if the link has been visited.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlButtonElement.IsActive">
            <summary>
            Gets or sets if the link is currently active.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlCanvasElement">
            <summary>
            Represents the HTML canvas element.
            See: http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html
            Alternative: http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#the-canvas-element
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlCanvasElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML canvas element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlCanvasElement.Width">
            <summary>
            Gets or sets the displayed width of the canvas element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlCanvasElement.Height">
            <summary>
            Gets or sets the displayed height of the canvas element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlCanvasElement.GetContext(System.String)">
            <summary>
            Gets the drawing context.
            </summary>
            <param name="contextId">A context id like 2d.</param>
            <returns>An object that defines the drawing context.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlCanvasElement.IsSupportingContext(System.String)">
            <summary>
            Gets an indicator if a context with the given parameters could be created.
            </summary>
            <param name="contextId">A context id like 2d.</param>
            <returns>True if the context is supported, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlCanvasElement.SetContext(AngleSharp.Media.Dom.IRenderingContext)">
            <summary>
            Changes the context the element is related to the given one.
            </summary>
            <param name="context">The new context.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlCanvasElement.ToDataUrl(System.String)">
            <summary>
            Returns a Data URI with the bitmap data of the context.
            </summary>
            <param name="type">The type of image e.g image/png.</param>
            <returns>A data URI with the data if any.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlCanvasElement.ToBlob(System.Action{System.IO.Stream},System.String)">
            <summary>
            Creates a BLOB out of the canvas pixel data and passes it
            to the given callback.
            </summary>
            <param name="callback">The callback function.</param>
            <param name="type">The type of object to create.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlCodeElement">
            <summary>
            The code HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlDataElement">
            <summary>
            Represents the HTML data element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlDataListElement">
            <summary>
            Represents the HTML datalist element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlDefinitionListElement">
            <summary>
            Represents the HTML dl element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlDetailsElement">
            <summary>
            Represents the HTML details element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlDialogElement">
            <summary>
            Represents the object for HTML dialog elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlDirectoryElement">
            <summary>
            Represents the HTML dir element.
            This element is obsolete since HTML 4.01.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlDivElement">
            <summary>
            Represents the HTML div element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlDocument">
            <summary>
            Represents a document node that contains only HTML nodes.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlElement">
            <summary>
            Represents a standard HTML element in the node tree.
            </summary>
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Aborted">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Blurred">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Cancelled">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.CanPlay">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.CanPlayThrough">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Changed">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Clicked">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.CueChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.DoubleClick">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Drag">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.DragEnd">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.DragEnter">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.DragExit">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.DragLeave">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.DragOver">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.DragStart">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Dropped">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.DurationChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Emptied">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Ended">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Error">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Focused">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Input">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Invalid">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.KeyDown">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.KeyPress">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.KeyUp">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Loaded">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.LoadedData">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.LoadedMetadata">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Loading">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.MouseDown">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.MouseEnter">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.MouseLeave">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.MouseMove">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.MouseOut">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.MouseOver">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.MouseUp">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.MouseWheel">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Paused">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Played">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Playing">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Progress">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.RateChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Resetted">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Resized">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Scrolled">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Seeked">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Seeking">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Selected">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Shown">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Stalled">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Submitted">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Suspended">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.TimeUpdated">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Toggled">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.VolumeChanged">
            <inheritdoc />
        </member>
        <member name="E:AngleSharp.Html.Dom.HtmlElement.Waiting">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.#ctor(AngleSharp.Dom.Document,System.String,System.String,AngleSharp.Dom.NodeFlags)">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.ContextMenu">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.DropZone">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.IsDraggable">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.AccessKey">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.AccessKeyLabel">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.Language">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.Title">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.Direction">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.IsSpellChecked">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.TabIndex">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.Dataset">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.ContentEditable">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.IsContentEditable">
            <inheritdoc />
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlElement.IsTranslated">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.ParseSubtree(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.DoSpellCheck">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.DoClick">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.DoFocus">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.DoBlur">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.Clone(AngleSharp.Dom.Document,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.IsClickedCancelled">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlElement.GetAssignedForm">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlEmbedElement">
            <summary>
            Represents the embed element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlEmphasizeElement">
            <summary>
            The em HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFieldSetElement">
            <summary>
            Represents the HTML fieldset element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFontElement">
            <summary>
            Represents a font element.
            See (19) obsolete features of [WHATWG].
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFormControlElement">
            <summary>
            Represents the base class for all HTML form control elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFormControlElementWithState">
            <summary>
            Represents the base class for all HTML form controls that contain a state.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlFormControlElementWithState.CanContainRangeEndpoint">
            <summary>
            Gets the status if the element can contain a range endpoint.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlFormControlElementWithState.ShouldSaveAndRestoreFormControlState">
            <summary>
            Gets the status if the element should save and restore the control state.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlFormControlElementWithState.SaveControlState">
            <summary>
            Saves the current control's state.
            </summary>
            <returns>The current state.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlFormControlElementWithState.RestoreFormControlState(AngleSharp.Html.FormControlState)">
            <summary>
            Resets the form control state to the given state.
            </summary>
            <param name="state">The desired state.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFormElement">
            <summary>
            Represents the form element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlFormElement.PostToData(AngleSharp.Url,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            More information can be found at:
            http://www.w3.org/html/wg/drafts/html/master/forms.html#submit-data-post
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlFormElement.MailWithHeaders(AngleSharp.Url,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            More information can be found at:
            http://www.w3.org/html/wg/drafts/html/master/forms.html#submit-mailto-headers
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlFormElement.MailAsBody(AngleSharp.Url,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            More information can be found at:
            http://www.w3.org/html/wg/drafts/html/master/forms.html#submit-mailto-body
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlFormElement.GetActionUrl(AngleSharp.Url)">
            <summary>
            More information can be found at:
            http://www.w3.org/html/wg/drafts/html/master/forms.html#submit-get-action
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlFormElement.SubmitAsEntityBody(AngleSharp.Url,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            Submits the body of the form.
            http://www.w3.org/html/wg/drafts/html/master/forms.html#submit-body
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlFormElement.MutateActionUrl(AngleSharp.Url,AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            More information can be found at:
            http://www.w3.org/html/wg/drafts/html/master/forms.html#submit-mutate-action
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFrameElement">
            <summary>
            Represents the HTML frame element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFrameElementBase">
            <summary>
            Represents the base class for frame elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFrameOwnerElement">
            <summary>
            Represents the base class for frame owned elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlFrameSetElement">
            <summary>
            Represents the HTML frameset element.
            Obsolete since HTML 4.01.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlHeadElement">
            <summary>
            Represents the HTML head element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlHeadingElement">
            <summary>
            Represents the an HTML heading element (h1, h2, h3, h4, h5, h6).
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlHrElement">
            <summary>
            Represents the hr element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlHtmlElement">
            <summary>
            Represents the HTML html element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlIFrameElement">
            <summary>
            Represents the HTML iframe element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlImageElement">
            <summary>
            Represents the image element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlInputElement">
            <summary>
            Represents an HTML input element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlIsIndexElement">
            <summary>
            Represents the HTML isindex element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlItalicElement">
            <summary>
            The i HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlKeygenElement">
            <summary>
            Represents the keygen element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlKeygenElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML keygen element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlKeygenElement.Challenge">
            <summary>
            Gets or sets the challenge attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlKeygenElement.KeyEncryption">
            <summary>
            Gets or sets the type of key used.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlKeygenElement.Type">
            <summary>
            Gets the type of input control (keygen).
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlLabelElement">
            <summary>
            Represents the HTML label element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlLabelElement.Control">
            <summary>
            Gets the control that the label is assigned for if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlLabelElement.HtmlFor">
            <summary>
            Gets or sets the ID of the labeled control. Reflects the for attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlLabelElement.Form">
            <summary>
            Gets the form element that the label is assigned for if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlLegendElement">
            <summary>
            Represents the HTML legend element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlLegendElement.Form">
            <summary>
            Gets the associated form.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlLinkElement">
            <summary>
            Represents the HTML link element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlLinkElementExtensions">
            <summary>
            Defines a set of extension methods for link elements.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlLinkElementExtensions.IsPersistent(AngleSharp.Html.Dom.IHtmlLinkElement)">
            <summary>
            Gets if the link contains a stylesheet that is regarded persistent.
            </summary>
            <param name="link">The link to examine.</param>
            <returns>True if the link hosts a persistent stylesheet.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlLinkElementExtensions.IsPreferred(AngleSharp.Html.Dom.IHtmlLinkElement)">
            <summary>
            Gets if the link contains a stylesheet that is regarded preferred.
            </summary>
            <param name="link">The link to examine.</param>
            <returns>True if the link hosts a preferred stylesheet.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlLinkElementExtensions.IsAlternate(AngleSharp.Html.Dom.IHtmlLinkElement)">
            <summary>
            Gets if the link contains a stylesheet that is regarded alternate.
            </summary>
            <param name="link">The link to examine.</param>
            <returns>True if the link hosts an alternate stylesheet.</returns>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlListItemElement">
            <summary>
            Represents an HTML li, dd or dt tag.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlListItemElement.#ctor(AngleSharp.Dom.Document,System.String,System.String)">
            <summary>
            Creates a new item tag.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlMapElement">
            <summary>
            Represents the HTML map element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMapElement.Name">
            <summary>
            Gets or sets the value of the href attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMapElement.Areas">
            <summary>
            Gets a collection representing the area elements
            associated to this map.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMapElement.Images">
            <summary>
            Gets a collection representing the img and object
            elements associated to this element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlMarqueeElement">
            <summary>
            Represents the HTML marquee element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMarqueeElement.MinimumDelay">
            <summary>
            Gets the minimum delay in ms.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMarqueeElement.ScrollAmount">
            <summary>
            Gets or sets the amount of scrolling in pixels.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMarqueeElement.ScrollDelay">
            <summary>
            Gets or sets the delay of scrolling in ms.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMarqueeElement.Loop">
            <summary>
            Gets or sets the loop number.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlMarqueeElement.Start">
            <summary>
            Starts the marquee loop.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlMarqueeElement.Stop">
            <summary>
            Stops the marquee loop.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlMediaElement`1">
            <summary>
            Represents the abstract base for HTML media (audio / video) elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlMenuElement">
            <summary>
            Represents the HTML menu element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlMenuElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML menu element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuElement.Type">
            <summary>
            Gets or sets the type of the menu element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuElement.Label">
            <summary>
            Gets or sets the text label of the menu element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlMenuItemElement">
            <summary>
            Represents the HTML menuitem element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlMenuItemElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML menuitem element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.IsVisited">
            <summary>
            Gets or sets if the link has been visited.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.IsActive">
            <summary>
            Gets or sets if the link is currently active.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.Command">
            <summary>
            Gets the assigned master command, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.Type">
            <summary>
            Gets or sets the type of command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.Label">
            <summary>
            Gets or sets the user-visible label.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.Icon">
            <summary>
            Gets or sets the icon for the command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.IsDisabled">
            <summary>
            Gets or sets if the menuitem element is enabled or disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.IsChecked">
            <summary>
            Gets or sets if the menuitem element is checked or not.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.IsDefault">
            <summary>
            Gets or sets if the menuitem element is the default command.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlMenuItemElement.RadioGroup">
            <summary>
            Gets or sets the name of group of commands to
            treat as a radio button group.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlMetaElement">
            <summary>
            Represents the HTML meta element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlMeterElement">
            <summary>
            Represents the HTML meter element.
            https://html.spec.whatwg.org/multipage/forms.html#dom-meter-low
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlModElement">
            <summary>
            Represents the HTML modifier (ins / del) element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlModElement.Citation">
            <summary>
            Gets or sets the value that contains a URI of a resource
            explaining the change.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlModElement.DateTime">
            <summary>
            Gets or sets the value that contains date-and-time string
            representing a timestamp for the change.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlNoEmbedElement">
            <summary>
            Represents a noembed HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlNoFramesElement">
            <summary>
            Represents a noframes HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlNoNewlineElement">
            <summary>
            The nobr HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlNoScriptElement">
            <summary>
            Represents a noscript HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlObjectElement">
            <summary>
            Represents the HTML object element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlOptionElement">
            <summary>
            Represents the HTML option element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlOptionsGroupElement">
            <summary>
            Represents the HTML optgroup element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlOrderedListElement">
            <summary>
            Represents the HTML ordered list (ol) element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlOrderedListElement.IsReversed">
            <summary>
            Gets or sets if the order is reversed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlOrderedListElement.Start">
            <summary>
            Gets or sets the start of the numbering.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlOrderedListElement.Type">
            <summary>
            Gets or sets a value within [ 1, a, A, i, I ].
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlOutputElement">
            <summary>
            Represents an HTML output element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlParagraphElement">
            <summary>
            Represents the HTML paragraph element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlParamElement">
            <summary>
            Represents a param element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlPictureElement">
            <summary>
            Represents the HTML picture element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlPlaintextElement">
            <summary>
            The plaintext HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlPreElement">
            <summary>
            Represents the HTML pre element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlProgressElement">
            <summary>
            Represents the HTML progress element.
            https://html.spec.whatwg.org/multipage/forms.html#the-progress-element
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlQuoteElement">
            <summary>
            Rperesents the HTML quote element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlQuoteElement.Citation">
            <summary>
            Gets or sets the citation.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlRbElement">
            <summary>
            The rb HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlRpElement">
            <summary>
            The rp HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlRtcElement">
            <summary>
            The rtc HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlRtElement">
            <summary>
            The rt element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlRubyElement">
            <summary>
            The ruby HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlScriptElement">
            <summary>
            Represents an HTML script element.
            http://www.w3.org/TR/html5/scripting-1.html#execute-the-script-block
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlScriptElement.Prepare(AngleSharp.Dom.Document)">
            <summary>
            More information available at:
            http://www.w3.org/TR/html5/scripting-1.html#prepare-a-script
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlSelectElement">
            <summary>
            Represents the select element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlSemanticElement">
            <summary>
            Represents an HTML element with only semantic meaning.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlSlotElement">
            <summary>
            Represents an HTML slot element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlSmallElement">
            <summary>
            The small HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlSourceElement">
            <summary>
            Represents the HTML source element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlSpanElement">
            <summary>
            Represents the HTML span element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlStrikeElement">
            <summary>
            The strike HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlStrongElement">
            <summary>
            The strong HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlStruckElement">
            <summary>
            The s HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlStyleElement">
            <summary>
            Represents the HTML style element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableCaptionElement">
            <summary>
            Represents the HTML caption element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableCaptionElement.Align">
            <summary>
            Gets or sets the value of the alignment attribute.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableCellElement">
            <summary>
            Represents the object for HTML table cell elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableColElement">
            <summary>
            Represents the HTML column element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableColElement.Align">
            <summary>
            Gets or sets the value of the horizontal alignment attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableColElement.Span">
            <summary>
            Gets or sets the number of columns in a group or affected by a grouping.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableColElement.VAlign">
            <summary>
            Gets or sets the value of the vertical alignment attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableColElement.Width">
            <summary>
            Gets or sets the value of the width attribute.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableColgroupElement">
            <summary>
            Represents the HTML column group element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableColgroupElement.Align">
            <summary>
            Gets or sets the value of the horizontal alignment attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableColgroupElement.Span">
            <summary>
            Gets or sets the number of columns in a group or affected by a grouping.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableColgroupElement.VAlign">
            <summary>
            Gets or sets the value of the vertical alignment attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTableColgroupElement.Width">
            <summary>
            Gets or sets the value of the width attribute.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableDataCellElement">
            <summary>
            Represents the object for HTML td elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableElement">
            <summary>
            Represents the HTML table element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableHeaderCellElement">
            <summary>
            Represents the object for HTML th elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableRowElement">
            <summary>
            Represents the HTML tr element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTableSectionElement">
            <summary>
            Represents the object for HTML table section (thead / tbody / tfoot) elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTeletypeTextElement">
            <summary>
            The tt HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTemplateElement">
            <summary>
            Represents the template element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTextAreaElement">
            <summary>
            Represents a HTML textarea element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlTextAreaElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML textarea element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextAreaElement.Wrap">
            <summary>
            Gets or sets the wrap HTML attribute, indicating how the control wraps text.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextAreaElement.DefaultValue">
            <summary>
            Gets or sets the default value of the input field.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextAreaElement.TextLength">
            <summary>
            Gets the codepoint length of the control's value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextAreaElement.Rows">
            <summary>
            Gets or sets the rows HTML attribute, indicating
            the number of visible text lines for the control.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextAreaElement.Columns">
            <summary>
            Gets or sets the cols HTML attribute, indicating
            the visible width of the text area.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextAreaElement.Type">
            <summary>
            Gets the type of input control (texarea).
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTextFormControlElement">
            <summary>
            Represents the base class for all HTML text form controls.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.IsDirty">
            <summary>
            Gets or sets if the value has been modified.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.DirectionName">
            <summary>
            Gets or sets the dirname HTML attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.MaxLength">
            <summary>
            Gets or sets the maxlength HTML attribute, indicating
            the maximum number of characters the user can enter.
            This constraint is evaluated only when the value changes.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.MinLength">
            <summary>
            Gets or sets the minlength HTML attribute, indicating
            the minimum number of characters the user can enter.
            This constraint is evaluated only when the value changes.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.DefaultValue">
            <summary>
            Gets or sets the default value of the input field.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.HasValue">
            <summary>
            Gets if the input field has a value (via attribute or directly).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.Value">
            <summary>
            Gets or sets the current value in the control.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.Placeholder">
            <summary>
            Gets or sets the placeholder HTML attribute, containing a hint to
            the user about what to enter in the control.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.IsRequired">
            <summary>
            Gets or sets if the field is required.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.IsReadOnly">
            <summary>
            Gets or sets if the textarea field is read-only.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.SelectionStart">
            <summary>
            Gets or sets the index of the beginning of selected text.
            If no text is selected, contains the index of the character
            that follows the input cursor. On being set, the control behaves
            as if setSelectionRange() had been called with this as the first
            argument, and selectionEnd as the second argument.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.SelectionEnd">
            <summary>
            Gets or sets the index of the end of selected text. If no text
            is selected, contains the index of the character that follows
            the input cursor. On being set, the control behaves as if
            setSelectionRange() had been called with this as the second
            argument, and selectionStart as the first argument.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTextFormControlElement.SelectionDirection">
            <summary>
            Gets the direction in which selection occurred. This
            is "forward" if selection was performed in the start-to-end
            direction of the current locale, or "backward" for the opposite
            direction.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlTextFormControlElement.Select(System.Int32,System.Int32,System.String)">
            <summary>
            Selects a range of text, and sets selectionStart and selectionEnd.
            If either argument is greater than the length of the value, it is treated
            as pointing to the end of the value. If end is less than start, then
            both are treated as the value of end.
            </summary>
            <param name="selectionStart">The start of the selection.</param>
            <param name="selectionEnd">The end of the selection.</param>
            <param name="selectionDirection">Optional: The direction of the selection.</param>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlTextFormControlElement.SelectAll">
            <summary>
            Selects the contents of the control.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTextFormControlElement.SelectionType">
            <summary>
            An enumeration with possible selection directions.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.HtmlTextFormControlElement.SelectionType.None">
            <summary>
            The text selection direction is unknown.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.HtmlTextFormControlElement.SelectionType.Forward">
            <summary>
            The text is selected in forward direction.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.HtmlTextFormControlElement.SelectionType.Backward">
            <summary>
            The text is selected in backward direction.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlTextFormControlElement.Reset">
            <summary>
            Resets the form control to its initial value.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTimeElement">
            <summary>
            The time HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTitleElement">
            <summary>
            Represents the title element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlTitleElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML title element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTitleElement.Text">
            <summary>
            Gets or sets the text of the title.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlTrackElement">
            <summary>
            Represents the HTML track element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.HtmlTrackElement.#ctor(AngleSharp.Dom.Document,System.String)">
            <summary>
            Creates a new HTML track element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTrackElement.Kind">
            <summary>
            Gets or sets the kind of the track.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTrackElement.Source">
            <summary>
            Gets or sets the media source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTrackElement.SourceLanguage">
            <summary>
            Gets or sets the language of the source.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTrackElement.Label">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTrackElement.IsDefault">
            <summary>
            Gets or sets if given track is the default track.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.HtmlTrackElement.ReadyState">
            <summary>
            Gets the ready state of the given track.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlUnderlineElement">
            <summary>
            The u HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlUnknownElement">
            <summary>
            The class for an unknown HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlUnorderedListElement">
            <summary>
            The DOM Object representing the unordered list.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlUrlBaseElement">
            <summary>
            Represents the base for a / area elements.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlVideoElement">
            <summary>
            Represents the HTML video element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlWbrElement">
            <summary>
            Represents the HTML wbr (word-break-opportunity) element.
            This element is used to indicate that the position is a good
            point for inserting a possible line-break.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.HtmlXmpElement">
            <summary>
            The xmp HTML element.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.ValidityState">
            <summary>
            A class for representing the current validity state.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.ValidityState.#ctor">
            <summary>
            Creates a new ValidityState instance.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsValueMissing">
            <summary>
            Gets or sets if a required value is missing.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsTypeMismatch">
            <summary>
            Gets or sets if the given type is wrong.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsPatternMismatch">
            <summary>
            Gets or sets if the input does not match a given pattern.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsBadInput">
            <summary>
            Gets or sets if the input is regarded as invalid.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsTooLong">
            <summary>
            Gets or sets if the input is too long.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsTooShort">
            <summary>
            Gets or sets if the input is too short.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsRangeUnderflow">
            <summary>
            Gets or sets if the range is too small.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsRangeOverflow">
            <summary>
            Gets or sets if the range is too big.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsStepMismatch">
            <summary>
            Gets or sets if the new value is invalid.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsCustomError">
            <summary>
            Gets or sets if validation failed due to a custom error.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.ValidityState.IsValid">
            <summary>
            Gets if the value is valid.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.IValidation">
            <summary>
            Implemented by elements that can be validated.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidation.WillValidate">
            <summary>
            Gets a value if the current element validates.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidation.Validity">
            <summary>
            Gets the current validation state of the current element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidation.ValidationMessage">
            <summary>
            Gets the current validation message.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Dom.IValidation.CheckValidity">
            <summary>
            Checks the validity of the current element.
            </summary>
            <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Dom.IValidation.SetCustomValidity(System.String)">
            <summary>
            Sets a custom validation error. If this is not the empty string,
            then the element is suffering from a custom validation error.
            </summary>
            <param name="error">The error message to use.</param>
        </member>
        <member name="T:AngleSharp.Html.Dom.IValidityState">
            <summary>
            The ValidityState interface represents the validity states that an element
            can be in, with respect to constraint validation. Together, they help explain
            why an element's value fails to validate, if it's not valid.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsValueMissing">
            <summary>
            Gets if the element has a required attribute, but no value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsTypeMismatch">
            <summary>
            Gets if the value is not in the required syntax (when type is email or url).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsPatternMismatch">
            <summary>
            Gets if the value does not match the specified pattern.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsTooLong">
            <summary>
            Gets if the value exceeds the specified maxlength.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsTooShort">
            <summary>
            Gets if the value is below the specified minlength.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsBadInput">
            <summary>
            Gets if the value is regarded is invalid input.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsRangeUnderflow">
            <summary>
            Gets if the value is less than the minimum specified by the min attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsRangeOverflow">
            <summary>
            Gets if the value is greater than the maximum specified by the max attribute.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsStepMismatch">
            <summary>
            Gets if the value does not fit the rules determined by the step attribute
            (that is, it's not evenly divisible by the step value).
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsCustomError">
            <summary>
            Gets the element's custom validity message.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Dom.IValidityState.IsValid">
            <summary>
            Gets if the element meets all constraint validations, and is therefore
            considered to be valid.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.TableFrames">
            <summary>
            The list of possible table frame directives.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.Void">
            <summary>
            No sides. This is the default value.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.Box">
            <summary>
            All four sides.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.Above">
            <summary>
            The top side only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.Below">
            <summary>
            The bottom side only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.HSides">
            <summary>
            The top and bottom sides only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.VSides">
            <summary>
            The right and left sides only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.LHS">
            <summary>
            The left-hand side only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.RHS">
            <summary>
            The right-hand side only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableFrames.Border">
            <summary>
            All four sides.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.TableRules">
            <summary>
            The list of possible table rules.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableRules.None">
            <summary>
            No rules. This is the default value.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableRules.Rows">
            <summary>
            Rules will appear between rows only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableRules.Cols">
            <summary>
            Rules will appear between columns only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableRules.Groups">
            <summary>
            Rules will appear between row groups and column groups only.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TableRules.All">
            <summary>
            Rules will appear between all rows and columns.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Dom.TrackReadyState">
            <summary>
            An enumeration with track ready state values.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TrackReadyState.None">
            <summary>
            Not initialized yet.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TrackReadyState.Loading">
            <summary>
            Currently loading.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TrackReadyState.Loaded">
            <summary>
            Loading finished.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Dom.TrackReadyState.Error">
            <summary>
            An error occured.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.EventFlags">
            <summary>
            A set of flags for an event.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.EventFlags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.EventFlags.StopPropagation">
            <summary>
            Stop propagation has been requested.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.EventFlags.StopImmediatePropagation">
            <summary>
            Stop immediate propagation has been requested.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.EventFlags.Canceled">
            <summary>
            The event has been cancelled.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.EventFlags.Initialized">
            <summary>
            The event has been initialized.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.EventFlags.Dispatch">
            <summary>
            The event has been dispatched.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.FormControlState">
            <summary>
            Class to store the state of a form control.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.FormControlState.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new form control state instance.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="type">The type of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="P:AngleSharp.Html.FormControlState.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.FormControlState.Value">
            <summary>
            Gets the field's value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.FormControlState.Type">
            <summary>
            Gets the type of the field.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.FormDataSet">
            <summary>
            Bundles information stored in HTML forms.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.#ctor">
            <summary>
            Creates a new form data set with a randomly generated boundary.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.FormDataSet.Boundary">
            <summary>
            Gets the chosen boundary.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.AsMultipart(System.Text.Encoding)">
            <summary>
            Applies the multipart/form-data algorithm.
            http://www.w3.org/html/wg/drafts/html/master/forms.html#multipart/form-data-encoding-algorithm
            </summary>
            <param name="encoding">(Optional) Explicit encoding.</param>
            <returns>A stream containing the body.</returns>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.AsUrlEncoded(System.Text.Encoding)">
            <summary>
            Applies the urlencoded algorithm.
            http://www.w3.org/html/wg/drafts/html/master/forms.html#application/x-www-form-urlencoded-encoding-algorithm
            </summary>
            <param name="encoding">(Optional) Explicit encoding.</param>
            <returns>A stream containing the body.</returns>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.AsPlaintext(System.Text.Encoding)">
            <summary>
            Applies the plain encoding algorithm.
            http://www.w3.org/html/wg/drafts/html/master/forms.html#text/plain-encoding-algorithm
            </summary>
            <param name="encoding">(Optional) Explicit encoding.</param>
            <returns>A stream containing the body.</returns>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.AsJson">
            <summary>
            Applies the application json encoding algorithm.
            https://darobin.github.io/formic/specs/json/#the-application-json-encoding-algorithm
            </summary>
            <returns>A stream containing the body.</returns>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.As(AngleSharp.Html.Forms.IFormSubmitter,System.Text.Encoding)">
            <summary>
            Applies the given submitter to serialize the form data set.
            </summary>
            <param name="submitter">The algorithm to use.</param>
            <param name="encoding">(Optional) Explicit encoding.</param>
            <returns>A stream containing the body.</returns>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.Append(System.String,System.String,System.String)">
            <summary>
            Appends a text entry to the form data set.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="value">The value of the entry.</param>
            <param name="type">The type of the entry.</param>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.Append(System.String,AngleSharp.Io.Dom.IFile,System.String)">
            <summary>
            Appends a file entry to the form data set.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="value">The value of the entry.</param>
            <param name="type">The type of the entry.</param>
        </member>
        <member name="M:AngleSharp.Html.FormDataSet.GetEnumerator">
            <summary>
            Gets an enumerator over all entry names.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:AngleSharp.Html.Forms.FileDataSetEntry">
            <summary>
            A file entry in a form.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Forms.FormDataSetEntry">
            <summary>
            Encapsulates the data contained in an entry.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Forms.FormDataSetEntry.#ctor(System.String,System.String)">
            <summary>
            Creates a new form data set entry.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="type">The type of the field.</param>
        </member>
        <member name="P:AngleSharp.Html.Forms.FormDataSetEntry.HasName">
            <summary>
            Gets if the name has been given.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Forms.FormDataSetEntry.Name">
            <summary>
            Gets the entry's name.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Forms.FormDataSetEntry.Type">
            <summary>
            Gets the entry's type.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Forms.FormDataSetEntry.Accept(AngleSharp.Html.Forms.IFormDataSetVisitor)">
            <summary>
            Accepts the provided visitor instance.
            </summary>
            <param name="visitor">The visitor to accept.</param>
        </member>
        <member name="M:AngleSharp.Html.Forms.FormDataSetEntry.Contains(System.String,System.Text.Encoding)">
            <summary>
            Checks if the provided boundary is already mentioned in the content.
            </summary>
            <param name="boundary">The string to check for.</param>
            <param name="encoding">The encoding to use for the string.</param>
            <returns>True if the boundary is matched, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Html.Forms.IFormDataSetVisitor">
            <summary>
            Defines the visitor for form data set entries.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Forms.IFormDataSetVisitor.Text(AngleSharp.Html.Forms.FormDataSetEntry,System.String)">
            <summary>
            Called by text form data set entries.
            </summary>
            <param name="entry">The entry to pass.</param>
            <param name="value">The contained text value.</param>
        </member>
        <member name="M:AngleSharp.Html.Forms.IFormDataSetVisitor.File(AngleSharp.Html.Forms.FormDataSetEntry,System.String,System.String,AngleSharp.Io.Dom.IFile)">
            <summary>
            Called by file form data set entries.
            </summary>
            <param name="entry">The entry to pass.</param>
            <param name="fileName">The name of the file.</param>
            <param name="contentType">The MIME-type.</param>
            <param name="content">The contained content.</param>
        </member>
        <member name="T:AngleSharp.Html.Forms.IFormSubmitter">
            <summary>
            Strategy for serializing form data sets.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Forms.IFormSubmitter.Serialize(System.IO.StreamWriter)">
            <summary>
            Serializes the visited form data set to the stream.
            </summary>
            <param name="stream">The stream writer to use.</param>
        </member>
        <member name="T:AngleSharp.Html.Forms.TextDataSetEntry">
            <summary>
            A text entry in a form.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.HtmlElementFactory">
            <summary>
            Provides string to HTMLElement instance creation mappings.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.HtmlElementFactory.Create(AngleSharp.Dom.Document,System.String,System.String)">
            <summary>
            Returns a specialized HTMLElement instance for the given tag name.
            </summary>
            <param name="document">The document that owns the element.</param>
            <param name="localName">The given tag name.</param>
            <param name="prefix">The prefix of the element, if any.</param>
            <returns>The specialized HTMLElement instance.</returns>
        </member>
        <member name="T:AngleSharp.Html.HtmlEntityProvider">
            <summary>
            Represents the list of all Html entities.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.HtmlEntityProvider.Resolver">
            <summary>
            Gets the instance to resolve entities.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.HtmlEntityProvider.GetSymbol(System.String)">
            <summary>
            Gets a symbol (that ended with a semicolon) specified by its entity
            name.
            </summary>
            <param name="name">
            The name of the entity, specified by &amp;NAME; in the Html code.
            </param>
            <returns>The string with the symbol or null.</returns>
        </member>
        <member name="M:AngleSharp.Html.HtmlEntityProvider.Convert(System.Int32)">
            <summary>
            Converts a given number into its unicode character.
            </summary>
            <param name="code">The code to convert.</param>
            <returns>The array containing the character.</returns>
        </member>
        <member name="M:AngleSharp.Html.HtmlEntityProvider.Convert(System.Int32,System.Int32)">
            <summary>
            Converts a set of two numbers into their unicode characters.
            </summary>
            <param name="leading">The first (leading) character code.</param>
            <param name="trailing">The second (trailing) character code.</param>
            <returns>The array containing the two characters.</returns>
        </member>
        <member name="M:AngleSharp.Html.HtmlEntityProvider.IsInvalidNumber(System.Int32)">
            <summary>
            Determines if the code is an invalid number.
            </summary>
            <param name="code">The code to examine.</param>
            <returns>True if it is an invalid number, false otherwise.</returns>
        </member>
        <member name="M:AngleSharp.Html.HtmlEntityProvider.IsInCharacterTable(System.Int32)">
            <summary>
            Determines if the given code is actually in the table of common
            redirections.
            </summary>
            <param name="code">The code to examine.</param>
            <returns>True if the code is in the table, else false.</returns>
        </member>
        <member name="M:AngleSharp.Html.HtmlEntityProvider.GetSymbolFromTable(System.Int32)">
            <summary>
            Gets the symbol mapped by the table of common redirections.
            </summary>
            <param name="code">The original code.</param>
            <returns>The character wrapped in a string.</returns>
        </member>
        <member name="M:AngleSharp.Html.HtmlEntityProvider.IsInInvalidRange(System.Int32)">
            <summary>
            Determines if the code is within an invalid range.
            </summary>
            <param name="code">The code to examine.</param>
            <returns>
            True if it is within an invalid range, false otherwise.
            </returns>
        </member>
        <member name="T:AngleSharp.Html.HtmlMarkupFormatter">
            <summary>
            Represents the standard HTML5 markup formatter.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.HtmlMarkupFormatter.Instance">
            <summary>
            An instance of the HtmlMarkupFormatter.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.HtmlMarkupFormatter.EscapeText(System.String)">
            <summary>
            Escapes the given text by replacing special characters with their
            HTML entity (amp, nobsp, lt, and gt).
            </summary>
            <param name="content">The string to alter.</param>
            <returns>The altered string.</returns>
        </member>
        <member name="T:AngleSharp.Html.IInputTypeFactory">
            <summary>
            Represents the interface for producing input validation.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.IInputTypeFactory.Create(AngleSharp.Html.Dom.IHtmlInputElement,System.String)">
            <summary>
            Creates an input type for the input element.
            </summary>
            <param name="input">The input element.</param>
            <param name="type">The name of the type.</param>
            <returns>The new instance of the type or text.</returns>
        </member>
        <member name="T:AngleSharp.Html.ILinkRelationFactory">
            <summary>
            Represents the factory for resolving link relation.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.ILinkRelationFactory.Create(AngleSharp.Html.Dom.IHtmlLinkElement,System.String)">
            <summary>
            Creates an link relation provider for the given element.
            </summary>
            <param name="link">The link element.</param>
            <param name="relation">The current value of the rel attribute.</param>
            <returns>The provider instance or null.</returns>
        </member>
        <member name="T:AngleSharp.Html.InputTypeNames">
            <summary>
            The collection of (known / used) input type names.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Hidden">
            <summary>
            The input will be hidden.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Text">
            <summary>
            A standard (1-line) text input.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Search">
            <summary>
            A search input.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Tel">
            <summary>
            A telephone number input.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Url">
            <summary>
            An URL input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Email">
            <summary>
            An email input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Password">
            <summary>
            A password input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Datetime">
            <summary>
            A datetime input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.DatetimeLocal">
            <summary>
            A datetime-local input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Date">
            <summary>
            A date input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Month">
            <summary>
            A month picker input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Week">
            <summary>
            A week picker input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Time">
            <summary>
            A time picker input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Number">
            <summary>
            A number input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Range">
            <summary>
            A range picker.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Color">
            <summary>
            A color picker input field.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Checkbox">
            <summary>
            A checkbox.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Radio">
            <summary>
            A radio box.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.File">
            <summary>
            A file upload box.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Submit">
            <summary>
            A submit button.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Image">
            <summary>
            An image input box.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Reset">
            <summary>
            A reset form button.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.Button">
            <summary>
            A simple button.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.SelectMultiple">
            <summary>
            A select-multiple select box.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypeNames.SelectOne">
            <summary>
            A select-one select box.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.InputTypes.BaseInputType">
            <summary>
            Base type for the all input field types. Primarely from:
            http://www.w3.org/TR/html5/forms.html#range-state-(type=range)
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypes.BaseInputType.UnixEpoch">
            <summary>
            The start of the unix epoch (1st of January 1970).
            </summary>
        </member>
        <member name="F:AngleSharp.Html.InputTypes.BaseInputType.Number">
            <summary>
            Simple regular expression for floating point numbers.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.#ctor(AngleSharp.Html.Dom.IHtmlInputElement,System.String,System.Boolean)">
            <summary>
            Creates a new base input type.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.InputTypes.BaseInputType.Name">
            <summary>
            Gets the name of the input type.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.InputTypes.BaseInputType.CanBeValidated">
            <summary>
            Gets if the input type can be validated.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.InputTypes.BaseInputType.Input">
            <summary>
            Gets the associated input element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsAppendingData(AngleSharp.Html.Dom.IHtmlElement)">
            <summary>
            Checks if the given type wants to append data.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.Check(AngleSharp.Html.Dom.IValidityState)">
            <summary>
            Checks the current input for its validity.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.ConvertToNumber(System.String)">
            <summary>
            Tries to convert the given string to a number.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.ConvertFromNumber(System.Double)">
            <summary>
            Tries to convert the given number to a string.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.ConvertToDate(System.String)">
            <summary>
            Tries to convert the given string to a date time.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.ConvertFromDate(System.DateTime)">
            <summary>
            Tries to convert the given date time to a string.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.ConstructDataSet(AngleSharp.Html.FormDataSet)">
            <summary>
            Populates the form data set with the current input.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.DoStep(System.Int32)">
            <summary>
            Changes the value by n steps.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsStepMismatch">
            <summary>
            Checks if the current value does not match the steps.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.GetStep">
            <summary>
            Gets the current step size.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.GetDefaultStepBase">
            <summary>
            Gets the default step offset.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.GetDefaultStep">
            <summary>
            Gets the default step size.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.GetStepScaleFactor">
            <summary>
            Gets the step scaling factor.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.GetErrorsFrom(AngleSharp.Html.Dom.IValidityState)">
            <summary>
            Converts the given validity state to a validation error enum.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.CheckTime(AngleSharp.Html.Dom.IValidityState,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Validates the time using the given parameters.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsInvalidPattern(System.String,System.String)">
            <summary>
            Checks if the string does not follow the pattern.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.ToNumber(System.String)">
            <summary>
            Tries to convert the value to a number using the default expression.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.ToTime(System.String,System.Int32@)">
            <summary>
            Tries to convert the value to a time starting at the given position.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.GetWeekOfYear(System.DateTime)">
            <summary>
            Tries to convert the value to a week.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsLegalHour(System.Int32)">
            <summary>
            Checks if the given value is a legal hour.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsLegalSecond(System.Int32)">
            <summary>
            Checks if the given value is a legal second.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsLegalMinute(System.Int32)">
            <summary>
            Checks if the given value is a legal minute.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsLegalMonth(System.Int32)">
            <summary>
            Checks if the given value is a legal month.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsLegalYear(System.Int32)">
            <summary>
            Checks if the given value is a legal year.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsLegalDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the given values form a legal date.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsLegalWeek(System.Int32,System.Int32)">
            <summary>
            Checks if the given values form a legal week.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.IsTimeSeparator(System.Char)">
            <summary>
            Checks if the given character is a valid time separator.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.FetchDigits(System.String)">
            <summary>
            Skips all legit digits while returning the final position.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.InputTypes.BaseInputType.PositionIsValidForDateTime(System.String,System.Int32)">
            <summary>
            Checks the assumption that the string continues with a date time.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.LinkRelNames">
            <summary>
            The collection of (known / used) link rel names.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.StyleSheet">
            <summary>
            The stylesheet relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Import">
            <summary>
            The import relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Author">
            <summary>
            The author relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Prefetch">
            <summary>
            The prefetch relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Icon">
            <summary>
            The icon relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Prev">
            <summary>
            The prev relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Next">
            <summary>
            The next relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.License">
            <summary>
            The license relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Alternate">
            <summary>
            The alternate relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Search">
            <summary>
            The search relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Pingback">
            <summary>
            The pingback relation.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.LinkRelNames.Sidebar">
            <summary>
            The sidebar relation.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.LinkRels.BaseLinkRelation">
            <summary>
            Base type for the all link rel field types.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.LinkRels.BaseLinkRelation.#ctor(AngleSharp.Html.Dom.IHtmlLinkElement,AngleSharp.Io.Processors.IRequestProcessor)">
            <summary>
            Creates a new instance of the relation processor.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.LinkRels.BaseLinkRelation.Processor">
            <summary>
            Gets the assigned request processor.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.LinkRels.BaseLinkRelation.Link">
            <summary>
            Gets the associated link element.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.LinkRels.BaseLinkRelation.Url">
            <summary>
            Gets the currently used URL.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.LinkRels.BaseLinkRelation.LoadAsync">
            <summary>
            Starts loading the associated resource(s) asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngleSharp.Html.LinkRels.ImportLinkRelation.LoadAsync">
            <summary>
            See http://www.w3.org/TR/html-imports/#dfn-import-request.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlDomBuilder">
            <summary>
            Represents the Tree construction as specified in
            8.2.5 Tree construction, on the following page:
            http://www.w3.org/html/wg/drafts/html/master/syntax.html
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.#ctor(AngleSharp.Html.Dom.HtmlDocument)">
            <summary>
            Creates a new instance of the HTML parser with the specified
            document based on the given source manager.
            </summary>
            <param name="document">
            The document instance to be constructed.
            </param>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlDomBuilder.IsFragmentCase">
            <summary>
            Gets if the tree builder has been created for parsing fragments.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlDomBuilder.AdjustedCurrentNode">
            <summary>
            Gets the adjusted current node.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlDomBuilder.CurrentNode">
            <summary>
            Gets the current node.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.ParseAsync(AngleSharp.Html.Parser.HtmlParserOptions,System.Threading.CancellationToken)">
            <summary>
            Parses the given source asynchronously and creates the document.
            </summary>
            <param name="options">The options to use for parsing.</param>
            <param name="cancelToken">The cancellation token to use.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.Parse(AngleSharp.Html.Parser.HtmlParserOptions)">
            <summary>
            Parses the given source and creates the document.
            </summary>
            <param name="options">The options to use for parsing.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.ParseFragment(AngleSharp.Html.Parser.HtmlParserOptions,AngleSharp.Dom.Element)">
            <summary>
            Switches to the fragment algorithm with the specified context
            element. Then parses the given source and creates the document.
            </summary>
            <param name="options">The options to use for parsing.</param>
            <param name="context">
            The context element where the algorithm is applied to.
            </param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.Restart">
            <summary>
            Restarts the parser by resetting the internal state.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.Reset">
            <summary>
            Resets the current insertation mode to the rules according to the
            algorithm specified in 8.2.3.1 The insertion mode.
            http://www.w3.org/html/wg/drafts/html/master/syntax.html#the-insertion-mode
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.Consume(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Consumes a token and processes it.
            </summary>
            <param name="token">The token to consume.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.Home(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Takes the method corresponding to the current insertation mode.
            </summary>
            <param name="token">The token to insert / use.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.Initial(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.1 The "initial" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.BeforeHtml(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.2 The "before html" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.BeforeHead(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.3 The "before head" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InHead(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.4 The "in head" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InHeadNoScript(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.5 The "in head noscript" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AfterHead(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.6 The "after head" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBody(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.7 The "in body" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.Text(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.8 The "text" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InTable(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.9 The "in table" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InTableText(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.10 The "in table text" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InCaption(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.11 The "in caption" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InColumnGroup(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.12 The "in column group" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InTableBody(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.13 The "in table body" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InRow(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.14 The "in row" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InCell(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.15 The "in cell" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InSelect(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.16 The "in select" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InSelectInTable(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.17 The "in select in table" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InTemplate(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.18 The "in template" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AfterBody(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.19 The "after body" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InFrameset(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.20 The "in frameset" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AfterFrameset(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.21 The "after frameset" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AfterAfterBody(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.22 The "after after body" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AfterAfterFrameset(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            See 8.2.5.4.23 The "after after frameset" insertion mode.
            </summary>
            <param name="token">The passed token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.TemplateStep(AngleSharp.Html.Parser.Tokens.HtmlToken,AngleSharp.Html.Parser.HtmlTreeMode)">
            <summary>
            Inserting something in the template.
            </summary>
            <param name="token">The token to insert.</param>
            <param name="mode">The mode to push.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.CloseTemplate">
            <summary>
            Closes the template element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InTableBodyCloseTable(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Closes the table if the section is in table scope.
            </summary>
            <param name="tag">The tag to insert (closes table).</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InSelectEndTagOption(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Acts if a option end tag had been seen in the InSelect state.
            </summary>
            <param name="token">The actual tag token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InSelectEndTagOptgroup(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Acts if a optgroup end tag had been seen in the InSelect state.
            </summary>
            <param name="token">The actual tag token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InColumnGroupEndTagColgroup(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Act as if an colgroup end tag has been found in the InColumnGroup state.
            </summary>
            <param name="token">The actual tag token.</param>
            <returns>True if the token was not ignored, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AfterHeadStartTagBody(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Act as if a body start tag has been found in the AfterHead state.
            </summary>
            <param name="token">The actual tag token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.RawtextAlgorithm(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Follows the generic rawtext parsing algorithm.
            </summary>
            <param name="tag">The given tag token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.RCDataAlgorithm(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Follows the generic RCData parsing algorithm.
            </summary>
            <param name="tag">The given tag token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBodyStartTagListItem(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Acts if a li tag in the InBody state has been found.
            </summary>
            <param name="tag">The actual tag given.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBodyStartTagDefinitionItem(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Acts if a dd or dt tag in the InBody state has been found.
            </summary>
            <param name="tag">The actual tag given.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBodyEndTagBlock(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Acts if a block (button) end tag had been seen in the InBody state.
            </summary>
            <param name="tag">The actual tag given.</param>
            <returns>True if the token was not ignored, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.HeisenbergAlgorithm(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Acts if a nobr tag had been seen in the InBody state.
            </summary>
            <param name="tag">The actual tag given.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.CopyElement(AngleSharp.Dom.Element)">
            <summary>
            Copies the element and its attributes to create a new element.
            </summary>
            <param name="element">The old element (source).</param>
            <returns>The new element (target).</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBodyWithFoster(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Performs the InBody state with foster parenting.
            </summary>
            <param name="token">The given token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBodyEndTagAnythingElse(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Act as if an anything else tag has been found in the InBody state.
            </summary>
            <param name="tag">The actual tag found.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBodyEndTagBody(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Act as if an body end tag has been found in the InBody state.
            </summary>
            <param name="token">The actual tag token.</param>
            <returns>True if the token was not ignored, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBodyStartTagBreakrow(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Act as if an br start tag has been found in the InBody state.
            </summary>
            <param name="tag">The actual tag found.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InBodyEndTagParagraph(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Act as if an p end tag has been found in the InBody state.
            </summary>
            <param name="token">The actual tag token.</param>
            <returns>True if the token was found, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InTableEndTagTable(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Act as if an table end tag has been found in the InTable state.
            </summary>
            <param name="token">The actual tag token.</param>
            <returns>True if the token was not ignored, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InRowEndTagTablerow(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Act as if an tr end tag has been found in the InRow state.
            </summary>
            <param name="token">The actual tag token.</param>
            <returns>True if the token was not ignored, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InSelectEndTagSelect">
            <summary>
            Act as if an select end tag has been found in the InSelect state.
            </summary>
            <returns>True if the token was not ignored, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InCaptionEndTagCaption(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Act as if an caption end tag has been found in the InCaption state.
            </summary>
            <param name="token">The actual tag token.</param>
            <returns>True if the token was not ignored, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.InCellEndTagCell(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            Act as if an td or th end tag has been found in the InCell state.
            </summary>
            <param name="token">The actual tag token.</param>
            <returns>True if the token was not ignored, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.Foreign(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            8.2.5.5 The rules for parsing tokens in foreign content
            </summary>
            <param name="token">The token to examine.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.ForeignSpecialTag(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Processes a special start tag token.
            </summary>
            <param name="tag">The tag token to process.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.CreateForeignElementFrom(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Creates a foreign element from the given html tag.
            </summary>
            <param name="tag">The tag of the foreign element.</param>
            <returns>The element or NULL if it is no MathML or SVG element.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.ForeignNormalTag(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Processes a normal start tag token.
            </summary>
            <param name="tag">The token to process.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.IsInScope(System.String)">
            <summary>
            Determines if the given tag name is in the global scope.
            </summary>
            <param name="tagName">The tag name to check.</param>
            <returns>True if it is in scope, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.IsInScope(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Determines if the given type is in the global scope.
            </summary>
            <returns>True if it is in scope, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.IsInListItemScope">
            <summary>
            Determines if the given tag name is in the list scope.
            </summary>
            <returns>True if it is in scope, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.IsInButtonScope">
            <summary>
            Determines if a paragraph is in the button scope.
            </summary>
            <returns>True if it is in scope, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.IsInTableScope(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Determines if the given type is in the table scope.
            </summary>
            <returns>True if it is in scope, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.IsInTableScope(System.String)">
            <summary>
            Determines if the given tag name is in the table scope.
            </summary>
            <param name="tagName">The tag name to check.</param>
            <returns>True if it is in scope, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.IsInSelectScope(System.String)">
            <summary>
            Determines if the given tag name is in the select scope.
            </summary>
            <param name="tagName">The tag name to check.</param>
            <returns>True if it is in scope, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.HandleScript(AngleSharp.Html.Dom.HtmlScriptElement)">
            <summary>
            Runs a script given by the current node.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.RunScript(AngleSharp.Html.Dom.HtmlScriptElement)">
            <summary>
            Runs the current script element, if there is one.
            </summary>
            <returns>The task waiting for the document to be ready.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.CheckBodyOnClosing(AngleSharp.Html.Parser.Tokens.HtmlToken)">
            <summary>
            If there is a node in the stack of open elements that is not either
            a dd element, a dt element, an li element, a p element, a tbody
            element, a td element, a tfoot element, a th element, a thead
            element, a tr element, the body element, or the html element, then
            this is a parse error.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.TagCurrentlyOpen(System.String)">
            <summary>
            Checks if a tag with the given name is currently open.
            </summary>
            <param name="tagName">The name of the tag to check for.</param>
            <returns>True if such a tag is open, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.PreventNewLine">
            <summary>
            Gets the next token and removes the starting newline, if it has one.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.End">
            <summary>
            8.2.6 The end.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AddRoot(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Adds the root element (html) to the document.
            </summary>
            <param name="tag">The token which started this process.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.CloseCurrentNode">
            <summary>
            Pops the last node from the stack of open nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.SetupElement(AngleSharp.Dom.Element,AngleSharp.Html.Parser.Tokens.HtmlTagToken,System.Boolean)">
            <summary>
            Modifies the node by appending all attributes and
            acknowledging the self-closing flag if set.
            </summary>
            <param name="element">The node which will be added to the list.</param>
            <param name="tag">The associated tag token.</param>
            <param name="acknowledgeSelfClosing">Should the self-closing be acknowledged?</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AddElement(AngleSharp.Html.Parser.Tokens.HtmlTagToken,System.Boolean)">
            <summary>
            Appends a node to the current node and
            modifies the node by appending all attributes and
            acknowledging the self-closing flag if set.
            </summary>
            <param name="tag">The associated tag token.</param>
            <param name="acknowledgeSelfClosing">Should the self-closing be acknowledged?</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AddElement(AngleSharp.Dom.Element,AngleSharp.Html.Parser.Tokens.HtmlTagToken,System.Boolean)">
            <summary>
            Appends a node to the current node and
            modifies the node by appending all attributes and
            acknowledging the self-closing flag if set.
            </summary>
            <param name="element">The node which will be added to the list.</param>
            <param name="tag">The associated tag token.</param>
            <param name="acknowledgeSelfClosing">Should the self-closing be acknowledged?</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AddElement(AngleSharp.Dom.Element)">
            <summary>
            Appends a configured node to the current node.
            </summary>
            <param name="element">The node which will be added to the list.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AddElementWithFoster(AngleSharp.Dom.Element)">
            <summary>
            Appends a node to the appropriate foster parent.
            http://www.w3.org/html/wg/drafts/html/master/syntax.html#foster-parent
            </summary>
            <param name="element">The node which will be added to the list.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AddCharacters(System.String)">
            <summary>
            Inserts the given characters into the current node.
            </summary>
            <param name="text">The characters to insert.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.AddCharactersWithFoster(System.String)">
            <summary>
            Inserts the given character into the foster parent.
            </summary>
            <param name="text">The character to insert.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.ClearStackBackTo(System.String)">
            <summary>
            Clears the stack of open elements back to the given element name.
            </summary>
            <param name="tagName">The tag that will be the CurrentNode.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.ClearStackBackTo(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Clears the stack of open elements back to any heading element.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.GenerateImpliedEndTagsExceptFor(System.String)">
            <summary>
            Generates the implied end tags for the dd, dt, li, option, optgroup, p, rp, rt elements except for
            the tag given.
            </summary>
            <param name="tagName">The tag that will be excluded.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.GenerateImpliedEndTags">
            <summary>
            Generates the implied end tags for the dd, dt, li, option, optgroup, p, rp, rt elements.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlDomBuilder.ReconstructFormatting">
            <summary>
            Reconstruct the list of active formatting elements, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlDomBuilderExtensions">
            <summary>
            Extensions to be used exclusively by the DOM Builder.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlForeignExtensions">
            <summary>
            A collection of useful helpers when working with foreign content.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlForeignExtensions.SanatizeSvgTagName(System.String)">
            <summary>
            Adjusts the tag name to the correct capitalization.
            </summary>
            <param name="localName">The name of adjust.</param>
            <returns>The name with the correct capitalization.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlForeignExtensions.Setup(AngleSharp.Mathml.Dom.MathElement,AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Setups a new math element with the attributes from the token.
            </summary>
            <param name="element">The element to setup.</param>
            <param name="tag">The tag token to use.</param>
            <returns>The finished element.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlForeignExtensions.Setup(AngleSharp.Svg.Dom.SvgElement,AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            Setups a new SVG element with the attributes from the token.
            </summary>
            <param name="element">The element to setup.</param>
            <param name="tag">The tag token to use.</param>
            <returns>The finished element.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlForeignExtensions.AdjustAttribute(AngleSharp.Dom.Element,System.String,System.String)">
            <summary>
            Adds the attribute with the adjusted prefix, namespace and name.
            </summary>
            <param name="element">The element to host the attribute.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlForeignExtensions.AdjustToMathAttribute(System.String)">
            <summary>
            Adjusts the attribute name to the correct capitalization.
            </summary>
            <param name="attributeName">The name of adjust.</param>
            <returns>The name with the correct capitalization.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlForeignExtensions.AdjustToSvgAttribute(System.String)">
            <summary>
            Adjusts the attribute name to the correct capitalization.
            </summary>
            <param name="attributeName">The name of adjust.</param>
            <returns>The name with the correct capitalization.</returns>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlParseError">
            <summary>
            A collection of HTML parse error codes.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.EOF">
            <summary>
            Unexpected end of file detected.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.Null">
            <summary>
            NULL character replaced by repl. character.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.BogusComment">
            <summary>
            Bogus comment.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.AmbiguousOpenTag">
            <summary>
            Ambiguous open tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagClosedWrong">
            <summary>
            The tag has been closed unexpectedly.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.ClosingSlashMisplaced">
            <summary>
            The closing slash has been misplaced.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.UndefinedMarkupDeclaration">
            <summary>
            Undefined markup declaration found.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CommentEndedWithEM">
            <summary>
            Comment ended with an exclamation mark.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CommentEndedWithDash">
            <summary>
            Comment ended with a dash.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CommentEndedUnexpected">
            <summary>
            Comment ended with an unexpected character.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagCannotBeSelfClosed">
            <summary>
            The given tag cannot be self-closed.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.EndTagCannotBeSelfClosed">
            <summary>
            End tags can never be self-closed.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.EndTagCannotHaveAttributes">
            <summary>
            End tags cannot carry attributes.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CaptionNotInScope">
            <summary>
            No caption tag has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.SelectNotInScope">
            <summary>
            No select tag has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TableRowNotInScope">
            <summary>
            No table row has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TableNotInScope">
            <summary>
            No table has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.ParagraphNotInScope">
            <summary>
            No paragraph has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.BodyNotInScope">
            <summary>
            No body has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.BlockNotInScope">
            <summary>
            No block element has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TableCellNotInScope">
            <summary>
            No table cell has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TableSectionNotInScope">
            <summary>
            No table section has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.ObjectNotInScope">
            <summary>
            No object element has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.HeadingNotInScope">
            <summary>
            No heading element has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.ListItemNotInScope">
            <summary>
            No list item has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.FormNotInScope">
            <summary>
            No form has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.ButtonInScope">
            <summary>
            No button has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.NobrInScope">
            <summary>
            No nobr element has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.ElementNotInScope">
            <summary>
            No element has been found within the local scope.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CharacterReferenceWrongNumber">
            <summary>
            Character reference found no numbers.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CharacterReferenceSemicolonMissing">
            <summary>
            Character reference found no semicolon.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CharacterReferenceInvalidRange">
            <summary>
            Character reference within an invalid range.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CharacterReferenceInvalidNumber">
            <summary>
            Character reference is an invalid number.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CharacterReferenceInvalidCode">
            <summary>
            Character reference is an invalid code.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CharacterReferenceNotTerminated">
            <summary>
            Character reference is not terminated by a semicolon.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CharacterReferenceAttributeEqualsFound">
            <summary>
            Character reference in attribute contains an invalid character (=).
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.ItemNotFound">
            <summary>
            The specified item has not been found.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.EncodingError">
            <summary>
            The encoding operation (either encoded or decoding) failed.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoctypeUnexpectedAfterName">
            <summary>
            Doctype unexpected character after the name detected.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoctypePublicInvalid">
            <summary>
            Invalid character in the public identifier detected.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoctypeInvalidCharacter">
            <summary>
            Invalid character in the doctype detected.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoctypeSystemInvalid">
            <summary>
            Invalid character in the system identifier detected.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoctypeTagInappropriate">
            <summary>
            The doctype tag is misplaced and ignored.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoctypeInvalid">
            <summary>
            The given doctype tag is invalid.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoctypeUnexpected">
            <summary>
            Doctype encountered unexpected character.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoctypeMissing">
            <summary>
            The doctype tag is missing.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.NotationPublicInvalid">
            <summary>
            The given public identifier for the notation declaration is invalid.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.NotationSystemInvalid">
            <summary>
            The given system identifier for the notation declaration is invalid.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TypeDeclarationUndefined">
            <summary>
            The type declaration is missing a valid definition.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.QuantifierMissing">
            <summary>
            A required quantifier is missing in the provided expression.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.DoubleQuotationMarkUnexpected">
            <summary>
            The double quotation marks have been misplaced.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.SingleQuotationMarkUnexpected">
            <summary>
            The single quotation marks have been misplaced.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.AttributeNameInvalid">
            <summary>
            The attribute's name contains an invalid character.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.AttributeValueInvalid">
            <summary>
            The attribute's value contains an invalid character.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.AttributeNameExpected">
            <summary>
            The beginning of a new attribute has been expected.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.AttributeDuplicateOmitted">
            <summary>
            The attribute has already been added.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagMustBeInHead">
            <summary>
            The given tag must be placed in head tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagInappropriate">
            <summary>
            The given tag is not appropriate for the current position.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagCannotEndHere">
            <summary>
            The given tag cannot end at the current position.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagCannotStartHere">
            <summary>
            The given tag cannot start at the current position.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.FormInappropriate">
            <summary>
            The given form cannot be placed at the current position.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.InputUnexpected">
            <summary>
            The given input cannot be placed at the current position.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagClosingMismatch">
            <summary>
            The closing tag and the currently open tag do not match.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagDoesNotMatchCurrentNode">
            <summary>
            The given end tag does not match the current node.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.LineBreakUnexpected">
            <summary>
            This position does not support a linebreak (LF, FF).
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.HeadTagMisplaced">
            <summary>
            The head tag can only be placed once inside the html tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.HtmlTagMisplaced">
            <summary>
            The html tag can only be placed once as the root element.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.BodyTagMisplaced">
            <summary>
            The body tag can only be placed once inside the html tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.ImageTagNamedWrong">
            <summary>
            The image tag has been named image instead of img.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TableNesting">
            <summary>
            Tables cannot be nested.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.IllegalElementInTableDetected">
            <summary>
            An illegal element has been detected in a table.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.SelectNesting">
            <summary>
            Select elements cannot be nested.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.IllegalElementInSelectDetected">
            <summary>
            An illegal element has been detected in a select.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.FramesetMisplaced">
            <summary>
            The frameset element has been misplaced.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.HeadingNested">
            <summary>
            Headings cannot be nested.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.AnchorNested">
            <summary>
            Anchor elements cannot be nested.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TokenNotPossible">
            <summary>
            The given token cannot be inserted here.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CurrentNodeIsNotRoot">
            <summary>
            The current node is not the root element.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.CurrentNodeIsRoot">
            <summary>
            The current node is the root element.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.TagInvalidInFragmentMode">
            <summary>
            This tag is invalid in fragment mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.FormAlreadyOpen">
            <summary>
            There is already an open form.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.FormClosedWrong">
            <summary>
            The form has been closed wrong.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.BodyClosedWrong">
            <summary>
            The body has been closed wrong.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseError.FormattingElementNotFound">
            <summary>
            An expected formatting element has not been found.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlParseException">
            <summary>
            Exception that is thrown if an ill-formatted HTML document is parsed
            in strict mode.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParseException.#ctor(System.Int32,System.String,AngleSharp.Text.TextPosition)">
            <summary>
            Creates a new HtmlParseException.
            </summary>
            <param name="code">The provided error code.</param>
            <param name="message">The associated error message.</param>
            <param name="position">The position in the source.</param>
            
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParseException.Position">
            <summary>
            Gets the position of the error.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParseException.Code">
            <summary>
            Gets the provided error code.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlParseMode">
            <summary>
            Defines the different tokenization content models.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseMode.PCData">
            <summary>
            Initial state: Parsed Character Data (characters will be parsed).
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseMode.RCData">
            <summary>
            Optional state: Raw character data (characters will be parsed from a special table).
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseMode.Plaintext">
            <summary>
            Optional state: Just plain text data (chracters will be parsed matching the given ones).
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseMode.Rawtext">
            <summary>
            Optional state: Rawtext data (characters will not be parsed).
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlParseMode.Script">
            <summary>
            Optional state: Script data.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlParser">
            <summary>
            Creates an instance of the HTML parser front-end.
            </summary>
        </member>
        <member name="E:AngleSharp.Html.Parser.HtmlParser.Parsing">
            <summary>
            Fired when the HTML parser is starting.
            </summary>
        </member>
        <member name="E:AngleSharp.Html.Parser.HtmlParser.Parsed">
            <summary>
            Fired when the HTML parser is finished.
            </summary>
        </member>
        <member name="E:AngleSharp.Html.Parser.HtmlParser.Error">
            <summary>
            Fired when a HTML parse error is encountered.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.#ctor">
            <summary>
            Creates a new parser with the default options and context.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.#ctor(AngleSharp.Html.Parser.HtmlParserOptions)">
            <summary>
            Creates a new parser with the custom options.
            </summary>
            <param name="options">The options to use.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.#ctor(AngleSharp.IBrowsingContext)">
            <summary>
            Creates a new parser with the custom context.
            </summary>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.#ctor(AngleSharp.Html.Parser.HtmlParserOptions,AngleSharp.IBrowsingContext)">
            <summary>
            Creates a new parser with the custom options and the given context.
            </summary>
            <param name="options">The options to use.</param>
            <param name="context">The context to use.</param>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParser.Options">
            <summary>
            Gets the specified options.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.ParseDocument(System.String)">
            <summary>
            Parses the string and returns the result.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.ParseFragment(System.String,AngleSharp.Dom.IElement)">
            <summary>
            Parses the string and returns the result.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.ParseDocument(System.IO.Stream)">
            <summary>
            Parses the stream and returns the result.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.ParseDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Parses the string asynchronously with option to cancel.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParser.ParseDocumentAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses the stream asynchronously with option to cancel.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlParserExtensions">
            <summary>
            Extensions for the IHtmlParser instances.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParserExtensions.ParseDocumentAsync(AngleSharp.Html.Parser.IHtmlParser,System.String)">
            <summary>
            Parses the string asynchronously.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParserExtensions.ParseDocumentAsync(AngleSharp.Html.Parser.IHtmlParser,System.IO.Stream)">
            <summary>
            Parses the stream asynchronously.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlParserExtensions.ParseDocumentAsync(AngleSharp.Html.Parser.IHtmlParser,AngleSharp.Dom.IDocument)">
            <summary>
            Populates the given document asynchronously.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlParserOptions">
            <summary>
            Contains a number of options for the HTML parser.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParserOptions.IsEmbedded">
            <summary>
            Gets or sets if the document is embedded.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParserOptions.IsNotSupportingFrames">
            <summary>
            Gets or sets if frames should not be supported. Once
            set this will ignore frame elements and respect
            noframes elements.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParserOptions.IsScripting">
            <summary>
            Gets or sets if scripting is allowed.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParserOptions.IsStrictMode">
            <summary>
            Gets or sets if errors should be treated as exceptions.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParserOptions.IsSupportingProcessingInstructions">
            <summary>
            Gets or sets if XML processing instructions should be
            parsed into DOM nodes.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParserOptions.IsKeepingSourceReferences">
            <summary>
            Gets or sets if references to the original source document
            should be kept on the elements in form of their tokens.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlParserOptions.OnCreated">
            <summary>
            Gets or sets the callback once a new element was created.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlTokenizer">
            <summary>
            Performs the tokenization of the source code. Follows the tokenization algorithm at:
            http://www.w3.org/html/wg/drafts/html/master/syntax.html
            </summary>
        </member>
        <member name="E:AngleSharp.Html.Parser.HtmlTokenizer.Error">
            <summary>
            Fired in case of a parse error.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.#ctor(AngleSharp.Text.TextSource,AngleSharp.Dom.IEntityProvider)">
            <summary>
            See 8.2.4 Tokenization
            </summary>
            <param name="source">The source code manager.</param>
            <param name="resolver">The entity resolver to use.</param>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlTokenizer.IsAcceptingCharacterData">
            <summary>
            Gets or sets if CDATA sections are accepted.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlTokenizer.State">
            <summary>
            Gets or sets the current parse mode.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlTokenizer.IsStrictMode">
            <summary>
            Gets or sets if strict mode is used.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.HtmlTokenizer.IsSupportingProcessingInstructions">
            <summary>
            Gets or sets if XML processing instructions should
            be parsed into DOM nodes.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.Get">
            <summary>
            Gets the next available token.
            </summary>
            <returns>The next available token.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.Data(System.Char)">
            <summary>
            See 8.2.4.1 Data state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.Plaintext(System.Char)">
            <summary>
            See 8.2.4.7 PLAINTEXT state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.RCData(System.Char)">
            <summary>
            See 8.2.4.3 RCDATA state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.RCDataLt(System.Char)">
            <summary>
            See 8.2.4.11 RCDATA less-than sign state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.RCDataNameEndTag(System.Char)">
            <summary>
            See 8.2.4.13 RCDATA end tag name state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.Rawtext(System.Char)">
            <summary>
            See 8.2.4.5 RAWTEXT state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.RawtextLT(System.Char)">
            <summary>
            See 8.2.4.14 RAWTEXT less-than sign state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.RawtextNameEndTag(System.Char)">
            <summary>
            See 8.2.4.16 RAWTEXT end tag name state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.CharacterData(System.Char)">
            <summary>
            See 8.2.4.68 CDATA section state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.AppendCharacterReference(System.Char,System.Char)">
            <summary>
            See 8.2.4.69 Tokenizing character references
            </summary>
            <param name="c">The next input character.</param>
            <param name="allowedCharacter">The additionally allowed character if there is one.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.TagOpen(System.Char)">
            <summary>
            See 8.2.4.8 Tag open state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.TagEnd(System.Char)">
            <summary>
            See 8.2.4.9 End tag open state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.TagName(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            See 8.2.4.10 Tag name state
            </summary>
            <param name="tag">The current tag token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.TagSelfClosing(AngleSharp.Html.Parser.Tokens.HtmlTagToken)">
            <summary>
            See 8.2.4.43 Self-closing start tag state
            </summary>
            <param name="tag">The current tag token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.MarkupDeclaration(System.Char)">
            <summary>
            See 8.2.4.45 Markup declaration open state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.BogusComment(System.Char)">
            <summary>
            See 8.2.4.44 Bogus comment state
            </summary>
            <param name="c">The current character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.CommentStart(System.Char)">
            <summary>
            See 8.2.4.46 Comment start state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.CommentDashStart(System.Char)">
            <summary>
            See 8.2.4.47 Comment start dash state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.Comment(System.Char)">
            <summary>
            See 8.2.4.48 Comment state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.CommentDashEnd(System.Char)">
            <summary>
            See 8.2.4.49 Comment end dash state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.CommentEnd(System.Char)">
            <summary>
            See 8.2.4.50 Comment end state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.CommentBangEnd(System.Char)">
            <summary>
            See 8.2.4.51 Comment end bang state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.Doctype(System.Char)">
            <summary>
            See 8.2.4.52 DOCTYPE state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeNameBefore(System.Char)">
            <summary>
            See 8.2.4.53 Before DOCTYPE name state
            </summary>
            <param name="c">The next input character.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeName(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.54 DOCTYPE name state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeNameAfter(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.55 After DOCTYPE name state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypePublic(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.56 After DOCTYPE public keyword state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypePublicIdentifierBefore(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.57 Before DOCTYPE public identifier state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypePublicIdentifierDoubleQuoted(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.58 DOCTYPE public identifier (double-quoted) state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypePublicIdentifierSingleQuoted(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.59 DOCTYPE public identifier (single-quoted) state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypePublicIdentifierAfter(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.60 After DOCTYPE public identifier state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeBetween(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.61 Between DOCTYPE public and system identifiers state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeSystem(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.62 After DOCTYPE system keyword state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeSystemIdentifierBefore(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.63 Before DOCTYPE system identifier state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeSystemIdentifierDoubleQuoted(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.64 DOCTYPE system identifier (double-quoted) state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeSystemIdentifierSingleQuoted(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.65 DOCTYPE system identifier (single-quoted) state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.DoctypeSystemIdentifierAfter(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.66 After DOCTYPE system identifier state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.HtmlTokenizer.BogusDoctype(AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken)">
            <summary>
            See 8.2.4.67 Bogus DOCTYPE state
            </summary>
            <param name="doctype">The current doctype token.</param>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlTokenType">
            <summary>
            An enumation of all possible tokens.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTokenType.Doctype">
            <summary>
            The DOCTYPE token.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTokenType.StartTag">
            <summary>
            The start tag token to mark open tags.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTokenType.EndTag">
            <summary>
            The end tag token to mark ending tags.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTokenType.Comment">
            <summary>
            The comment tag to mark comments.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTokenType.Character">
            <summary>
            The character token to mark a character data.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTokenType.EndOfFile">
            <summary>
            The End-Of-File token to mark the end.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.HtmlTreeMode">
            <summary>
            Possible insertation mode values.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.Initial">
            <summary>
            Initial insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.BeforeHtml">
            <summary>
            Before the html tag insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.BeforeHead">
            <summary>
            Before the head tag insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InHead">
            <summary>
            Within the head tag insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InHeadNoScript">
            <summary>
            Within the head tag in a noscript section.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.AfterHead">
            <summary>
            After the head tag insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InBody">
            <summary>
            Within the body tag insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.Text">
            <summary>
            Within some text area insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InTable">
            <summary>
            Within a table tag insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InCaption">
            <summary>
            Within the table caption tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InColumnGroup">
            <summary>
            Within the column group tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InTableBody">
            <summary>
            Within the table body tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InRow">
            <summary>
            Within a table row tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InCell">
            <summary>
            Within a table division tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InSelect">
            <summary>
            Within a select tag insertation mode.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InSelectInTable">
            <summary>
            Within a select tag in a table.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InTemplate">
            <summary>
            Within the template tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.AfterBody">
            <summary>
            After the body tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.InFrameset">
            <summary>
            Within the frameset tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.AfterFrameset">
            <summary>
            After the frameset tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.AfterAfterBody">
            <summary>
            After the after the body tag.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.Parser.HtmlTreeMode.AfterAfterFrameset">
            <summary>
            Once we are far behind the frameset tag.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.IHtmlParser">
            <summary>
            Represents the interface of an HTML parser.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.IHtmlParser.ParseDocument(System.String)">
            <summary>
            Parses the string and returns the result.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.IHtmlParser.ParseDocument(System.IO.Stream)">
            <summary>
            Parses the stream and returns the result.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.IHtmlParser.ParseFragment(System.String,AngleSharp.Dom.IElement)">
            <summary>
            Parses the string and returns the result.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.IHtmlParser.ParseDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Parses the string asynchronously.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.IHtmlParser.ParseDocumentAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses the stream asynchronously.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.IHtmlParser.ParseDocumentAsync(AngleSharp.Dom.IDocument,System.Threading.CancellationToken)">
            <summary>
            Populates the given HTML document asynchronously.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.TokenizerExtensions">
            <summary>
            Extensions to access the underying tokenizer.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.TokenizerExtensions.Tokenize(AngleSharp.Text.TextSource,AngleSharp.Dom.IEntityProvider,System.EventHandler{AngleSharp.Html.Dom.Events.HtmlErrorEvent})">
            <summary>
            Performs the tokenization on the given text source.
            </summary>
            <param name="source">The source of the tokenization.</param>
            <param name="provider">The custom entity provider, if any.</param>
            <param name="errorHandler">The error handler to be used, if any.</param>
            <returns>A stream of consumed tokens.</returns>
        </member>
        <member name="T:AngleSharp.Html.Parser.Tokens.HtmlAttributeToken">
            <summary>
            The token representation of an HTML tag attribute.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlAttributeToken.#ctor(AngleSharp.Text.TextPosition,System.String,System.String)">
            <summary>
            Creates a new attribute token using the provided information.
            </summary>
            <param name="position">The start position of the attribute's name.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlAttributeToken.Name">
            <summary>
            Gets the attribute's name.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlAttributeToken.Value">
            <summary>
            Gets the attribute's value.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlAttributeToken.Position">
            <summary>
            Gets the position of the token.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken">
            <summary>
            The DOCTYPE token.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.#ctor(System.Boolean,AngleSharp.Text.TextPosition)">
            <summary>
            Creates a new DOCTYPE token with the quirks mode set initially.
            </summary>
            <param name="quirksForced">The state of the force-quirks flag.</param>
            <param name="position">The token's position.</param>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.IsQuirksForced">
            <summary>
            Gets or sets the state of the force-quirks flag.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.IsPublicIdentifierMissing">
            <summary>
            Gets the state of the public identifier.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.IsSystemIdentifierMissing">
            <summary>
            Gets the state of the system identifier.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.PublicIdentifier">
            <summary>
            Gets or sets the value of the public identifier.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.SystemIdentifier">
            <summary>
            Gets or sets the value of the system identifier.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.IsLimitedQuirks">
            <summary>
            Gets if the given doctype token represents a limited quirks mode state.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.IsFullQuirks">
            <summary>
            Gets if the given doctype token represents a full quirks mode state.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken.IsValid">
            <summary>
            Gets the status if the given doctype token matches one of the popular conditions.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.Parser.Tokens.HtmlTagToken">
            <summary>
            Class for StartTagToken and EndTagToken.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlTagToken.#ctor(AngleSharp.Html.Parser.HtmlTokenType,AngleSharp.Text.TextPosition)">
            <summary>
            Sets the default values.
            </summary>
            <param name="type">The type of the tag token.</param>
            <param name="position">The token's position.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlTagToken.#ctor(AngleSharp.Html.Parser.HtmlTokenType,AngleSharp.Text.TextPosition,System.String)">
            <summary>
            Creates a new HTML TagToken with the defined name.
            </summary>
            <param name="type">The type of the tag token.</param>
            <param name="position">The token's position.</param>
            <param name="name">The name of the tag.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlTagToken.Open(System.String)">
            <summary>
            Creates a new opening HtmlTagToken for the given name.
            </summary>
            <param name="name">The name of the tag.</param>
            <returns>The new HTML tag token.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlTagToken.Close(System.String)">
            <summary>
            Creates a new closing HtmlTagToken for the given name.
            </summary>
            <param name="name">The name of the tag.</param>
            <returns>The new HTML tag token.</returns>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlTagToken.IsSelfClosing">
            <summary>
            Gets or sets the state of the self-closing flag.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlTagToken.Attributes">
            <summary>
            Gets the list of attributes.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlTagToken.AddAttribute(System.String,AngleSharp.Text.TextPosition)">
            <summary>
            Adds a new attribute to the list of attributes. The value will
            be set to an empty string.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="position">The starting position of the attribute.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlTagToken.AddAttribute(System.String,System.String)">
            <summary>
            Adds a new attribute to the list of attributes.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlTagToken.SetAttributeValue(System.String)">
            <summary>
            Sets the value of the last added attribute.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlTagToken.GetAttribute(System.String)">
            <summary>
            Gets the value of the attribute with the given name or an empty
            string if the attribute is not available.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="T:AngleSharp.Html.Parser.Tokens.HtmlToken">
            <summary>
            The abstract base class of top-level HTML tokens.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlToken.#ctor(AngleSharp.Html.Parser.HtmlTokenType,AngleSharp.Text.TextPosition,System.String)">
            <summary>
            Creates a new HTML token.
            </summary>
            <param name="type">The exact type of the token.</param>
            <param name="position">The token's text position.</param>
            <param name="name">The optional name of the token, if any.</param>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.HasContent">
            <summary>
            Gets if the character data contains actually a non-space character.
            </summary>
            <returns>True if the character data contains space character.</returns>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.Name">
            <summary>
            Gets or sets the name of a tag token.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.IsEmpty">
            <summary>
            Gets if the character data is empty (null or length equal to zero).
            </summary>
            <returns>True if the character data is actually NULL or empty.</returns>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.Data">
            <summary>
            Gets the data of the comment or character token.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.Position">
            <summary>
            Gets the position of the token.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.IsHtmlCompatible">
            <summary>
            Gets if the token can be used with IsHtmlTIP properties.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.IsSvg">
            <summary>
            Gets if the given token is a SVG root start tag.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.IsMathCompatible">
            <summary>
            Gets if the token can be used with IsMathMLTIP properties.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.Type">
            <summary>
            Gets the type of the token.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.Parser.Tokens.HtmlToken.IsProcessingInstruction">
            <summary>
            Indicates that this comment token is a processing instruction.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlToken.TrimStart">
            <summary>
            Removes all ignorable characters from the beginning.
            </summary>
            <returns>The trimmed characters.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlToken.RemoveNewLine">
            <summary>
            Removes the a new line in the beginning, if any.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlToken.AsTag">
            <summary>
            Converts the current token to a tag token.
            </summary>
            <returns>The tag token instance.</returns>
        </member>
        <member name="M:AngleSharp.Html.Parser.Tokens.HtmlToken.IsStartTag(System.String)">
            <summary>
            Finds out if the current token is a start tag token with the given name.
            </summary>
            <param name="name">The name of the tag.</param>
            <returns>True if the token is indeed a start tag token with the given name, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Html.PrettyMarkupFormatter">
            <summary>
            Represents the an HTML5 markup formatter with inserted indents.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.PrettyMarkupFormatter.#ctor">
            <summary>
            Creates a new instance of the pretty markup formatter.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.PrettyMarkupFormatter.Indentation">
            <summary>
            Gets or sets the indentation string.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.PrettyMarkupFormatter.NewLine">
            <summary>
            Gets or sets the newline string.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.SourceSet">
            <summary>
            Represents a useful helper for dealing with source sets.
            </summary>
        </member>
        <member name="M:AngleSharp.Html.SourceSet.Parse(System.String)">
            <summary>
            Parses the given srcset attribute into an enumeration of candidates.
            </summary>
            <param name="srcset">The value of the srcset attribute.</param>
            <returns>The iterator yielding the various candidates.</returns>
        </member>
        <member name="M:AngleSharp.Html.SourceSet.GetCandidates(System.String,System.String)">
            <summary>
            Gets the promising candidates from the given srcset using the provided sizes.
            </summary>
            <param name="srcset">The value of the srcset attribute.</param>
            <param name="sizes">The value of the sizes attribute.</param>
            <returns>An iterator of the different URLs yielding matching images.</returns>
        </member>
        <member name="T:AngleSharp.Html.SourceSet.ImageCandidate">
            <summary>
            Represents a srcset image candidate.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.SourceSet.ImageCandidate.Url">
            <summary>
            The URL of the given image.
            </summary>
        </member>
        <member name="P:AngleSharp.Html.SourceSet.ImageCandidate.Descriptor">
            <summary>
            The descriptor of the given image.
            </summary>
        </member>
        <member name="T:AngleSharp.Html.ValidationErrors">
            <summary>
            Describes the various validation errors.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.None">
            <summary>
            No errors.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.ValueMissing">
            <summary>
            The required value is missing.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.TypeMismatch">
            <summary>
            The inferred type is not correct.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.PatternMismatch">
            <summary>
            The given pattern is not matched.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.TooLong">
            <summary>
            The value is too long.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.TooShort">
            <summary>
            The value is too short.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.RangeUnderflow">
            <summary>
            The given value is too small.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.RangeOverflow">
            <summary>
            The given value is too large.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.StepMismatch">
            <summary>
            The discrete step is not matched.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.BadInput">
            <summary>
            The input was classified as invalid.
            </summary>
        </member>
        <member name="F:AngleSharp.Html.ValidationErrors.Custom">
            <summary>
            A custom error appeared.
            </summary>
        </member>
        <member name="T:AngleSharp.IBrowsingContext">
            <summary>
            Represents the browsing context interface.
            </summary>
        </member>
        <member name="P:AngleSharp.IBrowsingContext.Current">
            <summary>
            Gets the current window proxy.
            </summary>
        </member>
        <member name="P:AngleSharp.IBrowsingContext.Active">
            <summary>
            Gets or sets the currently active document.
            </summary>
        </member>
        <member name="P:AngleSharp.IBrowsingContext.SessionHistory">
            <summary>
            Gets the session history of the given browsing context.
            </summary>
        </member>
        <member name="P:AngleSharp.IBrowsingContext.Security">
            <summary>
            Gets the sandboxing flag of the context.
            </summary>
        </member>
        <member name="P:AngleSharp.IBrowsingContext.Parent">
            <summary>
            Gets the parent of the current context, if any. If a parent is
            available, then the current context contains only embedded
            documents.
            </summary>
        </member>
        <member name="P:AngleSharp.IBrowsingContext.Creator">
            <summary>
            Gets the document that created the current context, if any. The
            creator is the active document of the parent at the time of
            creation.
            </summary>
        </member>
        <member name="M:AngleSharp.IBrowsingContext.GetService``1">
            <summary>
            Gets an instance of the given service.
            </summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>The instance of the service or null.</returns>
        </member>
        <member name="M:AngleSharp.IBrowsingContext.GetServices``1">
            <summary>
            Gets all registered instances of the given service.
            </summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>An enumerable with all service instances.</returns>
        </member>
        <member name="M:AngleSharp.IBrowsingContext.CreateChild(System.String,AngleSharp.Browser.Sandboxes)">
            <summary>
            Creates a new browsing context with the given name, instructed by
            the specified document.
            </summary>
            <param name="name">The name of the new context.</param>
            <param name="security">The sandboxing flag to use.</param>
            <returns>The created browsing context.</returns>
        </member>
        <member name="M:AngleSharp.IBrowsingContext.FindChild(System.String)">
            <summary>
            Tries to find a browsing context with the given name.
            </summary>
            <param name="name">The name of the context.</param>
            <returns>A context with the name, otherwise null.</returns>
        </member>
        <member name="T:AngleSharp.IConfiguration">
            <summary>
            Represents the interface for a general setup of AngleSharp
            or a particular AngleSharp request.
            </summary>
        </member>
        <member name="P:AngleSharp.IConfiguration.Services">
            <summary>
            Gets an enumeration over the available services.
            </summary>
        </member>
        <member name="T:AngleSharp.IMarkupFormattable">
            <summary>
            Allows basic serialization.
            </summary>
        </member>
        <member name="M:AngleSharp.IMarkupFormattable.ToHtml(System.IO.TextWriter,AngleSharp.IMarkupFormatter)">
            <summary>
            Writes the serialization of the node guided by the formatter.
            </summary>
            <param name="writer">The output target of the serialization.</param>
            <param name="formatter">The formatter to use.</param>
        </member>
        <member name="T:AngleSharp.IMarkupFormatter">
            <summary>
            Basic interface for HTML node serialization.
            </summary>
        </member>
        <member name="M:AngleSharp.IMarkupFormatter.Text(AngleSharp.Dom.ICharacterData)">
            <summary>
            Formats the given text.
            </summary>
            <param name="text">The text to sanatize.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:AngleSharp.IMarkupFormatter.Comment(AngleSharp.Dom.IComment)">
            <summary>
            Formats the given comment.
            </summary>
            <param name="comment">The comment to stringify.</param>
            <returns>The formatted comment.</returns>
        </member>
        <member name="M:AngleSharp.IMarkupFormatter.Processing(AngleSharp.Dom.IProcessingInstruction)">
            <summary>
            Formats the given processing instruction using the target and the
            data.
            </summary>
            <param name="processing">
            The processing instruction to stringify.
            </param>
            <returns>The formatted processing instruction.</returns>
        </member>
        <member name="M:AngleSharp.IMarkupFormatter.Doctype(AngleSharp.Dom.IDocumentType)">
            <summary>
            Formats the given doctype using the name, public and system
            identifiers.
            </summary>
            <param name="doctype">The document type to stringify.</param>
            <returns>The formatted doctype.</returns>
        </member>
        <member name="M:AngleSharp.IMarkupFormatter.OpenTag(AngleSharp.Dom.IElement,System.Boolean)">
            <summary>
            Formats opening a tag with the given name.
            </summary>
            <param name="element">The element to open.</param>
            <param name="selfClosing">
            Is the element actually self-closing?
            </param>
            <returns>The formatted opening tag.</returns>
        </member>
        <member name="M:AngleSharp.IMarkupFormatter.CloseTag(AngleSharp.Dom.IElement,System.Boolean)">
            <summary>
            Formats closing a tag with the given name.
            </summary>
            <param name="element">The element to close.</param>
            <param name="selfClosing">
            Is the element actually self-closing?
            </param>
            <returns>The formatted closing tag.</returns>
        </member>
        <member name="M:AngleSharp.IMarkupFormatter.Attribute(AngleSharp.Dom.IAttr)">
            <summary>
            Formats an attribute specified by the argument.
            </summary>
            <param name="attribute">The attribute to serialize.</param>
            <returns>The formatted attribute.</returns>
        </member>
        <member name="T:AngleSharp.Io.BaseLoader">
            <summary>
            Represents the base class for all loaders.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.#ctor(AngleSharp.IBrowsingContext,System.Predicate{AngleSharp.Io.Request})">
            <summary>
            Creates a new resource loader.
            </summary>
            <param name="context">The context to use.</param>
            <param name="filter">The optional request filter to use.</param>
        </member>
        <member name="P:AngleSharp.Io.BaseLoader.MaxRedirects">
            <summary>
            Gets the maximum number of redirects. By default this is 50.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.Add(AngleSharp.Io.IDownload)">
            <summary>
            Adds the download to the active downloads.
            </summary>
            <param name="download">The download to add.</param>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.Remove(AngleSharp.Io.IDownload)">
            <summary>
            Removes the download from the active downloads.
            </summary>
            <param name="download">The download to remove.</param>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.GetCookie(AngleSharp.Url)">
            <summary>
            Gets the cookie string for the given URL.
            </summary>
            <param name="url">The requested URL.</param>
            <returns>The associated cookie string, if any.</returns>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.SetCookie(AngleSharp.Url,System.String)">
            <summary>
            Sets the cookie string for the given URL.
            </summary>
            <param name="url">The requested URL.</param>
            <param name="value">The value of the cookie.</param>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.DownloadAsync(AngleSharp.Io.Request,AngleSharp.Dom.INode)">
            <summary>
            Starts downloading the request.
            </summary>
            <param name="request">The request data.</param>
            <param name="originator">The request's originator.</param>
            <returns>The active download.</returns>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.GetDownloads">
            <summary>
            Gets the active downloads.
            </summary>
            <returns>The enumerable over all active downloads.</returns>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.LoadAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Loads the given URI by using an asynchronous request.
            </summary>
            <param name="request">The data of the request to send.</param>
            <param name="cancel">The cancellation token to use..</param>
            <returns>
            The task which will eventually return the response.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.BaseLoader.CreateNewRequest(AngleSharp.Io.Request,AngleSharp.Io.IResponse)">
            <summary>
            Creates a new request based on the existing request and given response.
            </summary>
            <param name="request">The previous request.</param>
            <param name="response">The response to the previous request.</param>
            <returns>The new request to issue.</returns>
        </member>
        <member name="T:AngleSharp.Io.BaseRequester">
            <summary>
            Represents a useful abstraction for requesters.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.BaseRequester.Requesting">
            <summary>
            Fired when a request is starting.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.BaseRequester.Requested">
            <summary>
            Fired when a request is finished.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.BaseRequester.RequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>
            The task that will eventually give the response data.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.BaseRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">
            The protocol to check for, e.g. http.
            </param>
            <returns>
            True if the protocol is supported, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.BaseRequester.PerformRequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs the actual request asynchronously.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>The task resulting in the response.</returns>
        </member>
        <member name="T:AngleSharp.Io.CorsRequest">
            <summary>
            Represents the arguments to perform a fetch with CORS.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.CorsRequest.#ctor(AngleSharp.Io.ResourceRequest)">
            <summary>
            Creates a new CORS enabled request.
            </summary>
            <param name="request">The original request.</param>
        </member>
        <member name="P:AngleSharp.Io.CorsRequest.Request">
            <summary>
            Gets the original request to perform.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.CorsRequest.Setting">
            <summary>
            Gets or sets the CORS settings to use.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.CorsRequest.Behavior">
            <summary>
            Gets or sets the behavior in case of no CORS.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.CorsRequest.Integrity">
            <summary>
            Gets or sets the integrity provider, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.CorsSetting">
            <summary>
            CORS settings attributes (see 2.6.6).
            </summary>
        </member>
        <member name="F:AngleSharp.Io.CorsSetting.None">
            <summary>
            The default (missing) value.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.CorsSetting.Anonymous">
            <summary>
            Cross-origin CORS requests for the element will have the omit 
            credentials flag set. 
            </summary>
        </member>
        <member name="F:AngleSharp.Io.CorsSetting.UseCredentials">
            <summary>
            Cross-origin CORS requests for the element will not have the omit 
            credentials flag set
            </summary>
        </member>
        <member name="T:AngleSharp.Io.DefaultDocumentLoader">
            <summary>
            Represents the default document loader. This class can be inherited.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.DefaultDocumentLoader.#ctor(AngleSharp.IBrowsingContext,System.Predicate{AngleSharp.Io.Request})">
            <summary>
            Creates a new document loader.
            </summary>
            <param name="context">The context to use.</param>
            <param name="filter">The optional request filter to use.</param>
        </member>
        <member name="M:AngleSharp.Io.DefaultDocumentLoader.FetchAsync(AngleSharp.Io.DocumentRequest)">
            <summary>
            Loads the data for the request asynchronously.
            </summary>
            <param name="request">The issued request.</param>
            <returns>The active download.</returns>
        </member>
        <member name="T:AngleSharp.Io.DefaultHttpRequester">
            <summary>
            The default (ready-to-use) HTTP requester.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.DefaultHttpRequester.#ctor(System.String,System.Action{System.Net.HttpWebRequest})">
            <summary>
            Constructs a default HTTP requester with the information presented
            in the info object.
            </summary>
            <param name="userAgent">The user-agent name to use, if any.</param>
            <param name="setup">An optional setup function for the HttpWebRequest object.</param>
        </member>
        <member name="P:AngleSharp.Io.DefaultHttpRequester.Headers">
            <summary>
            Gets the used headers.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DefaultHttpRequester.Timeout">
            <summary>
            Gets or sets the timeout value.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.DefaultHttpRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">
            The protocol to check for, e.g. http.
            </param>
            <returns>
            True if the protocol is supported, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.DefaultHttpRequester.PerformRequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous http request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancellationToken">
            The token for cancelling the task.
            </param>
            <returns>
            The task that will eventually give the response data.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.DefaultHttpRequester.RequestState.Stringify(System.Net.Cookie)">
            <summary>
            Dirty workaround to re-obtain the string representation of the cookie
            for the set-cookie header. Uses the internal ToServerString method and
            falls back to the ordinary ToString.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.DefaultHttpRequester.RequestState.AddHeader(System.String,System.String)">
            <summary>
            Dirty dirty workaround since the webrequester itself is already
            quite stupid, but the one here (for the PCL) is really not the
            way things should be programmed ...
            </summary>
        </member>
        <member name="M:AngleSharp.Io.DefaultHttpRequester.RequestState.SetProperty(System.String,System.Object)">
            <summary>
            Sets properties of the special headers (described here
            http://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.headers.aspx)
            which are not accessible (in general) in this profile
            (profile78). However, usually they are here and can be modified
            with reflection. If not they are not set.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">
            The value of the property, which will be set.
            </param>
        </member>
        <member name="T:AngleSharp.Io.DefaultResourceLoader">
            <summary>
            Represents the default resource loader. This class can be inherited.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.DefaultResourceLoader.#ctor(AngleSharp.IBrowsingContext,System.Predicate{AngleSharp.Io.Request})">
            <summary>
            Creates a new resource loader.
            </summary>
            <param name="context">The context to use.</param>
            <param name="filter">The optional request filter to use.</param>
        </member>
        <member name="M:AngleSharp.Io.DefaultResourceLoader.FetchAsync(AngleSharp.Io.ResourceRequest)">
            <summary>
            Loads the data for the request asynchronously.
            </summary>
            <param name="request">The issued request.</param>
            <returns>The active download.</returns>
        </member>
        <member name="T:AngleSharp.Io.DefaultResponse">
            <summary>
            The default HTTP response encapsulation object.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.DefaultResponse.#ctor">
            <summary>
            Creates a new default response object.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DefaultResponse.StatusCode">
            <summary>
            Gets or sets the status code of the response.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DefaultResponse.Address">
            <summary>
            Gets or sets the url of the response.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DefaultResponse.Headers">
            <summary>
            Gets or sets the headers (key-value pairs) of the response.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DefaultResponse.Content">
            <summary>
            Gets or sets a stream for content of the response.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.DocumentRequest">
            <summary>
            Represents the arguments to load a document.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.DocumentRequest.#ctor(AngleSharp.Url)">
            <summary>
            Creates a new document request for the given url.
            </summary>
            <param name="target">The resource's url.</param>
        </member>
        <member name="M:AngleSharp.Io.DocumentRequest.Get(AngleSharp.Url,AngleSharp.Dom.INode,System.String)">
            <summary>
            Creates a GET request for the given target from the optional source
            node and optional referer string.
            </summary>
            <param name="target">The target to use.</param>
            <param name="source">The optional source of the request.</param>
            <param name="referer">The optional referrer string.</param>
            <returns>The new document request.</returns>
        </member>
        <member name="M:AngleSharp.Io.DocumentRequest.Post(AngleSharp.Url,System.IO.Stream,System.String,AngleSharp.Dom.INode,System.String)">
            <summary>
            Creates a POST request for the given target with the provided body
            and encoding type from the optional source node and optional
            referer string.
            </summary>
            <param name="target">The target to use.</param>
            <param name="body">The body of the request.</param>
            <param name="type">The type of the request's body.</param>
            <param name="source">The optional source of the request.</param>
            <param name="referer">The optional referrer string.</param>
            <returns>The new document request.</returns>
        </member>
        <member name="M:AngleSharp.Io.DocumentRequest.PostAsPlaintext(AngleSharp.Url,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a POST request for the given target with the fields being
            used to generate the body and encoding type plaintext.
            </summary>
            <param name="target">The target to use.</param>
            <param name="fields">The fields to send.</param>
            <returns>The new document request.</returns>
        </member>
        <member name="M:AngleSharp.Io.DocumentRequest.PostAsUrlencoded(AngleSharp.Url,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a POST request for the given target with the fields being
            used to generate the body and encoding type url encoded.
            </summary>
            <param name="target">The target to use.</param>
            <param name="fields">The fields to send.</param>
            <returns>The new document request.</returns>
        </member>
        <member name="P:AngleSharp.Io.DocumentRequest.Source">
            <summary>
            Gets or sets the source of the request, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DocumentRequest.Target">
            <summary>
            Gets the target of the request.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DocumentRequest.Referer">
            <summary>
            Gets or sets the referrer of the request, if any. The name is
            intentionally spelled wrong, to emphasize the relationship with the
            HTTP header.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DocumentRequest.Method">
            <summary>
            Gets or sets the method to use.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DocumentRequest.Body">
            <summary>
            Gets or sets the stream of the request's body.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DocumentRequest.MimeType">
            <summary>
            Gets or sets the mime-type to use, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.DocumentRequest.Headers">
            <summary>
            Gets a list of headers (key-values) that should be used.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Dom.IBlob">
            <summary>
            Represents a binary large object.
            http://dev.w3.org/2006/webapi/FileAPI/#dfn-Blob
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IBlob.Length">
            <summary>
            Gets the length of the blob.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IBlob.Type">
            <summary>
            Gets the mime-type of the blob.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IBlob.IsClosed">
            <summary>
            Gets if the stream to the blob is closed.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IBlob.Body">
            <summary>
            Gets the stream to the file.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.IBlob.Slice(System.Int32,System.Int32,System.String)">
            <summary>
            Slices a subset of the blob into a another blob.
            </summary>
            <param name="start">The start of the slicing in bytes.</param>
            <param name="end">The end of the slicing in bytes.</param>
            <param name="contentType">The mime-type of the new blob.</param>
            <returns>A new blob with this blob's subset.</returns>
        </member>
        <member name="M:AngleSharp.Io.Dom.IBlob.Close">
            <summary>
            Closes the stream to the blob.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Dom.IFile">
            <summary>
            Represents a concrete file.
            http://dev.w3.org/2006/webapi/FileAPI/#dfn-file
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IFile.Name">
            <summary>
            Gets the file's name.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IFile.LastModified">
            <summary>
            Gets the last modified date of the file.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Dom.IFileList">
            <summary>
            Represents a list of files.
            http://dev.w3.org/2006/webapi/FileAPI/#dfn-filelist
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Dom.IFileList.Item(System.Int32)">
            <summary>
            Gets the file at the specified index.
            </summary>
            <param name="index">The index of the file.</param>
            <returns>The file at the provided index.</returns>
        </member>
        <member name="P:AngleSharp.Io.Dom.IFileList.Length">
            <summary>
            Gets the number of files in the list.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Dom.IFileList.Add(AngleSharp.Io.Dom.IFile)">
            <summary>
            Adds a file to the list.
            </summary>
            <param name="file">The file to add.</param>
        </member>
        <member name="M:AngleSharp.Io.Dom.IFileList.Remove(AngleSharp.Io.Dom.IFile)">
            <summary>
            Removes a file from the list.
            </summary>
            <param name="file">The file to remove.</param>
            <returns>
            True if the file was part of the list, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.Dom.IFileList.Clear">
            <summary>
            Resets the list of file entries.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Dom.FileList">
            <summary>
            Represents a container for file entries captured by the file
            upload field.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Download">
            <summary>
            Represents a download in progress.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.HeaderNames">
            <summary>
            The collection of (known / used) header names.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.CacheControl">
            <summary>
            Tells all caching mechanisms from server to client or vice-versa
            whether they may cache this object. It is measured in seconds.
            e.g. Cache-Control: no-cache
            e.g. Cache-Control: max-age=3600
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Connection">
            <summary>
            Options that are desired for the connection,
            e.g. Connection: keep-alive
            e.g. Connection: close
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ContentLength">
            <summary>
            The length of the request/response body in octets (8-bit bytes),
            e.g. Content-Length: 348
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ContentMd5">
            <summary>
            A Base64-encoded binary MD5 sum of the content of the response,
            e.g. Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ContentType">
            <summary>
            The MIME type of this content (only used with POST / PUT methods),
            e.g. Content-Type: application/x-www-form-urlencoded
            e.g. Content-Type: text/html; charset=utf-8
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Date">
            <summary>
            The date and time that the message was sent,
            e.g. Date: Tue, 15 Nov 1994 08:12:31 GMT
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Pragma">
            <summary>
            Implementation-specific headers that may have various effects
            anywhere along the request-response chain,
            e.g. Pragma: no-cache
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Via">
            <summary>
            Informs the client or server of proxies through which the response
            or request was sent,
            e.g. Via: 1.0 fred, 1.1 example.com (Apache/1.1)
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Warning">
            <summary>
            A general warning about possible problems with the entity body,
            e.g. Warning: 199 Miscellaneous warning
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Accept">
            <summary>
            Content-Types that are acceptable for the response,
            e.g. Accept: text/plain
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.AcceptCharset">
            <summary>
            Character sets that are acceptable,
            e.g. Accept-Charset: utf-8
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.AcceptEncoding">
            <summary>
            List of acceptable encodings. See HTTP compression,
            e.g. Accept-Encoding: gzip, deflate
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.AcceptLanguage">
            <summary>
            List of acceptable human languages for response,
            e.g. Accept-Language: en-US
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.AcceptDatetime">
            <summary>
            Acceptable version in time, 
            e.g. Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Authorization">
            <summary>
            Authentication credentials for HTTP authentication,
            e.g. Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Cookie">
            <summary>
            An HTTP cookie previously sent by the server with Set-Cookie,
            e.g. Cookie: $Version=1; Skin=new;
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Expect">
            <summary>
            Indicates that particular server behaviors are required by the
            client,
            e.g. Expect: 100-continue
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.From">
            <summary>
            The email address of the user making the request,
            e.g. From: user@example.com
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Host">
            <summary>
            The domain name of the server (for virtual hosting), and the TCP
            port number on which the server is listening. The port number may
            be omitted if the port is the standard port for the service
            requested. Mandatory since HTTP/1.1. Although domain name are
            specified as case-insensitive, it is not specified whether the
            contents of the Host field should be interpreted in a
            case-insensitive manner and in practice some implementations of
            virtual hosting interpret the contents of the Host field in a
            case-sensitive manner,
            e.g. Host: en.wikipedia.org:80
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.IfMatch">
            <summary>
            Only perform the action if the client supplied entity matches the
            same entity on the server. This is mainly for methods like PUT to
            only update a resource if it has not been modified since the user
            last updated it,
            e.g. If-Match: "737060cd8c284d8af7ad3082f209582d"
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.IfModifiedSince">
            <summary>
            Allows a 304 Not Modified to be returned if content is unchanged,
            e.g. If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.IfNoneMatch">
            <summary>
            Allows a 304 Not Modified to be returned if content is unchanged,
            e.g. If-None-Match: "737060cd8c284d8af7ad3082f209582d"
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.IfRange">
            <summary>
            If the entity is unchanged, send me the part(s) that I am missing;
            otherwise, send me the entire new entity,
            e.g. If-Range: "737060cd8c284d8af7ad3082f209582d"
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.IfUnmodifiedSince">
            <summary>
            Only send the response if the entity has not been modified since a
            specific time,
            e.g. If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.MaxForwards">
            <summary>
            Limit the number of times the message can be forwarded through
            proxies or gateways,
            e.g. Max-Forwards: 10
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Origin">
            <summary>
            Initiates a request for cross-origin resource sharing (asks server
            for an 'Access-Control-Allow-Origin' response header),
            e.g. Origin: http://www.example-social-network.com
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ProxyAuthorization">
            <summary>
            Authorization credentials for connecting to a proxy,
            e.g. Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Range">
            <summary>
            Request only part of an entity. Bytes are numbered from 0,
            e.g. Range: bytes=500-999
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Referer">
            <summary>
            This is the address of the previous web page from which a link to
            the currently requested page was followed. (The word referrer is
            misspelled in the RFC as well as in most implementations.),
            e.g. Referer: http://en.wikipedia.org/wiki/Main_Page
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Te">
            <summary>
            The transfer encodings the user agent is willing to accept: the
            same values as for the response header Transfer-Encoding can be
            used, plus the "trailers" value (related to the "chunked" transfer
            method) to notify the server it expects to receive additional
            headers (the trailers) after the last, zero-sized, chunk,
            e.g. TE: trailers, deflate
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Upgrade">
            <summary>
            Ask the server to upgrade to another protocol,
            e.g. Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.UserAgent">
            <summary>
            The user agent string of the user agent,
            e.g. User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0)
                             Gecko/20100101 Firefox/21.0
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.AccessControlAllowOrigin">
            <summary>
            Specifying which web sites can participate in cross-origin resource
            sharing,
            e.g. Access-Control-Allow-Origin: *
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.AcceptRanges">
            <summary>
            What partial content range types this server supports,
            e.g. Accept-Ranges: bytes
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Age">
            <summary>
            The age the object has been in a proxy cache in seconds,
            e.g. Age: 12
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Allow">
            <summary>
            Valid actions for a specified resource. To be used for a 405 Method
            not allowed,
            e.g. Allow: GET, HEAD
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ContentEncoding">
            <summary>
            The type of encoding used on the data,
            e.g. Content-Encoding: gzip
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ContentLanguage">
            <summary>
            The language the content is in,
            e.g. Content-Language: da
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ContentLocation">
            <summary>
            An alternate location for the returned data,
            e.g. Content-Location: /index.htm
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ContentDisposition">
            <summary>
            An opportunity to raise a "File Download" dialog box for a known
            MIME type with binary format or suggest a filename for dynamic
            content. Quotes are necessary with special characters,
            e.g. Content-Disposition: attachment; filename="fname.ext"
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ContentRange">
            <summary>
            Where in a full body message this partial message belongs,
            e.g. Content-Range: bytes 21010-47021/47022
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ETag">
            <summary>
            An identifier for a specific version of a resource, often a message
            digest,
            e.g. ETag: "737060cd8c284d8af7ad3082f209582d"
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Expires">
            <summary>
            Gives the date/time after which the response is considered stale,
            e.g. Expires: Thu, 01 Dec 1994 16:00:00 GMT
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.LastModified">
            <summary>
            The last modified date for the requested object, in RFC2822 format,
            e.g. Last-Modified: Tue, 15 Nov 1994 12:45:26 +0000
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Link">
            <summary>
            Used to express a typed relationship with another resource, where
            the relation type is defined by RFC5988,
            e.g. Link: &lt;/feed&gt;; rel="alternate"
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Location">
            <summary>
            Used in redirection, or when a new resource has been created,
            e.g. Location: http://www.w3.org/pub/WWW/People.html
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.P3p">
            <summary>
            This header is supposed to set P3P policy, in the form of
            P3P:CP="your_compact_policy". However, P3P did not take off, most
            browsers have never fully implemented it, a lot of websites set
            this header with fake policy text, that was enough to fool browsers
            the existence of P3P policy and grant permissions for third party
            cookies,
            e.g. P3P: CP="This is not a P3P policy! See ... for more info."
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.ProxyAuthenticate">
            <summary>
            Request authentication to access the proxy,
            e.g. Proxy-Authenticate: Basic
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Refresh">
            <summary>
            Used in redirection, or when a new resource has been created. This
            refresh redirects after 5 seconds,
            e.g. Refresh: 5; url=http://www.w3.org/pub/WWW/People.html
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.RetryAfter">
            <summary>
            If an entity is temporarily unavailable, this instructs the client
            to try again after a specified period of time (in seconds),
            e.g. Retry-After: 120
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Server">
            <summary>
            A name for the server,
            e.g. Server: Apache/2.4.1 (Unix)
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.SetCookie">
            <summary>
            An HTTP cookie,
            e.g. Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Status">
            <summary>
            The HTTP status of the response. "Status" is not listed as a
            registered header. The "Status-Line" of a "Response" is defined by
            RFC2616 without any explicit Status: header name,
            e.g. Status: 200 OK
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.StrictTransportSecurity">
            <summary>
            A HSTS Policy informing the HTTP client how long to cache the HTTPS
            only policy and whether this applies to subdomains,
            e.g. Strict-Transport-Security: max-age=16070400; includeSubDomains
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Trailer">
            <summary>
            The Trailer general field value indicates that the given set of
            header fields is present in the trailer of a message encoded with
            chunked transfer-coding,
            e.g. Trailer: Max-Forwards
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.TransferEncoding">
            <summary>
            The form of encoding used to safely transfer the entity to the user.
            Currently defined methods are: chunked, compress, deflate, gzip,
            identity,
            e.g. Transfer-Encoding: chunked
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.Vary">
            <summary>
            Tells downstream proxies how to match future request headers to
            decide whether the cached response can be used rather than
            requesting a fresh one from the origin server,
            e.g. Vary: *
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HeaderNames.WwwAuthenticate">
            <summary>
            Indicates the authentication scheme that should be used to access
            the requested entity,
            e.g. WWW-Authenticate: Basic
            </summary>
        </member>
        <member name="T:AngleSharp.Io.HttpMethod">
            <summary>
            Represents the usable methods for transmitting HTTP forms.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HttpMethod.Get">
            <summary>
            The GET method.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HttpMethod.Post">
            <summary>
            The POST method.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HttpMethod.Put">
            <summary>
            The PUT method.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HttpMethod.Delete">
            <summary>
            The DELETE method.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HttpMethod.Options">
            <summary>
            The OPTIONS method.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HttpMethod.Head">
            <summary>
            The HEAD method.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HttpMethod.Trace">
            <summary>
            The TRACE method.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.HttpMethod.Connect">
            <summary>
            The CONNECT method.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.ICookieProvider">
            <summary>
            Defines methods to retrieve and store cookies.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.ICookieProvider.GetCookie(AngleSharp.Url)">
            <summary>
            Gets the cookie value of the given address.
            </summary>
            <param name="url">The origin of the cookie.</param>
            <returns>The value of the cookie.</returns>
        </member>
        <member name="M:AngleSharp.Io.ICookieProvider.SetCookie(AngleSharp.Url,System.String)">
            <summary>
            Sets the cookie value for the given address.
            </summary>
            <param name="url">The origin of the cookie.</param>
            <param name="value">The value of the cookie.</param>
        </member>
        <member name="T:AngleSharp.Io.IDocumentLoader">
            <summary>
            Interface used to handle top-level document requests. These requests
            include navigation tasks.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.IDocumentLoader.FetchAsync(AngleSharp.Io.DocumentRequest)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <returns>The download instance to track.</returns>
        </member>
        <member name="T:AngleSharp.Io.IDownload">
            <summary>
            Basic contract for a currently active download.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.IDownload.Target">
            <summary>
            Gets the target of the download.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.IDownload.Source">
            <summary>
            Gets the originator of the download, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.IIntegrityProvider">
            <summary>
            Defines the methods to perform an integrity check.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.IIntegrityProvider.IsSatisfied(System.Byte[],System.String)">
            <summary>
            Checks if the given content satisfies the provided integrity
            attribute.
            </summary>
            <param name="content">The content to hash.</param>
            <param name="integrity">The value of the integrity attribute.</param>
            <returns>True if integrity is preserved, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.ILoadableElement">
            <summary>
            The interface implemented by elements that may load resources.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.ILoadableElement.CurrentDownload">
            <summary>
            Gets the current download or resource, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.ILoader">
            <summary>
            Represents the basic interface for all loaders.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.ILoader.GetDownloads">
            <summary>
            Gets the currently active downloads.
            </summary>
            <returns>The downloads in progress.</returns>
        </member>
        <member name="T:AngleSharp.Io.IRequester">
            <summary>
            Defines the required methods any requester object must have.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.IRequester.SupportsProtocol(System.String)">
            <summary>
            Checks if the given protocol is supported.
            </summary>
            <param name="protocol">
            The protocol to check for, e.g. http.
            </param>
            <returns>
            True if the protocol is supported, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.IRequester.RequestAsync(AngleSharp.Io.Request,System.Threading.CancellationToken)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>
            The task that will eventually give the response data.
            </returns>
        </member>
        <member name="E:AngleSharp.Io.IRequester.Requesting">
            <summary>
            Fired when a request is starting.
            </summary>
        </member>
        <member name="E:AngleSharp.Io.IRequester.Requested">
            <summary>
            Fired when a request is finished.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.IResourceLoader">
            <summary>
            Interface used to handle resource requests for a document. These
            requests include, but are not limited to, media, script and styling
            resources.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.IResourceLoader.FetchAsync(AngleSharp.Io.ResourceRequest)">
            <summary>
            Performs an asynchronous request that can be cancelled.
            </summary>
            <param name="request">The options to consider.</param>
            <returns>
            The task that will eventually give the resource's response data.
            </returns>
        </member>
        <member name="T:AngleSharp.Io.IResponse">
            <summary>
            Specifies what is stored when receiving data.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.IResponse.StatusCode">
            <summary>
            Gets the status code that has been send with the response.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.IResponse.Address">
            <summary>
            Gets the url of the response.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.IResponse.Headers">
            <summary>
            Gets the headers that have been send with the response.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.IResponse.Content">
            <summary>
            Gets the content that has been send with the response.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.LoaderOptions">
            <summary>
            Options for the loader.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.LoaderOptions.IsNavigationDisabled">
            <summary>
            Gets or sets if navigation is enabled.
            By default it is enabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.LoaderOptions.IsResourceLoadingEnabled">
            <summary>
            Gets or sets if resource loading is enabled.
            By default it is disabled.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.LoaderOptions.Filter">
            <summary>
            Gets or sets the filter, if any.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.MemoryCookieProvider">
            <summary>
            Represents the default cookie service. This class can be inherited.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.MemoryCookieProvider.#ctor">
            <summary>
            Creates a new cookie service for non-persistent cookies.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.MemoryCookieProvider.Container">
            <summary>
            Gets the associated cookie container.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.MemoryCookieProvider.GetCookie(AngleSharp.Url)">
            <summary>
            Gets the cookie value of the given address.
            </summary>
            <param name="url">The origin of the cookie.</param>
            <returns>The value of the cookie.</returns>
        </member>
        <member name="M:AngleSharp.Io.MemoryCookieProvider.SetCookie(AngleSharp.Url,System.String)">
            <summary>
            Sets the cookie value for the given address.
            </summary>
            <param name="url">The origin of the cookie.</param>
            <param name="value">The value of the cookie.</param>
        </member>
        <member name="T:AngleSharp.Io.MimeType">
            <summary>
            Represents an Internet media type.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.MimeType.#ctor(System.String)">
            <summary>
            Creates a new MIME type.
            </summary>
            <param name="value">The serialized value.</param>
        </member>
        <member name="P:AngleSharp.Io.MimeType.Content">
            <summary>
            Gets the content part, i.e. everything without the parameters.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.MimeType.GeneralType">
            <summary>
            Gets the general type.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.MimeType.MediaType">
            <summary>
            Gets the media type, if specified.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.MimeType.Suffix">
            <summary>
            Gets the suffix, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.MimeType.Keys">
            <summary>
            Gets an iterator over all integrated keys.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.MimeType.GetParameter(System.String)">
            <summary>
            Returns the value of the parameter with the specified key.
            </summary>
            <param name="key">The parameter's key.</param>
            <returns>The value of the parameter or null.</returns>
        </member>
        <member name="M:AngleSharp.Io.MimeType.ToString">
            <summary>
            Returns the string representation of the MIME type.
            </summary>
            <returns>The currently stored MIME type.</returns>
        </member>
        <member name="M:AngleSharp.Io.MimeType.Equals(AngleSharp.Io.MimeType)">
            <summary>
            Compares the MIME types without considering their parameters.
            </summary>
            <param name="other">The type to compare to.</param>
            <returns>True if both types are equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Io.MimeType.Equals(System.Object)">
            <summary>
            Compares to the other object. It has to be a MIME type.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if both objects are equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Io.MimeType.GetHashCode">
            <summary>
            Computes the hash code for the MIME type.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:AngleSharp.Io.MimeType.op_Equality(AngleSharp.Io.MimeType,AngleSharp.Io.MimeType)">
            <summary>
            Runs the Equals method from a with b.
            </summary>
            <param name="a">The first MIME type.</param>
            <param name="b">The MIME type to compare to.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Io.MimeType.op_Inequality(AngleSharp.Io.MimeType,AngleSharp.Io.MimeType)">
            <summary>
            Runs the negated Equals method from a with b.
            </summary>
            <param name="a">The first MIME type.</param>
            <param name="b">The MIME type to compare to.</param>
            <returns>True if both are not equal, otherwise false.</returns>
        </member>
        <member name="T:AngleSharp.Io.MimeTypeNames">
            <summary>
            Contains a list of common mime-types.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.MimeTypeNames.FromExtension(System.String)">
            <summary>
            Gets the mime type from a file extension ".ext".
            </summary>
            <param name="extension">The extension (starting with a dot).</param>
            <returns>The mime-type of the given extension.</returns>
        </member>
        <member name="M:AngleSharp.Io.MimeTypeNames.GetExtension(System.String)">
            <summary>
            Gets some extension ".ext" from a MIME type.
            </summary>
            <param name="mimeType">The mime-type of the given extension.</param>
            <returns>An extension (starting with a dot) or an empty string.</returns>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.Html">
            <summary>
            Gets the mime-type for HTML text: text/html.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.Png">
            <summary>
            Gets the mime-type for a PNG image: image/png.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.Plain">
            <summary>
            Gets the mime-type for plain text: text/plain.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.Xml">
            <summary>
            Gets the mime-type for XML text: text/xml.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.Svg">
            <summary>
            Gets the mime-type for SVG text: image/svg+xml.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.Css">
            <summary>
            Gets the mime-type for a cascading style sheet: text/css.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.DefaultJavaScript">
            <summary>
            Gets the default mime-type for JavaScript scripts: text/javascript.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.ApplicationJson">
            <summary>
            Gets the mime-type for JSON text: application/json.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.ApplicationXml">
            <summary>
            Gets the mime-type for XML applications: application/xml.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.ApplicationXHtml">
            <summary>
            Gets the mime-type for XHTML / XML text: application/xhtml+xml.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.Binary">
            <summary>
            Gets the mime-type for raw binary data: application/octet-stream.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.UrlencodedForm">
            <summary>
            Gets the mime-type for a form: application/x-www-form-urlencoded.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.MimeTypeNames.MultipartForm">
            <summary>
            Gets the mime-type for multipart form data: multipart/form-data.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.MimeTypeNames.IsJavaScript(System.String)">
            <summary>
            Checks if the given mime-type is one of the JavaScript variants.
            </summary>
            <param name="type">The type to check for.</param>
            <returns>
            True if it is a legal JavaScript mime-type, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.MimeTypeNames.Represents(AngleSharp.Io.MimeType,System.String)">
            <summary>
            Checks if the given mime-type is equivalent to the provided string
            representation.
            </summary>
            <param name="type">The type to check for.</param>
            <param name="content">THe string representation.</param>
            <returns>
            True if both (type and representation) are equivalent, else false.
            </returns>
        </member>
        <member name="T:AngleSharp.Io.OriginBehavior">
            <summary>
            The default origin behavior states.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.OriginBehavior.Taint">
            <summary>
            Data is gathered.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.OriginBehavior.Fail">
            <summary>
            Data is discarded in NO CORS.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.PortNumbers">
            <summary>
            Contains a collection of default ports.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.PortNumbers.GetDefaultPort(System.String)">
            <summary>
            Gets the default port for the given protocol, if the protocol is a
            relative scheme protocol.
            </summary>
            <param name="protocol">The protocol to get the port for.</param>
            <returns>
            The string representing the default port, or null, if the protocol
            is not known.
            </returns>
        </member>
        <member name="T:AngleSharp.Io.Processors.BaseRequestProcessor">
            <summary>
            Basic implementation of a request processor.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Processors.BaseRequestProcessor.#ctor(AngleSharp.Io.IResourceLoader)">
            <summary>
            Creates a new request processor.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Processors.BaseRequestProcessor.IsAvailable">
            <summary>
            Gets the status if downloads can be created.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Processors.BaseRequestProcessor.Download">
            <summary>
            Gets the associated download.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Processors.BaseRequestProcessor.ProcessAsync(AngleSharp.Io.ResourceRequest)">
            <summary>
            Processes the given request asynchronously.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Processors.BaseRequestProcessor.ProcessResponseAsync(AngleSharp.Io.IResponse)">
            <summary>
            Processes the response.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Processors.BaseRequestProcessor.FinishDownloadAsync">
            <summary>
            Finishes the download.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Processors.BaseRequestProcessor.DownloadWithCors(AngleSharp.Io.CorsRequest)">
            <summary>
            Fetches the given request with CORS.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Processors.BaseRequestProcessor.CancelDownload">
            <summary>
            Cancels the current download, if any.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Processors.BaseRequestProcessor.IsDifferentToCurrentDownloadUrl(AngleSharp.Url)">
            <summary>
            Checks if the given target is different than the current download.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Processors.ImageRequestProcessor">
            <summary>
            For more information, see:
            http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#update-the-image-data
            </summary>
        </member>
        <member name="T:AngleSharp.Io.Processors.IRequestProcessor">
            <summary>
            Represents a request processor.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Processors.IRequestProcessor.Download">
            <summary>
            Gets the current download, if any.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Processors.IRequestProcessor.ProcessAsync(AngleSharp.Io.ResourceRequest)">
            <summary>
            Starts processing the given request by cancelling
            the current download if any.
            </summary>
            <param name="request">The new request.</param>
            <returns>The task handling the request.</returns>
        </member>
        <member name="T:AngleSharp.Io.Processors.MediaRequestProcessor`1">
            <summary>
            See the following link for more infos:
            https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-load
            </summary>
        </member>
        <member name="T:AngleSharp.Io.ProtocolNames">
            <summary>
            Contains the known protocol names.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Http">
            <summary>
            The Hypertext Transfer Protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Https">
            <summary>
            The Hypertext Transfer Protocol Secure.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Ftp">
            <summary>
            The File Transfer Protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.JavaScript">
            <summary>
            The pseudo JavaScript protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Data">
            <summary>
            The pseudo Data protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Mailto">
            <summary>
            The pseudo Mailto protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.File">
            <summary>
            The pseudo File protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Ws">
            <summary>
            The WebSocket protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Wss">
            <summary>
            The WebSocket Secure protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Telnet">
            <summary>
            The Telnet protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Ssh">
            <summary>
            The Secure Shell protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Gopher">
            <summary>
            The legacy gopher protocol.
            </summary>
        </member>
        <member name="F:AngleSharp.Io.ProtocolNames.Blob">
            <summary>
            The binary large object protocol.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.ProtocolNames.IsRelative(System.String)">
            <summary>
            Checks if the given protocol (without a colon in the end) is
            following a relative scheme.
            </summary>
            <param name="protocol">The protocol to examine.</param>
            <returns>
            True if the protocol is a relative scheme, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Io.ProtocolNames.IsOriginable(System.String)">
            <summary>
            Checks if the given protocol (without a colon in the end) is
            suitable for deriving the origin.
            </summary>
            <param name="protocol">The protocol to examine.</param>
            <returns>
            True if the protocol is suited for origin, otherwise false.
            </returns>
        </member>
        <member name="T:AngleSharp.Io.Request">
            <summary>
            The default HTTP request encapsulation type.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.Request.#ctor">
            <summary>
            Creates a new default requests.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Request.Method">
            <summary>
            Gets or sets the method that should be used.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Request.Address">
            <summary>
            Gets or sets the address should be requested.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Request.Headers">
            <summary>
            Gets or sets a list of headers (key-values) that should be used.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.Request.Content">
            <summary>
            Gets or sets a stream to the content (positioned at the origin).
            </summary>
        </member>
        <member name="T:AngleSharp.Io.RequesterExtensions">
            <summary>
            Useful extensions for IRequester objects.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.RequesterExtensions.IsRedirected(System.Net.HttpStatusCode)">
            <summary>
            Checks if the status code corresponds to a redirected response.
            </summary>
            <param name="status">The given status code.</param>
            <returns>True if the status code hints redirection, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Io.RequesterExtensions.FetchWithCorsAsync(AngleSharp.Io.IResourceLoader,AngleSharp.Io.CorsRequest)">
            <summary>
            Performs a potentially CORS-enabled fetch from the given URI by
            using an asynchronous GET request. For more information see:
            http://www.w3.org/TR/html5/infrastructure.html#potentially-cors-enabled-fetch
            </summary>
            <param name="loader">The resource loader to use.</param>
            <param name="cors">The CORS request to issue.</param>
            <returns>
            The active download.
            </returns>
        </member>
        <member name="T:AngleSharp.Io.ResourceRequest">
            <summary>
            Represents the arguments to load a resource.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.ResourceRequest.#ctor(AngleSharp.Dom.IElement,AngleSharp.Url)">
            <summary>
            Creates a new resource request for the given url.
            </summary>
            <param name="source">The request's source.</param>
            <param name="target">The resource's url.</param>
        </member>
        <member name="P:AngleSharp.Io.ResourceRequest.Source">
            <summary>
            Gets the source of the request.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.ResourceRequest.Target">
            <summary>
            Gets the target of the request.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.ResourceRequest.Origin">
            <summary>
            Gets or sets the origin of the request, if any.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.ResourceRequest.IsManualRedirectDesired">
            <summary>
            Gets or sets if the manual redirect flag is active.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.ResourceRequest.IsSameOriginForced">
            <summary>
            Gets or sets if the force same origin flag is active.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.ResourceRequest.IsCredentialOmitted">
            <summary>
            Gets or sets if the omit credentials flag is active.
            </summary>
        </member>
        <member name="P:AngleSharp.Io.ResourceRequest.IsCookieBlocked">
            <summary>
            Gets or sets if the block cookies flag is active.
            </summary>
        </member>
        <member name="T:AngleSharp.Io.ResponseExtensions">
            <summary>
            Represents some useful extensions for the response.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.ResponseExtensions.GetContentType(AngleSharp.Io.IResponse)">
            <summary>
            Gets the content-type from the response's headers. The default type
            is derived from the file extension of the path, if any.
            </summary>
            <param name="response">The response to examine.</param>
            <returns>The provided or default content-type.</returns>
        </member>
        <member name="M:AngleSharp.Io.ResponseExtensions.GetContentType(AngleSharp.Io.IResponse,System.String)">
            <summary>
            Gets the content-type from the response's headers.
            </summary>
            <param name="response">The response to examine.</param>
            <param name="defaultType">The default type to apply.</param>
            <returns>The provided or default content-type.</returns>
        </member>
        <member name="T:AngleSharp.Io.VirtualResponse">
            <summary>
            The virtual response class.
            </summary>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Create(System.Action{AngleSharp.Io.VirtualResponse})">
            <summary>
            Creates a new virtual response.
            </summary>
            <param name="request">The request callback.</param>
            <returns>The resulted response.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Address(AngleSharp.Url)">
            <summary>
            Sets the location of the response to the given url.
            </summary>
            <param name="url">The imaginary url of the response.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Address(System.String)">
            <summary>
            Sets the location of the response to the provided address.
            </summary>
            <param name="address">The string to use as an url.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Address(System.Uri)">
            <summary>
            Sets the location of the response to the uri's value.
            </summary>
            <param name="url">The Uri instance to convert.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Cookie(System.String)">
            <summary>
            Sets the value of the cookie associated with the response.
            </summary>
            <param name="value">The cookie's value.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Status(System.Net.HttpStatusCode)">
            <summary>
            Sets the status code.
            </summary>
            <param name="code">The status code to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Status(System.Int32)">
            <summary>
            Sets the status code by providing the integer value.
            </summary>
            <param name="code">The integer representing the code.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Header(System.String,System.String)">
            <summary>
            Sets the header with the given name and value.
            </summary>
            <param name="name">The header name to set.</param>
            <param name="value">The value for the key.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Headers(System.Object)">
            <summary>
            Sets the headers with the name of the properties and their 
            assigned values.
            </summary>
            <param name="obj">The object to decompose.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Headers(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the headers with the name of the keys and their assigned
            values.
            </summary>
            <param name="headers">The dictionary to use.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Content(System.String)">
            <summary>
            Sets the response's content from the provided string.
            </summary>
            <param name="text">The text to use as content.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:AngleSharp.Io.VirtualResponse.Content(System.IO.Stream,System.Boolean)">
            <summary>
            Sets the response's content from the provided stream.
            </summary>
            <param name="stream">The response's content stream.</param>
            <param name="shouldDispose">True to dispose afterwards.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="T:AngleSharp.IStyleFormattable">
            <summary>
            Allows basic serialization.
            </summary>
        </member>
        <member name="M:AngleSharp.IStyleFormattable.ToCss(System.IO.TextWriter,AngleSharp.IStyleFormatter)">
            <summary>
            Writes the serialization of the node guided by the formatter.
            </summary>
            <param name="writer">The output target of the serialization.</param>
            <param name="formatter">The formatter to use.</param>
        </member>
        <member name="T:AngleSharp.IStyleFormatter">
            <summary>
            Basic interface for CSS node serialization.
            </summary>
        </member>
        <member name="M:AngleSharp.IStyleFormatter.Sheet(System.Collections.Generic.IEnumerable{AngleSharp.IStyleFormattable})">
            <summary>
            Concats the given rules to create the stylesheet serialization.
            </summary>
            <param name="rules">The rules to aggregate.</param>
            <returns>The serialization of the sheet.</returns>
        </member>
        <member name="M:AngleSharp.IStyleFormatter.Declaration(System.String,System.String,System.Boolean)">
            <summary>
            Creates the serialization of a declaration with the given name,
            value and important flag.
            </summary>
            <param name="name">The name of the declaration.</param>
            <param name="value">The value of the declaration.</param>
            <param name="important">The value of the important flag.</param>
            <returns>The serialization of the declaration.</returns>
        </member>
        <member name="M:AngleSharp.IStyleFormatter.BlockDeclarations(System.Collections.Generic.IEnumerable{AngleSharp.IStyleFormattable})">
            <summary>
            Creates the serialization of the declarations with the provided
            string representations.
            </summary>
            <param name="declarations">The declarations to aggregate.</param>
            <returns>The serialization of the declarations.</returns>
        </member>
        <member name="M:AngleSharp.IStyleFormatter.Rule(System.String,System.String)">
            <summary>
            Converts the name and value of the provided rule to a simple rule.
            </summary>
            <param name="name">The name of the simple rule.</param>
            <param name="value">The value of the simple rule.</param>
            <returns>The serialization of the simple rule.</returns>
        </member>
        <member name="M:AngleSharp.IStyleFormatter.Rule(System.String,System.String,System.String)">
            <summary>
            Converts the name, prelude and rules of the provided rule to a
            composed rule.
            </summary>
            <param name="name">The name of the nested rule.</param>
            <param name="prelude">The optional prelude.</param>
            <param name="rules">The serialization of the nested rules.</param>
            <returns>The serialization of the nested rule.</returns>
        </member>
        <member name="M:AngleSharp.IStyleFormatter.BlockRules(System.Collections.Generic.IEnumerable{AngleSharp.IStyleFormattable})">
            <summary>
            Concats the given rules to create a block serialization.
            </summary>
            <param name="rules">The rules to aggregate.</param>
            <returns>The serialization of the CSS rule block.</returns>
        </member>
        <member name="M:AngleSharp.IStyleFormatter.Comment(System.String)">
            <summary>
            Creates a serialization of a comment with the provided data.
            </summary>
            <param name="data">The data of the comment.</param>
            <returns>The serialization of the comment.</returns>
        </member>
        <member name="T:AngleSharp.Mathml.Dom.MathAnnotationXmlElement">
            <summary>
            The annotation-xml math element.
            </summary>
        </member>
        <member name="T:AngleSharp.Mathml.Dom.MathElement">
            <summary>
            Represents an element of the MathML DOM.
            </summary>
        </member>
        <member name="M:AngleSharp.Mathml.Dom.MathElement.#ctor(AngleSharp.Dom.Document,System.String,System.String,AngleSharp.Dom.NodeFlags)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Mathml.Dom.MathElement.ParseSubtree(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Mathml.Dom.MathElement.Clone(AngleSharp.Dom.Document,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Mathml.Dom.MathIdentifierElement">
            <summary>
            The mi math element.
            </summary>
        </member>
        <member name="T:AngleSharp.Mathml.Dom.MathNumberElement">
            <summary>
            The mn math element.
            </summary>
        </member>
        <member name="T:AngleSharp.Mathml.Dom.MathOperatorElement">
            <summary>
            The mo math element.
            </summary>
        </member>
        <member name="T:AngleSharp.Mathml.Dom.MathStringElement">
            <summary>
            The math string element.
            </summary>
        </member>
        <member name="T:AngleSharp.Mathml.Dom.MathTextElement">
            <summary>
            The mtext math element.
            </summary>
        </member>
        <member name="T:AngleSharp.Mathml.MathElementFactory">
            <summary>
            Provides string to MathElement instance creation mappings.
            </summary>
        </member>
        <member name="M:AngleSharp.Mathml.MathElementFactory.Create(AngleSharp.Dom.Document,System.String,System.String)">
            <summary>
            Returns a specialized MathMLElement instance for the given tag.
            </summary>
            <param name="document">The document that owns the element.</param>
            <param name="localName">The given tag name.</param>
            <param name="prefix">The prefix of the element, if any.</param>
            <returns>The specialized MathMLElement instance.</returns>
        </member>
        <member name="T:AngleSharp.Media.Dom.IAudioTrack">
            <summary>
            Represents an audio track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IAudioTrack.Id">
            <summary>
            Gets the id of the audio track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IAudioTrack.Kind">
            <summary>
            Gets the kind of audio track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IAudioTrack.Label">
            <summary>
            Gets the label of the track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IAudioTrack.Language">
            <summary>
            Gets the language of the track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IAudioTrack.IsEnabled">
            <summary>
            Gets or sets if the track is enabled.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.IAudioTrackList">
            <summary>
            Represents a list of audio tracks.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IAudioTrackList.Length">
            <summary>
            Gets the number of tracks.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IAudioTrackList.Item(System.Int32)">
            <summary>
            Gets the track at the given index.
            </summary>
            <param name="index">The 0-based track index.</param>
            <returns>The track at the position.</returns>
        </member>
        <member name="M:AngleSharp.Media.Dom.IAudioTrackList.GetTrackById(System.String)">
            <summary>
            Gets the track with the specified id.
            </summary>
            <param name="id">The HTML id of the track.</param>
            <returns>The track with the given id, if any.</returns>
        </member>
        <member name="E:AngleSharp.Media.Dom.IAudioTrackList.Changed">
            <summary>
            Event triggered after changing contents.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IAudioTrackList.TrackAdded">
            <summary>
            Event triggered after adding a track.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IAudioTrackList.TrackRemoved">
            <summary>
            Event triggered after removing a track.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.ICanvasRenderingContext2D">
            <summary>
            Represents the canvas rendering context.
            More information is available at the WHATWG homepage:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting.html#canvasrenderingcontext2d
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ICanvasRenderingContext2D.Canvas">
            <summary>
            Gets the associated canvas element.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ICanvasRenderingContext2D.Width">
            <summary>
            Gets or sets the width of the canvas.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ICanvasRenderingContext2D.Height">
            <summary>
            Gets or sets the height of the canvas.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.ICanvasRenderingContext2D.SaveState">
            <summary>
            Push state on state stack.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.ICanvasRenderingContext2D.RestoreState">
            <summary>
            Pop state stack and restore state.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.IMediaController">
            <summary>
            The MediaController for controlling a media.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.BufferedTime">
            <summary>
            Gets the currently buffered time range.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.SeekableTime">
            <summary>
            Gets the currently seekable time range.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.PlayedTime">
            <summary>
            Gets the currently played time range.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.Duration">
            <summary>
            Gets the duration of the controlled media.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.CurrentTime">
            <summary>
            Gets or sets the current time of the controlled media.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.DefaultPlaybackRate">
            <summary>
            Gets or sets the default playback rate.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.PlaybackRate">
            <summary>
            Gets or sets the current playback rate.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.Volume">
            <summary>
            Gets or sets the volume of the controlled media.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.IsMuted">
            <summary>
            Gets or sets if the controlled media is muted.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.IsPaused">
            <summary>
            Gets if the media is currently paused.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.IMediaController.Play">
            <summary>
            Plays the underlying media.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.IMediaController.Pause">
            <summary>
            Pauses the underlying media.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.ReadyState">
            <summary>
            Gets the current ready state of the media.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaController.PlaybackState">
            <summary>
            Gets the current playback state of the contained media.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.Emptied">
            <summary>
            Event triggered after being emptied.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.LoadedMetadata">
            <summary>
            Event triggered after the meta data has been received.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.LoadedData">
            <summary>
            Event triggered after the data has been loaded.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.CanPlay">
            <summary>
            Event triggered when the media can be played.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.CanPlayThrough">
            <summary>
            Event triggered when the media can be fully played.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.Ended">
            <summary>
            Event triggered after the media ended.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.Waiting">
            <summary>
            Event triggered when waiting for input.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.DurationChanged">
            <summary>
            Event triggered when the media cursor changed.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.TimeUpdated">
            <summary>
            Event triggered after the time updated.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.Paused">
            <summary>
            Event triggered after the media paused.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.Played">
            <summary>
            Event triggered after the media started.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.Playing">
            <summary>
            Event triggered before the media started.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.RateChanged">
            <summary>
            Event triggered after the rate changed.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IMediaController.VolumeChanged">
            <summary>
            Event triggered after the volume changed.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.IMediaError">
            <summary>
            Stores information about media errors.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IMediaError.Code">
            <summary>
            Gets the code that represents the media error.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.IRenderingContext">
            <summary>
            Represents the typedef for any rendering context.
            This is shown is the base interface for all rendering
            contexts.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IRenderingContext.ContextId">
            <summary>
            Gets the ID of the rendering context.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IRenderingContext.IsFixed">
            <summary>
            Gets if the context's bitmap mode is fixed.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IRenderingContext.Host">
            <summary>
            Gets the bound host of the context.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.IRenderingContext.ToImage(System.String)">
            <summary>
            Converts the current data to the given image format.
            </summary>
            <param name="type">The type of the image format.</param>
            <returns>The raw content bytes of the image.</returns>
        </member>
        <member name="T:AngleSharp.Media.Dom.IRenderingService">
            <summary>
            Represents a service for creating rendering contexts.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.IRenderingService.IsSupportingContext(System.String)">
            <summary>
            Checks if the given context is supported.
            </summary>
            <param name="contextId">The ID of the context.</param>
            <returns>True if the context is supported, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Media.Dom.IRenderingService.CreateContext(AngleSharp.Html.Dom.IHtmlCanvasElement,System.String)">
            <summary>
            Creates the given context or returns null, if this is not possible.
            </summary>
            <param name="host">The host the context.</param>
            <param name="contextId">The ID of the context.</param>
            <returns>The instance of the rendering context.</returns>
        </member>
        <member name="T:AngleSharp.Media.Dom.ITextTrack">
            <summary>
            Information about a text track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrack.Kind">
            <summary>
            Gets the text track kind of the text track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrack.Label">
            <summary>
            Gets the text track label of the text track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrack.Language">
            <summary>
            Gets the text track language of the text track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrack.Mode">
            <summary>
            Gets or sets the mode of the text track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrack.Cues">
            <summary>
            Gets the available text cues.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrack.ActiveCues">
            <summary>
            Gets the active text cues.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.ITextTrack.Add(AngleSharp.Media.Dom.ITextTrackCue)">
            <summary>
            Adds another cue to the text track.
            </summary>
            <param name="cue">The cue to add.</param>
        </member>
        <member name="M:AngleSharp.Media.Dom.ITextTrack.Remove(AngleSharp.Media.Dom.ITextTrackCue)">
            <summary>
            Removes a cue from the text track.
            </summary>
            <param name="cue">The cue that should be removed.</param>
        </member>
        <member name="E:AngleSharp.Media.Dom.ITextTrack.CueChanged">
            <summary>
            Event triggered after a cue has changed.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.ITextTrackCue">
            <summary>
            Represents a text track cue.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Id">
            <summary>
            Gets the text track cue identifier.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Track">
            <summary>
            Gets the assigned track for this cue.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.StartTime">
            <summary>
            Gets or sets the text track cue start time, in seconds.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.EndTime">
            <summary>
            Gets or sets the text track cue end time, in seconds.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.IsPausedOnExit">
            <summary>
            Gets or sets the text track cue pause-on-exit flag.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Vertical">
            <summary>
            Gets or sets a string representing the text track cue writing direction,
            as follows. If it is horizontal: The empty string. If it is vertical
            growing left: The string "rl". If it is vertical growing right: The string "lr".
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.IsSnappedToLines">
            <summary>
            Gets or sets the text track cue snap-to-lines flag.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Line">
            <summary>
            Gets or sets the text track cue line position. In the case of
            the value being auto, the string "auto" is returned.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Position">
            <summary>
            Gets or sets the text track cue text position.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Size">
            <summary>
            Gets or sets the text track cue size.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Alignment">
            <summary>
            Gets or sets a string representing the text track cue alignment, as
            follows. If it is start alignment: the string "start". If it is middle
            alignment: the string "middle". If it is end alignment: the string "end".
            If it is left alignment: the string "left". If it is right alignment:
            the string "right".
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Text">
            <summary>
            Gets or sets the text track cue text in raw unparsed form.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.ITextTrackCue.AsHtml">
            <summary>
            Returns the text track cue text as a DocumentFragment of HTML elements
            and other DOM nodes.
            </summary>
            <returns>The document fragment.</returns>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Entered">
            <summary>
            Event triggered after entering.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCue.Exited">
            <summary>
            Event triggered after exiting.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.ITextTrackCueList">
            <summary>
            Contains a list of text cues.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCueList.Length">
            <summary>
            Gets the number of cues.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackCueList.Item(System.Int32)">
            <summary>
            Gets the cue at the given index.
            </summary>
            <param name="index">The 0-based cue index.</param>
            <returns>The cue at the position.</returns>
        </member>
        <member name="M:AngleSharp.Media.Dom.ITextTrackCueList.GetCueById(System.String)">
            <summary>
            Gets the cue with the specified id.
            </summary>
            <param name="id">The HTML id of the cue.</param>
            <returns>The cue with the given id, if any.</returns>
        </member>
        <member name="T:AngleSharp.Media.Dom.ITextTrackList">
            <summary>
            Represents a list of text tracks.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackList.Length">
            <summary>
            Gets the number of tracks.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITextTrackList.Item(System.Int32)">
            <summary>
            Gets the track at the given index.
            </summary>
            <param name="index">The 0-based track index.</param>
            <returns>The track at the position.</returns>
        </member>
        <member name="E:AngleSharp.Media.Dom.ITextTrackList.TrackAdded">
            <summary>
            Event triggered after adding a track.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.ITextTrackList.TrackRemoved">
            <summary>
            Event triggered after removing a track.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.ITimeRanges">
            <summary>
            Represents a media time range.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.ITimeRanges.Length">
            <summary>
            Gets the length of the range in frames.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.Dom.ITimeRanges.Start(System.Int32)">
            <summary>
            Returns the time offset at which a specified time range begins.
            </summary>
            <param name="index">The range number to return the starting time for.</param>
            <returns>The time offset.</returns>
        </member>
        <member name="M:AngleSharp.Media.Dom.ITimeRanges.End(System.Int32)">
            <summary>
            Returns the time offset at which a specified time range ends.
            </summary>
            <param name="index">The range number to return the ending time for.</param>
            <returns>The time offset.</returns>
        </member>
        <member name="T:AngleSharp.Media.Dom.IVideoTrack">
            <summary>
            Represents an video track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IVideoTrack.Id">
            <summary>
            Gets the id of the video track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IVideoTrack.Kind">
            <summary>
            Gets the kind of video track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IVideoTrack.Label">
            <summary>
            Gets the label of the track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IVideoTrack.Language">
            <summary>
            Gets the language of the track.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IVideoTrack.IsSelected">
            <summary>
            Gets or sets if the track is selected.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.IVideoTrackList">
            <summary>
            Represents a list of video tracks.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IVideoTrackList.Length">
            <summary>
            Gets the number of tracks.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IVideoTrackList.SelectedIndex">
            <summary>
            Gets the currently selected index.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.Dom.IVideoTrackList.Item(System.Int32)">
            <summary>
            Gets the track at the given index.
            </summary>
            <param name="index">The 0-based track index.</param>
            <returns>The track at the position.</returns>
        </member>
        <member name="M:AngleSharp.Media.Dom.IVideoTrackList.GetTrackById(System.String)">
            <summary>
            Gets the track with the specified id.
            </summary>
            <param name="id">The HTML id of the track.</param>
            <returns>The track with the given id, if any.</returns>
        </member>
        <member name="E:AngleSharp.Media.Dom.IVideoTrackList.Changed">
            <summary>
            Event triggered after changing contents.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IVideoTrackList.TrackAdded">
            <summary>
            Event triggered after adding a track.
            </summary>
        </member>
        <member name="E:AngleSharp.Media.Dom.IVideoTrackList.TrackRemoved">
            <summary>
            Event triggered after removing a track.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.MediaControllerPlaybackState">
            <summary>
            An enumeration over the various playback states.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaControllerPlaybackState.Waiting">
            <summary>
            Waiting for the media to be ready.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaControllerPlaybackState.Playing">
            <summary>
            Playing the current media.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaControllerPlaybackState.Ended">
            <summary>
            The media has already finished playing.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.MediaErrorCode">
            <summary>
            Enumeration with the various media error codes.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaErrorCode.Aborted">
            <summary>
            The transfer has been aborted.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaErrorCode.Network">
            <summary>
            The network is unreachable.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaErrorCode.Decode">
            <summary>
            The decoding process failed.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaErrorCode.SourceNotSupported">
            <summary>
            The source format is not supported.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.MediaNetworkState">
            <summary>
            An enumeration of possible network states.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaNetworkState.Empty">
            <summary>
            The element has not yet been initialized.
            Everything is in initial state.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaNetworkState.Idle">
            <summary>
            The element's resource selection alg. is active.
            No network usage at the moment, but nothing
            loaded.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaNetworkState.Loading">
            <summary>
            The download is in progress.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaNetworkState.NoSource">
            <summary>
            The element's resource selection alg. is active,
            but has not yet found a resource to use.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.MediaReadyState">
            <summary>
            An enumeration of media ready states.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaReadyState.Nothing">
            <summary>
            No information is available.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaReadyState.Metadata">
            <summary>
            Enough information obtained such that the duration of the
            resource is available.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaReadyState.CurrentData">
            <summary>
            Data for immediate playback is available, but not enough
            to advance.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaReadyState.FutureData">
            <summary>
            Enough data for the current and further positions are 
            available.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.MediaReadyState.EnoughData">
            <summary>
            All conditions are met and playback should immediately
            execute.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.Dom.TextTrackMode">
            <summary>
            The modes of a text track.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.TextTrackMode.Disabled">
            <summary>
            The text track is disabled.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.TextTrackMode.Hidden">
            <summary>
            The text track is hidden.
            </summary>
        </member>
        <member name="F:AngleSharp.Media.Dom.TextTrackMode.Showing">
            <summary>
            The text track is actually shown.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.IAudioInfo">
            <summary>
            Contains information about a sound file.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.IImageInfo">
            <summary>
            Contains information about an image file.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.IImageInfo.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.IImageInfo.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.IMediaInfo">
            <summary>
            Contains information about a media resource.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.IMediaInfo.Controller">
            <summary>
            Gets the controller responsible for the media.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.IObjectInfo">
            <summary>
            Contains information about a general object file.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.IObjectInfo.Width">
            <summary>
            Gets the width of the object.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.IObjectInfo.Height">
            <summary>
            Gets the height of the object.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.IResourceInfo">
            <summary>
            Specifies general resource information.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.IResourceInfo.Source">
            <summary>
            Gets the source of the resource.
            </summary>
        </member>
        <member name="T:AngleSharp.Media.IResourceService`1">
            <summary>
            Represents a service to create a specific resource handler.
            </summary>
        </member>
        <member name="M:AngleSharp.Media.IResourceService`1.SupportsType(System.String)">
            <summary>
            Checks if the given type is supported.
            </summary>
            <param name="mimeType">The type of the resource.</param>
            <returns>True if the type is supported, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Media.IResourceService`1.CreateAsync(AngleSharp.Io.IResponse,System.Threading.CancellationToken)">
            <summary>
            Tries to create an inspector for the given resource.
            </summary>
            <param name="response">The response that contains the stream to the resource.</param>
            <param name="cancel">The token for cancelling the task.</param>
            <returns>A task that finishes with an inspector for the resource.</returns>
        </member>
        <member name="T:AngleSharp.Media.IVideoInfo">
            <summary>
            Contains information about a video file.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.IVideoInfo.Width">
            <summary>
            Gets the width of the video.
            </summary>
        </member>
        <member name="P:AngleSharp.Media.IVideoInfo.Height">
            <summary>
            Gets the height of the video.
            </summary>
        </member>
        <member name="T:AngleSharp.PortableExtensions">
            <summary>
            Extensions for ensuring code portability.
            </summary>
        </member>
        <member name="T:AngleSharp.Scripting.IScriptingService">
            <summary>
            Defines the API of an available engine for running scripts provided in
            the code.
            </summary>
        </member>
        <member name="M:AngleSharp.Scripting.IScriptingService.SupportsType(System.String)">
            <summary>
            Checks if the given type is supported.
            </summary>
            <param name="mimeType">The type of the script.</param>
            <returns>True if the type is supported, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Scripting.IScriptingService.EvaluateScriptAsync(AngleSharp.Io.IResponse,AngleSharp.Scripting.ScriptOptions,System.Threading.CancellationToken)">
            <summary>
            Evaluates a script for the given response asynchronously.
            </summary>
            <param name="response">
            The response with the stream representing the source of the script.
            </param>
            <param name="options">
            The options with the parameters for invoking the script.
            </param>
            <param name="cancel">The cancellation token.</param>
            <returns>The task evaluating the script.</returns>
        </member>
        <member name="T:AngleSharp.Scripting.ScriptOptions">
            <summary>
            Transport object for running scripts.
            </summary>
        </member>
        <member name="M:AngleSharp.Scripting.ScriptOptions.#ctor(AngleSharp.Dom.IDocument)">
            <summary>
            Creates new script options for the given document.
            </summary>
            <param name="document">The document to use.</param>
        </member>
        <member name="P:AngleSharp.Scripting.ScriptOptions.Document">
            <summary>
            Gets the parent document of the executing script.
            </summary>
        </member>
        <member name="P:AngleSharp.Scripting.ScriptOptions.Element">
            <summary>
            Gets or sets the script element that triggered the invocation.
            </summary>
        </member>
        <member name="P:AngleSharp.Scripting.ScriptOptions.Encoding">
            <summary>
            Gets or sets the encoding that has been selected for the script.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.SvgCircleElement">
            <summary>
            Represents the circle element of the SVG DOM.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.SvgDescElement">
            <summary>
            Represents the desc element of the SVG DOM.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.SvgElement">
            <summary>
            Represents an element of the SVG DOM.
            </summary>
        </member>
        <member name="M:AngleSharp.Svg.Dom.SvgElement.#ctor(AngleSharp.Dom.Document,System.String,System.String,AngleSharp.Dom.NodeFlags)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Svg.Dom.SvgElement.ParseSubtree(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AngleSharp.Svg.Dom.SvgElement.Clone(AngleSharp.Dom.Document,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:AngleSharp.Svg.Dom.SvgForeignObjectElement">
            <summary>
            Represents the foreign object element of the SVG DOM.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.SvgSvgElement">
            <summary>
            Represents the svg element of the SVG DOM.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.SvgTitleElement">
            <summary>
            Represents the title element of the SVG DOM.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.ISvgCircleElement">
            <summary>
            Represents the circle SVG element.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.ISvgDescriptionElement">
            <summary>
            Represents the desc SVG element.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.ISvgElement">
            <summary>
            The SVGElement interface represents any SVG element. Some elements directly
            implement this interface, other implement it via an interface that inherit it.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.ISvgForeignObjectElement">
            <summary>
            Represents the foreignobject SVG element.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.ISvgSvgElement">
            <summary>
            Represents the svg SVG element.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.Dom.ISvgTitleElement">
            <summary>
            Represents the title SVG element.
            </summary>
        </member>
        <member name="T:AngleSharp.Svg.SvgElementFactory">
            <summary>
            Provides string to SVGElement instance creation mappings.
            </summary>
        </member>
        <member name="M:AngleSharp.Svg.SvgElementFactory.Create(AngleSharp.Dom.Document,System.String,System.String)">
            <summary>
            Returns a specialized SVGElement instance for the given tag name.
            </summary>
            <param name="document">The document that owns the element.</param>
            <param name="localName">The given tag name.</param>
            <param name="prefix">The prefix of the element, if any.</param>
            <returns>The specialized SVGElement instance.</returns>
        </member>
        <member name="T:AngleSharp.Text.CharExtensions">
            <summary>
            Useful methods for chars.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.FromHex(System.Char)">
            <summary>
            Converts a given character from the hex representation (0-9A-Fa-f)
            to an integer.
            </summary>
            <param name="c">The character to convert.</param>
            <returns>
            The integer value or undefined behavior if invalid.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.ToHex(System.Byte)">
            <summary>
            Transforms the given number to a hexadecimal string.
            </summary>
            <param name="num">The number (0-255).</param>
            <returns>A 2 digit upper case hexadecimal string.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.ToHex(System.Char)">
            <summary>
            Transforms the given character to a hexadecimal string.
            </summary>
            <param name="character">The single character.</param>
            <returns>A minimal digit lower case hexadecimal string.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsInRange(System.Char,System.Int32,System.Int32)">
            <summary>
            Determines if the given character is in the given range.
            </summary>
            <param name="c">The character to examine.</param>
            <param name="lower">The lower bound of the range.</param>
            <param name="upper">The upper bound of the range.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsNormalQueryCharacter(System.Char)">
            <summary>
            Determines if the given character is allowed as-it-is in queries.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsNormalPathCharacter(System.Char)">
            <summary>
            Determines if the given character is allowed as-it-is in paths.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsUppercaseAscii(System.Char)">
            <summary>
            Determines if the given character is a uppercase character (A-Z) as
            specified here:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#uppercase-ascii-letters
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsLowercaseAscii(System.Char)">
            <summary>
            Determines if the given character is a lowercase character (a-z) as
            specified here:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#lowercase-ascii-letters
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsAlphanumericAscii(System.Char)">
            <summary>
            Determines if the given character is a alphanumeric character
            (0-9a-zA-z) as specified here:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#alphanumeric-ascii-characters
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsHex(System.Char)">
            <summary>
            Determines if the given character is a hexadecimal (0-9a-fA-F) as
            specified here:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#ascii-hex-digits
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsNonAscii(System.Char)">
            <summary>
            Gets if the character is actually a non-ascii character.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsNonPrintable(System.Char)">
            <summary>
            Gets if the character is actually a non-printable (special)
            character.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsLetter(System.Char)">
            <summary>
            Gets if the character is actually a (A-Z,a-z) letter.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsName(System.Char)">
            <summary>
            Gets if the character is actually a name character.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsNameStart(System.Char)">
            <summary>
            Determines if the given character is a valid character for starting
            an identifier.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsLineBreak(System.Char)">
            <summary>
            Determines if the given character is a line break character as
            specified here:
            http://www.w3.org/TR/html401/struct/text.html#h-9.3.2
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsSpaceCharacter(System.Char)">
            <summary>
            Determines if the given character is a space character as specified
            here:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#space-character
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsWhiteSpaceCharacter(System.Char)">
            <summary>
            Determines if the given character is a white-space character as
            specified here:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#white_space
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsDigit(System.Char)">
            <summary>
            Determines if the given character is a digit (0-9) as specified
            here:
            http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#ascii-digits
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsUrlCodePoint(System.Char)">
            <summary>
            Determines if the given character is a valid url code point as specified here:
            http://url.spec.whatwg.org/#url-code-points
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsInvalid(System.Int32)">
            <summary>
            Determines if the given character is invalid, i.e. zero, above the
            max. codepoint or in an invalid range.
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsOneOf(System.Char,System.Char,System.Char)">
            <summary>
            Determines if the given character is one of the two others.
            </summary>
            <param name="c">The character to test.</param>
            <param name="a">The first option.</param>
            <param name="b">The second option.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsOneOf(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Determines if the given character is one of the three others.
            </summary>
            <param name="c">The character to test.</param>
            <param name="o1">The first option.</param>
            <param name="o2">The second option.</param>
            <param name="o3">The third option.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.CharExtensions.IsOneOf(System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Determines if the given character is one of the four others.
            </summary>
            <param name="c">The character to test.</param>
            <param name="o1">The first option.</param>
            <param name="o2">The second option.</param>
            <param name="o3">The third option.</param>
            <param name="o4">The fourth option.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="T:AngleSharp.Text.Punycode">
            <summary>
            Represents a Punycode encoding helper class.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Punycode.Symbols">
            <summary>
            A list of available punycode character mappings.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.Punycode.Encode(System.String)">
            <summary>
            Encodes the given text using Punycode.
            </summary>
        </member>
        <member name="T:AngleSharp.Text.StringBuilderPool">
            <summary>
            Provides a pool of used / recycled resources.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.StringBuilderPool.MaxCount">
            <summary>
            Gets or sets the maximum number of instances - at least 1.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.StringBuilderPool.SizeLimit">
            <summary>
            Gets or sets the max. capacity per instance - at least 85000.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.StringBuilderPool.Obtain">
            <summary>
            Either creates a fresh stringbuilder or gets a (cleaned) used one.
            </summary>
            <returns>A stringbuilder to use.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringBuilderPool.ToPool(System.Text.StringBuilder)">
            <summary>
            Returns the given stringbuilder to the pool and gets the current
            string content.
            </summary>
            <param name="sb">The stringbuilder to recycle.</param>
            <returns>The string that is created in the stringbuilder.</returns>
        </member>
        <member name="T:AngleSharp.Text.StringExtensions">
            <summary>
            Useful methods for string objects.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.Has(System.String,System.Char,System.Int32)">
            <summary>
            Checks if the given string has a certain character at a specific
            index. The index is optional (default is 0).
            </summary>
            <param name="value">The value to examine.</param>
            <param name="chr">The character to look for.</param>
            <param name="index">The index of the character.</param>
            <returns>True if the value has the char, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.GetCompatiblity(AngleSharp.Dom.QuirksMode)">
            <summary>
            Retrieves a string describing the compatibility mode of the given quirksmode.
            </summary>
            <param name="mode">A specific quriks mode.</param>
            <returns>The compatibility string.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.HtmlLower(System.String)">
            <summary>
            Transforms the given string to lower case by the HTML specification.
            </summary>
            <param name="value">The string to be transformed.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.ParseSecuritySettings(System.String,System.Boolean)">
            <summary>
            Converts the given value to a sandbox flag.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="allowFullscreen">Should full screen be allowed?</param>
            <returns>The sandbox flag.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            Converts the given value to an enumeration value (or not).
            </summary>
            <param name="value">The value to convert.</param>
            <param name="defaultValue">The default value to consider (optional).</param>
            <returns>The converted enum value.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.ToDouble(System.String,System.Double)">
            <summary>
            Converts the given value to a double (or not).
            </summary>
            <param name="value">The value to convert.</param>
            <param name="defaultValue">The default value to consider (optional).</param>
            <returns>The converted double.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.ToInteger(System.String,System.Int32)">
            <summary>
            Converts the given value to an integer (or not).
            </summary>
            <param name="value">The value to convert.</param>
            <param name="defaultValue">The default value to consider (optional).</param>
            <returns>The converted integer.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.ToInteger(System.String,System.UInt32)">
            <summary>
            Converts the given value to an unsigned integer (or not).
            </summary>
            <param name="value">The value to convert.</param>
            <param name="defaultValue">The default value to consider (optional).</param>
            <returns>The converted unsigned integer.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.ToBoolean(System.String,System.Boolean)">
            <summary>
            Converts the given value to a boolean (or not).
            </summary>
            <param name="value">The value to convert.</param>
            <param name="defaultValue">The default value to consider (optional).</param>
            <returns>The converted boolean.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first occurance of the string search with replace.
            </summary>
            <param name="text">The text to use.</param>
            <param name="search">The string to search for.</param>
            <param name="replace">The one-time replacement string.</param>
            <returns>The result of the search-and-replace.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.CollapseAndStrip(System.String)">
            <summary>
            Collapses and strips all spaces in the given string.
            </summary>
            <param name="str">The string to collapse and strip.</param>
            <returns>The modified string with collapsed and stripped spaces.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.Collapse(System.String)">
            <summary>
            Collapses all spaces in the given string.
            </summary>
            <param name="str">The string to collapse.</param>
            <returns>The modified string with collapsed spaces.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.Contains(System.String[],System.String,System.StringComparison)">
            <summary>
            Examines if a the given list of string contains a certain element.
            </summary>
            <param name="list">The list of strings.</param>
            <param name="element">The element to search for.</param>
            <param name="comparison">The default comparison to use.</param>
            <returns>The status of the check.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.Is(System.String,System.String)">
            <summary>
            Checks if two strings are exactly equal.
            </summary>
            <param name="current">The current string.</param>
            <param name="other">The other string.</param>
            <returns>True if both are equal, false otherwise.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.Isi(System.String,System.String)">
            <summary>
            Checks if two strings are equal when viewed case-insensitive.
            </summary>
            <param name="current">The current string.</param>
            <param name="other">The other string.</param>
            <returns>True if both are equal, false otherwise.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.IsOneOf(System.String,System.String,System.String)">
            <summary>
            Examines if the given element is equal to one of the given elements.
            </summary>
            <param name="element">The element to check for equality.</param>
            <param name="item1">The first item to compare to.</param>
            <param name="item2">The second item to compare to.</param>
            <returns>True if the element is equal to one of the elements, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.IsOneOf(System.String,System.String,System.String,System.String)">
            <summary>
            Examines if the given element is equal to one of the given elements.
            </summary>
            <param name="element">The element to check for equality.</param>
            <param name="item1">The first item to compare to.</param>
            <param name="item2">The second item to compare to.</param>
            <param name="item3">The third item to compare to.</param>
            <returns>True if the element is equal to one of the elements, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.IsOneOf(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Examines if the given element is equal to one of the given elements.
            </summary>
            <param name="element">The element to check for equality.</param>
            <param name="item1">The first item to compare to.</param>
            <param name="item2">The second item to compare to.</param>
            <param name="item3">The third item to compare to.</param>
            <param name="item4">The fourth item to compare to.</param>
            <returns>True if the element is equal to one of the elements, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.IsOneOf(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Examines if the given element is equal to one of the given elements.
            </summary>
            <param name="element">The element to check for equality.</param>
            <param name="item1">The first item to compare to.</param>
            <param name="item2">The second item to compare to.</param>
            <param name="item3">The third item to compare to.</param>
            <param name="item4">The fourth item to compare to.</param>
            <param name="item5">The fifth item to compare to.</param>
            <returns>True if the element is equal to one of the elements, otherwise false.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.StripLineBreaks(System.String)">
            <summary>
            Strips all line breaks from the given string.
            </summary>
            <param name="str">The string to examine.</param>
            <returns>A new string, which excludes the line breaks.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.StripLeadingTrailingSpaces(System.String)">
            <summary>
            Strips all leading and trailing space characters from the given string.
            </summary>
            <param name="str">The string to examine.</param>
            <returns>A new string, which excludes the leading and tailing spaces.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.StripLeadingTrailingSpaces(System.Char[])">
            <summary>
            Strips all leading and trailing space characters from the given char array.
            </summary>
            <param name="array">The array of characters to examine.</param>
            <returns>A new string, which excludes the leading and tailing spaces.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.SplitWithoutTrimming(System.String,System.Char)">
            <summary>
            Splits the string with the given char delimiter.
            </summary>
            <param name="str">The string to examine.</param>
            <param name="c">The delimiter character.</param>
            <returns>The list of tokens.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.SplitWithoutTrimming(System.Char[],System.Char)">
            <summary>
            Splits the char array with the given char delimiter.
            </summary>
            <param name="chars">The char array to examine.</param>
            <param name="c">The delimiter character.</param>
            <returns>The list of tokens.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.SplitCommas(System.String)">
            <summary>
            Splits the string on commas.
            </summary>
            <param name="str">The string to examine.</param>
            <returns>The list of tokens.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.HasHyphen(System.String,System.String,System.StringComparison)">
            <summary>
            Checks if the provided string starts with the given value, either by exactly matching it,
            or by comparing against the start including an additional dash character.
            </summary>
            <param name="str">The string to examine.</param>
            <param name="value">The value to check against.</param>
            <param name="comparison">The string comparison mode.</param>
            <returns>True if the string is exactly equal to or starts with the given value.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.SplitSpaces(System.String)">
            <summary>
            Splits the string on space characters.
            </summary>
            <param name="str">The string to examine.</param>
            <returns>The list of tokens.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.SplitWithTrimming(System.String,System.Char)">
            <summary>
            Splits the string with the given char delimiter and trims the leading and tailing spaces.
            </summary>
            <param name="str">The string to examine.</param>
            <param name="c">The delimiter character.</param>
            <returns>The list of tokens.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.FromHex(System.String)">
            <summary>
            Converts the given string to an integer.
            </summary>
            <param name="s">The hexadecimal representation.</param>
            <returns>The integer number.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.FromDec(System.String)">
            <summary>
            Converts the given string to an integer.
            </summary>
            <param name="s">The decimal representation.</param>
            <returns>The integer number.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.HtmlEncode(System.String,System.Text.Encoding)">
            <summary>
            Replaces characters in names and values that cannot be expressed by using the given
            encoding with &amp;#...; base-10 unicode point.
            </summary>
            <param name="value">The value to sanatize.</param>
            <param name="encoding">The encoding to consider.</param>
            <returns>The sanatized value.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.CssString(System.String)">
            <summary>
            Serializes the string to a CSS string.
            </summary>
            <param name="value">The value to serialize.</param>
            <returns>The CSS string representation.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.CssFunction(System.String,System.String)">
            <summary>
            Creates a CSS function from the string with the given argument.
            </summary>
            <param name="value">The CSS function name.</param>
            <param name="argument">The CSS function argument.</param>
            <returns>The CSS function string.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.UrlEncode(System.Byte[])">
            <summary>
            Replaces characters in names and values that should not be in URL
            values. Replaces the bytes 0x20 (U+0020 SPACE if interpreted as
            ASCII) with a single 0x2B byte ("+" (U+002B) character if
            interpreted as ASCII). If a byte is not in the range 0x2A, 0x2D,
            0x2E, 0x30 to 0x39, 0x41 to 0x5A, 0x5F, 0x61 to 0x7A, it is 
            replaced with its hexadecimal value (zero-padded if necessary), 
            starting with the percent sign.
            </summary>
            <param name="content">The content to encode.</param>
            <returns>The encoded value.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.UrlDecode(System.String)">
            <summary>
            Decodes the provided percent encoded string. An exception is thrown
            in case of an invalid input value.
            </summary>
            <param name="value">The value to decode.</param>
            <returns>The decoded content.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.NormalizeLineEndings(System.String)">
            <summary>
            Replaces every occurrence of a "CR" (U+000D) character not followed
            by a "LF" (U+000A) character, and every occurrence of a "LF"
            (U+000A) character not preceded by a "CR" (U+000D) character, by a
            two-character string consisting of a U+000D CARRIAGE RETURN "CRLF"
            (U+000A) character pair.
            </summary>
            <param name="value">The value to normalize.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringExtensions.ToEncodingType(System.String)">
            <summary>
            Converts the current string to one of the encoding types.
            </summary>
            <param name="encType">The string to convert.</param>
            <returns>
            The encoding type with fallback application/x-www-form-urlencoded.
            </returns>
        </member>
        <member name="T:AngleSharp.Text.StringSource">
            <summary>
            A string abstraction for micro parsers.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.StringSource.#ctor(System.String)">
            <summary>
            Creates a new string source from the given content.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.StringSource.Current">
            <summary>
            Gets the current character.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.StringSource.IsDone">
            <summary>
            Gets if the content has been fully scanned.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.StringSource.Index">
            <summary>
            Gets the current index.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.StringSource.Content">
            <summary>
            Gets the underlying content.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.StringSource.Next">
            <summary>
            Advances by one character and returns the character.
            </summary>
            <returns>The next character.</returns>
        </member>
        <member name="M:AngleSharp.Text.StringSource.Back">
            <summary>
            Goes back by one character and returns the character.
            </summary>
            <returns>The previous character.</returns>
        </member>
        <member name="T:AngleSharp.Text.StringSourceExtensions">
            <summary>
            Extensions for the string source helper.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.StringSourceExtensions.SkipSpaces(AngleSharp.Text.StringSource)">
            <summary>
            Skips all spaces starting at the current character.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.StringSourceExtensions.Next(AngleSharp.Text.StringSource,System.Int32)">
            <summary>
            Goes back n characters.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.StringSourceExtensions.Back(AngleSharp.Text.StringSource,System.Int32)">
            <summary>
            Goes back n characters.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.StringSourceExtensions.Peek(AngleSharp.Text.StringSource)">
            <summary>
            Gets the upcoming character without advancing.
            </summary>
        </member>
        <member name="T:AngleSharp.Text.Symbols">
            <summary>
            Contains useful information from the specification.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.EndOfFile">
            <summary>
            The end of file marker (Char.MaxValue).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Tilde">
            <summary>
            The tilde character ( ~ ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Pipe">
            <summary>
            The pipe character ( | ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Null">
            <summary>
            The null character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Ampersand">
            <summary>
            The ampersand character ( &amp; ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Num">
            <summary>
            The number sign character ( # ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Dollar">
            <summary>
            The dollar sign character ( $ ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Semicolon">
            <summary>
            The semicolon sign ( ; ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Asterisk">
            <summary>
            The asterisk character ( * ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Equality">
            <summary>
            The equals sign ( = ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Plus">
            <summary>
            The plus sign ( + ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Minus">
            <summary>
            The dash ( hypen minus, - ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Comma">
            <summary>
            The comma character ( , ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Dot">
            <summary>
            The full stop ( . ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Accent">
            <summary>
            The circumflex accent ( ^ ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.At">
            <summary>
            The commercial at ( @ ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.LessThan">
            <summary>
            The opening angle bracket ( LESS-THAN-SIGN ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.GreaterThan">
            <summary>
            The closing angle bracket ( GREATER-THAN-SIGN ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.SingleQuote">
            <summary>
            The single quote / quotation mark ( ' ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.DoubleQuote">
            <summary>
            The (double) quotation mark ( " ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.CurvedQuote">
            <summary>
            The (curved) quotation mark ( ` ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.QuestionMark">
            <summary>
            The question mark ( ? ).
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Tab">
            <summary>
            The tab character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.LineFeed">
            <summary>
            The line feed character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.CarriageReturn">
            <summary>
            The carriage return character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.FormFeed">
            <summary>
            The form feed character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Space">
            <summary>
            The space character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Solidus">
            <summary>
            The slash (solidus, /) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.NoBreakSpace">
            <summary>
            The no break space character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.ReverseSolidus">
            <summary>
            The backslash ( reverse-solidus, \ ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Colon">
            <summary>
            The colon ( : ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.ExclamationMark">
            <summary>
            The exclamation mark ( ! ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Replacement">
            <summary>
            The replacement character in case of errors.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Underscore">
            <summary>
            The low line ( _ ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.RoundBracketOpen">
            <summary>
            The round bracket open ( ( ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.RoundBracketClose">
            <summary>
            The round bracket close ( ) ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.SquareBracketOpen">
            <summary>
            The square bracket open ( [ ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.SquareBracketClose">
            <summary>
            The square bracket close ( ] ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.CurlyBracketOpen">
            <summary>
            The curly bracket open ( { ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.CurlyBracketClose">
            <summary>
            The curly bracket close ( } ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.Percent">
            <summary>
            The percent ( % ) character.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.Symbols.MaximumCodepoint">
            <summary>
            The maximum allowed codepoint (defined in Unicode).
            </summary>
        </member>
        <member name="T:AngleSharp.Text.TextEncoding">
            <summary>
            Various HTML encoding helpers.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Utf8">
            <summary>
            Gets the UTF-8 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Utf16Be">
            <summary>
            Gets the UTF-16 (Big Endian) encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Utf16Le">
            <summary>
            Gets the UTF-16 (Little Endian) encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Utf32Le">
            <summary>
            Gets the UTF-32 (Little Endian) encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Utf32Be">
            <summary>
            Gets the UTF-32 (Little Endian) encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Gb18030">
            <summary>
            Gets the chinese government standard encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Big5">
            <summary>
            Gets the Big5 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows874">
            <summary>
            Gets the Windows-874 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1250">
            <summary>
            Gets the Windows-1250 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1251">
            <summary>
            Gets the Windows-1251 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1252">
            <summary>
            Gets the Windows-1252 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1253">
            <summary>
            Gets the Windows-1253 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1254">
            <summary>
            Gets the Windows-1254 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1255">
            <summary>
            Gets the Windows-1255 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1256">
            <summary>
            Gets the Windows-1256 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1257">
            <summary>
            Gets the Windows-1257 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Windows1258">
            <summary>
            Gets the Windows-1258 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Latin2">
            <summary>
            Gets the iso-8859-2 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Latin3">
            <summary>
            Gets the iso-8859-53 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Latin4">
            <summary>
            Gets the iso-8859-4 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Latin5">
            <summary>
            Gets the iso-8859-5 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Latin13">
            <summary>
            Gets the iso-8859-13 encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.UsAscii">
            <summary>
            Gets the US-ASCII encoding.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextEncoding.Korean">
            <summary>
            Gets the ks_c_5601-1987 encoding.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextEncoding.IsUnicode(System.Text.Encoding)">
            <summary>
            Checks if the provided encoding is any UTF-16 encoding.
            </summary>
            <param name="encoding">The encoding to check.</param>
            <returns>The result of the check (UTF-16BE, UTF-16LE).</returns>
        </member>
        <member name="M:AngleSharp.Text.TextEncoding.Parse(System.String)">
            <summary>
            Tries to extract the encoding from the given http-equiv content
            string.
            </summary>
            <param name="content">The value of the attribute.</param>
            <returns>
            The extracted encoding or null if the encoding is invalid.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextEncoding.IsSupported(System.String)">
            <summary>
            Detects if a valid encoding has been found in the given charset
            string.
            </summary>
            <param name="charset">The parsed charset string.</param>
            <returns>
            True if a valid encdoing has been found, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextEncoding.Resolve(System.String)">
            <summary>
            Resolves an Encoding instance given by the charset string.
            If the desired encoding is not found (or supported), then
            UTF-8 will be returned.
            </summary>
            <param name="charset">The charset string.</param>
            <returns>An instance of the Encoding class or null.</returns>
        </member>
        <member name="T:AngleSharp.Text.TextPosition">
            <summary>
            The position in the source code.
            </summary>
        </member>
        <member name="F:AngleSharp.Text.TextPosition.Empty">
            <summary>
            An empty position (0, 0, 0).
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.#ctor(System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Creates a new text position.
            </summary>
            <param name="line">The line of the character.</param>
            <param name="column">The column of the character.</param>
            <param name="position">The index of the character.</param>
        </member>
        <member name="P:AngleSharp.Text.TextPosition.Line">
            <summary>
            Gets the line within the document.
            The line is 1-based, so the first line has value 1.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextPosition.Column">
            <summary>
            Gets the column within the document.
            The column is 1-based, so the first column has value 1.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextPosition.Position">
            <summary>
            Gets the position within the source.
            The position is 1-based, so the first character is at position 1.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextPosition.Index">
            <summary>
            Gets the index within the source.
            The index is 0-based, so the first character is at index 0.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.Shift(System.Int32)">
            <summary>
            Returns a new text position that includes the given offset.
            </summary>
            <param name="columns">The number of columns to shift.</param>
            <returns>The new text position.</returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.After(System.Char)">
            <summary>
            Returns a new text position that is after the given character.
            </summary>
            <param name="chr">The character to analyze.</param>
            <returns>The new text position.</returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.After(System.String)">
            <summary>
            Returns a new text position that is after the given string.
            </summary>
            <param name="str">The string to analyze.</param>
            <returns>The new text position.</returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.ToString">
            <summary>
            Returns a string representation of the position in the text.
            </summary>
            <returns>
            A string that contains the contained line and column.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            An integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">
            The object to compare with the current instance.
            </param>
            <returns>
            True if the given object is a text position with the same values,
            otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.Equals(AngleSharp.Text.TextPosition)">
            <summary>
            Indicates whether the current position is equal to the given
            position.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            True if the given position has the same values, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.op_GreaterThan(AngleSharp.Text.TextPosition,AngleSharp.Text.TextPosition)">
            <summary>
            Compares the two positions by their absolute positions in the text
            source.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
            True if the position of the first operand is greater than the
            second operand.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.op_LessThan(AngleSharp.Text.TextPosition,AngleSharp.Text.TextPosition)">
            <summary>
            Compares the two positions by their absolute positions in the text
            source.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
            True if the position of the first operand is less than the second
            operand.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextPosition.CompareTo(AngleSharp.Text.TextPosition)">
            <summary>
            Compares the current position with another position.
            </summary>
            <param name="other">The position to compare to.</param>
            <returns>
            A mathematical representation of the relation (1 = greater, -1 =
            less, 0 = equal).
            </returns>
        </member>
        <member name="T:AngleSharp.Text.TextRange">
            <summary>
            The positional range in the source code.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextRange.#ctor(AngleSharp.Text.TextPosition,AngleSharp.Text.TextPosition)">
            <summary>
            Creates a new text range.
            </summary>
            <param name="start">The start of the range.</param>
            <param name="end">The end of the range.</param>
        </member>
        <member name="P:AngleSharp.Text.TextRange.Start">
            <summary>
            Gets the start position of the range.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextRange.End">
            <summary>
            Gets the end position of the range.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextRange.ToString">
            <summary>
            Returns a string representation of the range in the text.
            </summary>
            <returns>
            A string that contains the start and end positions.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            An integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextRange.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">
            The object to compare with the current instance.
            </param>
            <returns>
            True if the given object is a text position with the same values,
            otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextRange.Equals(AngleSharp.Text.TextRange)">
            <summary>
            Indicates whether the current range is equal to the given range.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            True if the given range has the same start and end position,
            otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextRange.op_GreaterThan(AngleSharp.Text.TextRange,AngleSharp.Text.TextRange)">
            <summary>
            Compares the two ranges by their positions in the text source.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
            True if the start position of the first operand is greater than the
            end position of the second operand.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextRange.op_LessThan(AngleSharp.Text.TextRange,AngleSharp.Text.TextRange)">
            <summary>
            Compares the two ranges by their positions in the text source.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>
            True if the end position of the first operand is less than the
            start position of the second operand.
            </returns>
        </member>
        <member name="M:AngleSharp.Text.TextRange.CompareTo(AngleSharp.Text.TextRange)">
            <summary>
            Compares the current range with another range.
            </summary>
            <param name="other">The range to compare to.</param>
            <returns>
            A mathematical representation of the relation (1 = greater, -1 =
            less, 0 = equal).
            </returns>
        </member>
        <member name="T:AngleSharp.Text.TextSource">
            <summary>
            A stream abstraction to handle encoding and more.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextSource.#ctor(System.String)">
            <summary>
            Creates a new text source from a string. No underlying stream will
            be used.
            </summary>
            <param name="source">The data source.</param>
        </member>
        <member name="M:AngleSharp.Text.TextSource.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new text source from a string. The underlying stream is
            used as an unknown data source.
            </summary>
            <param name="baseStream">
            The underlying stream as data source.
            </param>
            <param name="encoding">
            The initial encoding. Otherwise UTF-8.
            </param>
        </member>
        <member name="P:AngleSharp.Text.TextSource.Text">
            <summary>
            Gets the full text buffer.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextSource.Item(System.Int32)">
            <summary>
            Gets the character at the given position in the text buffer.
            </summary>
            <param name="index">The index of the character.</param>
            <returns>The character.</returns>
        </member>
        <member name="P:AngleSharp.Text.TextSource.Length">
            <summary>
            Gets the length of the text buffer.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextSource.CurrentEncoding">
            <summary>
            Gets or sets the encoding to use.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextSource.Index">
            <summary>
            Gets or sets the current index of the insertation and read point.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextSource.Dispose">
            <summary>
            Disposes the text source by freeing the underlying stream, if any.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextSource.ReadCharacter">
            <summary>
            Reads the next character from the buffer or underlying stream, if
            any.
            </summary>
            <returns>The next character.</returns>
        </member>
        <member name="M:AngleSharp.Text.TextSource.ReadCharacters(System.Int32)">
            <summary>
            Reads the upcoming numbers of characters from the buffer or
            underlying stream, if any.
            </summary>
            <param name="characters">The number of characters to read.</param>
            <returns>The string with the next characters.</returns>
        </member>
        <member name="M:AngleSharp.Text.TextSource.PrefetchAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Prefetches the number of bytes by expanding the internal buffer.
            </summary>
            <param name="length">The number of bytes to prefetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The awaitable task.</returns>
        </member>
        <member name="M:AngleSharp.Text.TextSource.PrefetchAllAsync(System.Threading.CancellationToken)">
            <summary>
            Prefetches the whole stream by expanding the internal buffer.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The awaitable task.</returns>
        </member>
        <member name="M:AngleSharp.Text.TextSource.InsertText(System.String)">
            <summary>
            Inserts the given content at the current insertation mark. Moves the
            insertation mark.
            </summary>
            <param name="content">The content to insert.</param>
        </member>
        <member name="T:AngleSharp.Text.TextView">
            <summary>
            Represents a view on a particular source code.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.TextView.#ctor(AngleSharp.Text.TextSource,AngleSharp.Text.TextRange)">
            <summary>
            Creates a new text view for the given range.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextView.Range">
            <summary>
            Gets the start and end of the text view.
            </summary>
        </member>
        <member name="P:AngleSharp.Text.TextView.Text">
            <summary>
            Gets the text associated with this view.
            </summary>
        </member>
        <member name="T:AngleSharp.Text.XmlExtensions">
            <summary>
            Useful helpers for the XML parser.
            </summary>
        </member>
        <member name="M:AngleSharp.Text.XmlExtensions.IsPubidChar(System.Char)">
            <summary>
            Determines if the given character is a legal character for the public id field:
            http://www.w3.org/TR/REC-xml/#NT-PubidChar
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.XmlExtensions.IsXmlNameStart(System.Char)">
            <summary>
            Determines if the given character is a legal name start character for XML.
            http://www.w3.org/TR/REC-xml/#NT-NameStartChar
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.XmlExtensions.IsXmlName(System.Char)">
            <summary>
            Determines if the given character is a name character for XML.
            http://www.w3.org/TR/REC-xml/#NT-NameChar
            </summary>
            <param name="c">The character to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.XmlExtensions.IsXmlName(System.String)">
            <summary>
            Determines if the given string is a valid (local or qualified) name.
            </summary>
            <param name="str">The string to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.XmlExtensions.IsQualifiedName(System.String)">
            <summary>
            Determines if the given string is a valid qualified name.
            </summary>
            <param name="str">The string to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:AngleSharp.Text.XmlExtensions.IsXmlChar(System.Char)">
            <summary>
            Checks if the given char is a valid character.
            </summary>
            <param name="chr">The char to examine.</param>
            <returns>True if the char would indeed be valid.</returns>
        </member>
        <member name="M:AngleSharp.Text.XmlExtensions.IsValidAsCharRef(System.Int32)">
            <summary>
            Checks if the given integer would be a valid character.
            </summary>
            <param name="chr">The integer to examine.</param>
            <returns>True if the integer would indeed be valid.</returns>
        </member>
        <member name="T:AngleSharp.Url">
            <summary>
            Represents an Url class according to RFC3986. This is the base for all
            internal Url manipulation.
            </summary>
        </member>
        <member name="M:AngleSharp.Url.#ctor(System.String)">
            <summary>
            Creates a new Url from the given string.
            </summary>
            <param name="address">The address to represent.</param>
        </member>
        <member name="M:AngleSharp.Url.#ctor(AngleSharp.Url,System.String)">
            <summary>
            Creates a new absolute Url from the relative Url with the given
            base address.
            </summary>
            <param name="baseAddress">The base address to use.</param>
            <param name="relativeAddress">
            The relative address to represent.
            </param>
        </member>
        <member name="M:AngleSharp.Url.#ctor(AngleSharp.Url)">
            <summary>
            Creates a new Url by copying the other Url.
            </summary>
            <param name="address">The address to copy.</param>
        </member>
        <member name="M:AngleSharp.Url.Create(System.String)">
            <summary>
            Creates an Url from an absolute url transported in a string.
            </summary>
            <param name="address">The address to use.</param>
            <returns>The new Url.</returns>
        </member>
        <member name="M:AngleSharp.Url.Convert(System.Uri)">
            <summary>
            Creates an Url from an url transported in an Uri.
            </summary>
            <param name="uri">The url to use.</param>
            <returns>The new Url.</returns>
        </member>
        <member name="P:AngleSharp.Url.Origin">
            <summary>
            Gets the origin of the stored url.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.IsInvalid">
            <summary>
            Gets if the URL parsing resulted in an error.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.IsRelative">
            <summary>
            Gets if the stored url is relative.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.IsAbsolute">
            <summary>
            Gets if the stored url is absolute.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.UserName">
            <summary>
            Gets or sets the username for authorization.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Password">
            <summary>
            Gets or sets the password for authorization.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Data">
            <summary>
            Gets the additional stored data of the URL. This is data that could
            not be assigned.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Fragment">
            <summary>
            Gets or sets the fragment.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Host">
            <summary>
            Gets or sets the host, e.g. "localhost:8800" or "www.w3.org".
            </summary>
        </member>
        <member name="P:AngleSharp.Url.HostName">
            <summary>
            Gets or sets the host name, e.g. "localhost" or "www.w3.org".
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Href">
            <summary>
            Gets or sets the hyper reference, i.e. the full path.
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Path">
            <summary>
            Gets or sets the pathname, e.g. "mypath".
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Port">
            <summary>
            Gets or sets the port, e.g. "8800".
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Scheme">
            <summary>
            Gets or sets the protocol, e.g. "http".
            </summary>
        </member>
        <member name="P:AngleSharp.Url.Query">
            <summary>
            Gets or sets the query.
            </summary>
        </member>
        <member name="M:AngleSharp.Url.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current url.</returns>
        </member>
        <member name="M:AngleSharp.Url.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current
            object.
            </summary>
            <param name="obj">
            The object to compare with the current object.
            </param>
            <returns>
            True if the object is equal to the current object, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Url.Equals(AngleSharp.Url)">
            <summary>
            Determines whether the specified url is equal to the current
            object.
            </summary>
            <param name="other">
            The url to compare with the current one.
            </param>
            <returns>
            True if the given url is equal to the current url, otherwise false.
            </returns>
        </member>
        <member name="M:AngleSharp.Url.op_Implicit(AngleSharp.Url)~System.Uri">
            <summary>
            Converts the given Url to an Uri.
            </summary>
            <param name="value">The Url to convert.</param>
            <returns>The Uri instance.</returns>
        </member>
        <member name="M:AngleSharp.Url.ToString">
            <summary>
            Returns a string that represents the current url.
            </summary>
            <returns>The currently stored url.</returns>
        </member>
        <member name="M:AngleSharp.Url.Serialize">
            <summary>
            Returns the string representation of the current location.
            </summary>
            <returns>The string that equals the hyper reference.</returns>
        </member>
        <member name="T:AngleSharp.Xhtml.XhtmlMarkupFormatter">
            <summary>
            Represents the standard XHTML markup formatter.
            </summary>
        </member>
        <member name="F:AngleSharp.Xhtml.XhtmlMarkupFormatter.Instance">
            <summary>
            An instance of the XhtmlMarkupFormatter.
            </summary>
        </member>
        <member name="M:AngleSharp.Xhtml.XhtmlMarkupFormatter.EscapeText(System.String)">
            <summary>
            Escapes the given text by replacing special characters with their
            XHTML entity (amp, nbsp as numeric value, lt, and gt).
            </summary>
            <param name="content">The string to alter.</param>
            <returns>The altered string.</returns>
        </member>
    </members>
</doc>
