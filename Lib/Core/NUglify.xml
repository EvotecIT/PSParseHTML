<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NUglify</name>
    </assembly>
    <members>
        <member name="T:NUglify.BlockStart">
            <summary>
            Describes how to output the opening curly-brace for blocks when the OutputMode
            is set to MultipleLines. 
            </summary>
        </member>
        <member name="F:NUglify.BlockStart.NewLine">
            <summary>
            Output the opening curly-brace block-start character on its own new line. Ex:
            if (condition)
            {
                ...
            }
            </summary>
        </member>
        <member name="F:NUglify.BlockStart.SameLine">
            <summary>
            Output the opening curly-brace block-start character at the end of the previous line. Ex:
            if (condition) {
                ...
            }
            </summary>
        </member>
        <member name="F:NUglify.BlockStart.UseSource">
            <summary>
            Output the opening curly-brace block-start character on the same line or a new line
            depending on how it was specified in the sources. 
            </summary>
        </member>
        <member name="T:NUglify.CommonData">
            <summary>
            Helper class to hold common data elements
            </summary>
        </member>
        <member name="F:NUglify.CommonData.s_replacementToken">
            <summary>
            Regular expression to identifier replacement token syntax
            </summary>
        </member>
        <member name="T:NUglify.CommonSettings">
            <summary>
            Common settings shared between CSS and JS settings objects
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.AllowEmbeddedAspNetBlocks">
            <summary>
            Gets or sets a boolean value indicating whether embedded asp.net blocks (&lt;% %>) should be recognized and output as is. Default is false.
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.BlocksStartOnSameLine">
            <summary>
            Gets or sets a value indicating whether the opening curly brace for blocks is
            on its own line (NewLine, default) or on the same line as the preceding code (SameLine)
            or taking a hint from the source code position (UseSource). Only relevant when OutputMode is 
            set to MultipleLines.
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.IgnoreAllErrors">
            <summary>
            Gets or sets a flag for whether to ignore ALL errors found in the input code.
            Default is false.
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.IndentSize">
            <summary>
            Gets or sets an integer value specifying the number of spaces per indent level when in MultipleLines output mode. (Default = 4)
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.LineBreakThreshold">
            <summary>
            Gets or sets the column position at which the line will be broken at the next available opportunity.
            Default value is int.MaxValue - 1000.
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.OutputMode">
            <summary>
            Gets or sets a value indicating the output mode:
            SingleLine (default) - output all code on a single line;
            MultipleLines - break the output into multiple lines to be more human-readable;
            SingleLine mode may still result in multiple lines if the LineBreakThreshold is set to a small enough value.
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.TermSemicolons">
            <summary>
            Gets or sets a boolean value indicting whether to add a semicolon at the end of the parsed code (true) or not (false, default)
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.KillSwitch">
            <summary>
            Gets or sets a long integer value containing kill switch flags for each individual mod to the parsed code tree. Allows for
            callers to turn off specific modifications if desired. Default is 0, meaning no kill switches are set.
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.LineTerminator">
            <summary>
            Gets an appropriate line-terminator string given the output mode
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.IgnoreErrorCollection">
            <summary>
            Gets a collection of errors to ignore
            </summary>
        </member>
        <member name="M:NUglify.CommonSettings.SetIgnoreErrors(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the collection of errors to ignore
            </summary>
            <param name="definedNames">collection of error code strings</param>
            <returns>number of error codes successfully added to the collection</returns>
        </member>
        <member name="P:NUglify.CommonSettings.IgnoreErrorList">
            <summary>
            string representation of the list of debug lookups, comma-separated
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.PreprocessorValues">
            <summary>
            dictionary of defines and their values
            </summary>
        </member>
        <member name="M:NUglify.CommonSettings.SetPreprocessorDefines(System.String[])">
            <summary>
            Set the collection of defined names for the preprocessor
            </summary>
            <param name="definedNames">array of defined name strings</param>
            <returns>number of names successfully added to the collection</returns>
        </member>
        <member name="M:NUglify.CommonSettings.SetPreprocessorValues(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the dictionary of preprocessor defines and values
            </summary>
            <param name="defines">dictionary to set</param>
        </member>
        <member name="P:NUglify.CommonSettings.PreprocessorDefineList">
            <summary>
            string representation of the list of names defined for the preprocessor, comma-separated
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.ResourceStrings">
            <summary>
            Collection of resource string objects
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.ReplacementTokens">
            <summary>
            Gets the mapping of replacement token to value
            </summary>
        </member>
        <member name="P:NUglify.CommonSettings.ReplacementFallbacks">
            <summary>
            Gets the mapping of replacement token fallback class to replacement value
            </summary>
        </member>
        <member name="M:NUglify.CommonSettings.ReplacementTokensApplyDefaults(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Only add items from the other set to the collection if the key doesn't already exist.
            (Previous sets are more specific than subsequent sets)
            </summary>
            <param name="otherSet">less-specific set of name/value replacement token pairs</param>
        </member>
        <member name="M:NUglify.CommonSettings.ReplacementTokensApplyOverrides(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Always add items from the other set, replacing any pre-existing items in the collection.
            (Subsequent sets are more specific than previous sets)
            </summary>
            <param name="otherSet">more-specific set of name/value replacement token pairs</param>
        </member>
        <member name="T:NUglify.CommonStrings">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.ContextSeparator">
            <summary>
               Looks up a localized string similar to : .
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.FallbackEncodingFailed">
            <summary>
               Looks up a localized string similar to Fallback character encoding failed.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.InvalidJSONOutput">
            <summary>
               Looks up a localized string similar to Invalid JSON JavaScript nodes encountered during output.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.Severity0">
            <summary>
               Looks up a localized string similar to run-time.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.Severity1">
            <summary>
               Looks up a localized string similar to coding.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.Severity2">
            <summary>
               Looks up a localized string similar to code.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.Severity3">
            <summary>
               Looks up a localized string similar to performance.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.Severity4">
            <summary>
               Looks up a localized string similar to improper technique.
            </summary>
        </member>
        <member name="P:NUglify.CommonStrings.SeverityUnknown">
            <summary>
               Looks up a localized string similar to unknown ({0}).
            </summary>
        </member>
        <member name="T:NUglify.CodeType">
            <summary>
            Type of code to process
            </summary>
        </member>
        <member name="F:NUglify.CodeType.Unknown">
            <summary>Unknown - cannot tell from output, input, or hint</summary>
        </member>
        <member name="F:NUglify.CodeType.JavaScript">
            <summary>JavaScript source code</summary>
        </member>
        <member name="F:NUglify.CodeType.StyleSheet">
            <summary>CSS Stylesheet source code</summary>
        </member>
        <member name="F:NUglify.CodeType.Mix">
            <summary>A mix of input types; error condition</summary>
        </member>
        <member name="T:NUglify.SourceOrigin">
            <summary>
            Source origin for the input file
            </summary>
        </member>
        <member name="F:NUglify.SourceOrigin.Project">
            <summary>Source file owned by the project</summary>
        </member>
        <member name="F:NUglify.SourceOrigin.External">
            <summary>Source file is external to the project</summary>
        </member>
        <member name="T:NUglify.CssEncoderFallback">
            <summary>
            CssFallback encodes invalid encoder characters as Unicode escapes:
                  \123456
            up to six hexadecimal characters. If less then six characters, we'll
            suffix the encoding with a space character, just un case the next character 
            could be mistaken for another hexadecimal digit.
            
            To use this class, create an instance of it and set it to the EncoderFallback
            property of your Encoding object. You may have to clone the Encoding object
            in order to get write access to the EncoderFallback property. 
            <example>
                var encoding = (Encoding)Encoding.ASCII.Clone();
                encoding.EncoderFallback = new CssEncoderFallback();
                var bytes = encoding.GetBytes(crunchedCode);
                Console.WriteLine(encoding.GetString(bytes));
            </example>
            </summary>
        </member>
        <member name="M:NUglify.CssEncoderFallback.CreateFallbackBuffer">
            <summary>
            return a fallback buffer for this encoding fallback
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUglify.CssEncoderFallback.MaxCharCount">
            <summary>
            the maximum number of characters we'll expand a single character into
            </summary>
        </member>
        <member name="T:NUglify.CssEncoderFallbackBuffer">
            <summary>
            fallback buffer for encoding unknown characters into CSS Unicode escapes
            </summary>
        </member>
        <member name="P:NUglify.CssEncoderFallbackBuffer.Remaining">
            <summary>
            Number of characters remaining in the buffer
            </summary>
        </member>
        <member name="M:NUglify.CssEncoderFallbackBuffer.GetEncoding(System.Int32)">
            <summary>
            Get the single-character encoding string
            </summary>
            <param name="unknownChar">character to encode</param>
            <returns>encoded string</returns>
        </member>
        <member name="M:NUglify.CssEncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
            <summary>
            Prepare the unknown character for encoding
            </summary>
            <param name="unknownChar">character to process</param>
            <param name="index">position in input string</param>
            <returns>true if characters to process placed in buffer</returns>
        </member>
        <member name="M:NUglify.CssEncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
            <summary>
            Prepare the unknwon surrogate pair for encoding
            </summary>
            <param name="unknownCharHigh">high surrogate pair character</param>
            <param name="unknownCharLow">low surrogate pair character</param>
            <param name="index">index of character in the stream</param>
            <returns></returns>
        </member>
        <member name="M:NUglify.CssEncoderFallbackBuffer.GetNextChar">
            <summary>
            return the next character
            </summary>
            <returns>(char)0 if no character</returns>
        </member>
        <member name="M:NUglify.CssEncoderFallbackBuffer.MovePrevious">
            <summary>
            back the character position up one character
            </summary>
            <returns>false if already at front; true otherwise</returns>
        </member>
        <member name="M:NUglify.CssEncoderFallbackBuffer.Reset">
            <summary>
            reset the fallback buffer to initial state
            </summary>
        </member>
        <member name="M:NUglify.CssEncoderFallbackBuffer.ToString">
            <summary>
            Return string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUglify.Css.ColorSlice">
            <summary>
            ColorSlice class
            </summary>
        </member>
        <member name="T:NUglify.Css.CssParser">
            <summary>
            Parser takes Tokens and parses them into rules and statements
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_regexHack1">
            <summary>
            regular expression for matching first comment hack
            This is the MacIE ignore bug: /*(anything or nothing inside)\*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_regexHack2">
            <summary>
            Regular expression for matching second comment hack
            Hide from everything EXCEPT Netscape 4 and Opera 5
            Format: /*/*//*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_regexHack3">
            <summary>
            Regular expression for matching third comment hack
            Hide from Netscape 4
            Format: /*/*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_regexHack4">
            <summary>
            Regular expression for matching fourth comment hack
            Hide from IE6
            Format: property /*(anything or nothing inside)*/:value
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by at least one whitespace character, followed
            by a simple comment, followed by optional space, followed by a colon.
            Does not match the simple word, the space or the colon (just the comment) 
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_regexHack5">
            <summary>
            Regular expression for matching fifth comment hack
            Hide from IE5.5
            Format: property:/* (anything or nothing inside) */value
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by optional whitespace character, followed
            by a colon, followed by optional whitespace, followed by a simple comment.
            Does not match initial word or the colon, just the comment.
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_regexHack6">
            <summary>
            Regular expression for matching sixth comment hack -- although not a real hack
            Hide from IE6, NOT
            Format: property/*(anything or nothing inside)*/:value
            NOTE: This doesn't actually hide from IE6; it needs a space before the comment to actually work.
            but enoough people code this in their CSS and expect it to be output that I recieved enough
            requests to add it to the allowed "hacks"
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by a simple comment, followed by optional space, followed by a colon.
            Does not match the simple word or the colon (just initial whitespace and comment) 
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_regexHack7">
            <summary>
            Regular expression for empty comments
            These comments don't really do anything. But if the developer wrote an empty
            comment (/**/ or /* */), then it has no documentation value and might possibly be
            an attempted comment hack.
            Format: /**/ or /* */ (single space)
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_rrggbb">
            <summary>
            matches 6-digit RGB color value where both r digits are the same, both
            g digits are the same, and both b digits are the same (but r, g, and b
            values are not necessarily the same). Used to identify #rrggbb values
            that can be collapsed to #rgb
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_valueReplacement">
            <summary>
            regular expression for matching css comments containing special formatted identifiers
            for value-replacement matching
            Format: /* [id] */
            </summary>
        </member>
        <member name="F:NUglify.Css.CssParser.s_sharepointReplacement">
            <summary>
            regular expression for matching Sharepoint Theme css comments
            Format: /* [ReplaceBGImage] */
                    /* [id(parameters)] */
                where id is one of: ReplaceColor, ReplaceFont, or RecolorImage
                and parameters is anything other than a close square-bracket
            </summary>
        </member>
        <member name="M:NUglify.Css.CssParser.PushWaypoint">
            <summary>
            Push a new string builder onto the builders stack
            </summary>
        </member>
        <member name="M:NUglify.Css.CssParser.PopWaypoint(System.Boolean)">
            <summary>
            Pop the top waypoint off the stack.
            If the Settings RemoveEmptyBlocks property is false, will keep the text, regardless of the passed-in setting.
            </summary>
            <param name="keepText">true if push the text of the popped waypoint onto the new top waypoint; false to discard</param>
            <returns>true if the popped builder has any text within it</returns>
        </member>
        <member name="M:NUglify.Css.CssParser.UnwindStackCompletely">
            <summary>
            Get all the text that has been accumulting in the string builders
            on the stack, unwinding the stack until it's empty
            </summary>
            <returns>string representation of all parsed text</returns>
        </member>
        <member name="M:NUglify.Css.CssParser.IsExcludedVendorPrefix(System.String)">
            <summary>
            Returns true if the given property is vendor-specific and the vendor prefix
            is in the list of excluded prefixes.
            </summary>
            <param name="propertyName">The property name</param>
            <returns>true if excluded; false otherwise</returns>
        </member>
        <member name="M:NUglify.Css.CssParser.SkipSpace">
            <summary>
            This method advances to the next token FIRST -- effectively skipping the current one -- 
            and then skips any space tokens that FOLLOW it.
            </summary>
        </member>
        <member name="M:NUglify.Css.CssParser.SkipIfSpace">
            <summary>
            This method only skips the space that is already the current token.
            </summary>
            <returns>true if space was skipped; false if the current token is not space</returns>
        </member>
        <member name="M:NUglify.Css.CssParser.AddNewLine">
            <summary>
            Always add new line to the stream
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:NUglify.Css.CssParser.NormalizedValueReplacementComment(System.String)">
            <summary>
            regular expression for matching newline characters
            </summary>
        </member>
        <member name="T:NUglify.Css.CssScanner">
            <summary>
            Scanner takes input stream and breaks it into Tokens
            </summary>
        </member>
        <member name="M:NUglify.Css.CssScanner.EatOneLineBreak">
            <summary>
            If the current character is a linebreak, eat it without advancing
            our position.
            </summary>
        </member>
        <member name="M:NUglify.Css.CssScanner.PreprocessingDirective(System.String)">
            <summary>
            Scan a preprocessing directive.
            </summary>
            <param name="comment">comment text</param>
            <returns>true if this is one of our preprocessing directives; false otherwise</returns>
        </member>
        <member name="M:NUglify.Css.CssScanner.IsValidVendorPrefix(System.String)">
            <summary>
            Determines whether a given string is a valid vendor prefix. No hyphens allowed.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:NUglify.Css.CssScanner.GetReplacementToken(System.Boolean)">
            <summary>
            Given the current character is a %, see if it's followed by a syntax
            that creates a valid replacement token. If so, return the token text.
            </summary>
            <param name="advancePastDelimiter">if true, the current char is the delimiter and needs to be advanced; 
            false means we are already at the next character and shouldn't advance</param>
            <returns>valid token text, or null</returns>
        </member>
        <member name="M:NUglify.Css.CssScanner.GetUnicodeEncodingValue(System.Boolean@)">
            <summary>
            returns the VALUE of a unicode number, up to six hex digits
            </summary>
            <returns>int value representing up to 6 hex digits</returns>
        </member>
        <member name="T:NUglify.Css.CssType">
            <summary>
            Enumeration for the type of CSS that will be parsed
            </summary>
        </member>
        <member name="F:NUglify.Css.CssType.FullStyleSheet">
            <summary>
            Default setting: expecting a full CSS stylesheet
            </summary>
        </member>
        <member name="F:NUglify.Css.CssType.DeclarationList">
            <summary>
            Expecting just a declaration list, for instance: the value of an HTML style attribute
            </summary>
        </member>
        <member name="F:NUglify.Css.CssComment.Important">
            <summary>
            Remove all comments except those marked as important (//! or /*!)
            </summary>
        </member>
        <member name="F:NUglify.Css.CssComment.None">
            <summary>
            Remove all source comments from the output
            </summary>
        </member>
        <member name="F:NUglify.Css.CssComment.All">
            <summary>
            Keep all source comments in the output
            </summary>
        </member>
        <member name="F:NUglify.Css.CssComment.Hacks">
            <summary>
            Remove all source comments except those for approved comment-based hacks. (See documentation)
            </summary>
        </member>
        <member name="T:NUglify.Css.CssColor">
            <summary>
            Enumeration for how to treat known color names
            </summary>
        </member>
        <member name="F:NUglify.Css.CssColor.Strict">
            <summary>
            Convert strict names to hex values if shorter; hex values to strict names if shorter. Leave all other
            color names or hex values as-specified.
            </summary>
        </member>
        <member name="F:NUglify.Css.CssColor.Hex">
            <summary>
            Always use hex values; do not convert any hex values to color names
            </summary>
        </member>
        <member name="F:NUglify.Css.CssColor.Major">
            <summary>
            Convert known hex values to major-browser color names if shorter; and known major-browser color
            names to hex if shorter.
            </summary>
        </member>
        <member name="F:NUglify.Css.CssColor.NoSwap">
            <summary>
            Don't swap names for hex or hex for names, whether or not one is shorter.
            </summary>
        </member>
        <member name="T:NUglify.Css.CssSettings">
            <summary>
            Settings Object for CSS Uglify
            </summary>
        </member>
        <member name="M:NUglify.Css.CssSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUglify.Css.CssSettings"/> class with default settings.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssSettings.ColorNames">
            <summary>
            Gets or sets ColorNames setting. Default is Strict.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssSettings.CommentMode">
            <summary>
            Gets or sets CommentMode setting. Default is Important.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssSettings.MinifyExpressions">
            <summary>
            Gets or sets a value indicating whether to minify the javascript within expression functions. Deault is true.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssSettings.CssType">
            <summary>
            Gets or sets a value indicating how to treat the input source. Default is FullStyleSheet.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssSettings.RemoveEmptyBlocks">
            <summary>
            Gets or sets a value indicating whether empty blocks removes the corresponding rule or directive. Default is true.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssSettings.FixIE8Fonts">
            <summary>
            Gets or sets a value indicating whether IE8 .EOT fonts should get a question-mark appended to the URL
            (if not there already) to prevent the browser from generating invalid HTTP requests to the server. Default is true.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssSettings.ExcludeVendorPrefixes">
            <summary>
            Gets or sets a list of vendor-specific prefixes ("ms", "webkit", "moz") that will be omitted from the output.
            Default is no exclusions.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssSettings.IgnoreRazorEscapeSequence">
            <summary>
            Gets or sets a value indicating whether a double-at Razor escape sequence is ignored.
            </summary>
        </member>
        <member name="T:NUglify.Css.CssStrings">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ColorCanBeCollapsed">
            <summary>
               Looks up a localized string similar to Color {0} can be collapsed to {1}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.DecimalNoDigit">
            <summary>
               Looks up a localized string similar to Decimal point not followed by numeric digit.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.DeclarationIgnored">
            <summary>
               Looks up a localized string similar to declaration ignored.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.DeclarationIgnoredFormat">
            <summary>
               Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.DuplicateNamespaceDeclaration">
            <summary>
               Looks up a localized string similar to Duplicate namespace declaration; already declared &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.EquivalentNumbers">
            <summary>
               Looks up a localized string similar to Numeric value contains unnecessary characters: {0} is equivalent to {1}..
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedCharset">
            <summary>
               Looks up a localized string similar to Expected charset string, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedClosingBrace">
            <summary>
               Looks up a localized string similar to Expected closing curly-brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedClosingBracket">
            <summary>
               Looks up a localized string similar to Expected closing bracket, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedClosingParenthesis">
            <summary>
               Looks up a localized string similar to Expected closing parenthesis, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedColon">
            <summary>
               Looks up a localized string similar to Expected colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedComma">
            <summary>
               Looks up a localized string similar to Expect comma, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedCommaOrOpenBrace">
            <summary>
               Looks up a localized string similar to Expected comma or open brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedCommaOrSemicolon">
            <summary>
               Looks up a localized string similar to Expected comma or semi-colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedEndOfFile">
            <summary>
               Looks up a localized string similar to Expected end of file; invalid input file.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedEqualSign">
            <summary>
               Looks up a localized string similar to Expected equal sign, found {0}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedExpression">
            <summary>
               Looks up a localized string similar to Expected expression, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedFunction">
            <summary>
               Looks up a localized string similar to Expected function, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedHexColor">
            <summary>
               Looks up a localized string similar to Expected hex color, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedIdentifier">
            <summary>
               Looks up a localized string similar to Expected identifier, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedIdentifierOrString">
            <summary>
               Looks up a localized string similar to Expected identifier or string, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedImport">
            <summary>
               Looks up a localized string similar to Expected import string or uri, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedMediaFeature">
            <summary>
               Looks up a localized string similar to Expected media feature, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedMediaIdentifier">
            <summary>
               Looks up a localized string similar to Expected media identifier, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedMediaQuery">
            <summary>
               Looks up a localized string similar to Expected media query, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedMediaQueryExpression">
            <summary>
               Looks up a localized string similar to Expected media-query expression, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedNamespace">
            <summary>
               Looks up a localized string similar to Expected namespace string or uri, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedNumber">
            <summary>
               Looks up a localized string similar to Expected number, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedOpenBrace">
            <summary>
               Looks up a localized string similar to Expected open brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedOpenParenthesis">
            <summary>
               Looks up a localized string similar to Expected opening parenthesis.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedPercentageFromOrTo">
            <summary>
               Looks up a localized string similar to Expected percentage, &apos;from&apos;, or &apos;to&apos;; found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedProduct">
            <summary>
               Looks up a localized string similar to Expected calculation product, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedProgId">
            <summary>
               Looks up a localized string similar to Expected progid, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedRgbNumberOrPercentage">
            <summary>
               Looks up a localized string similar to Expected number or percentage value in rgb function, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedSelector">
            <summary>
               Looks up a localized string similar to Expected selector, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedSemicolon">
            <summary>
               Looks up a localized string similar to Expected semi-colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedSemicolonOrClosingBrace">
            <summary>
               Looks up a localized string similar to Expected semicolon or closing curly-brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedSemicolonOrOpenBrace">
            <summary>
               Looks up a localized string similar to Expected semi-colon or close brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedSum">
            <summary>
               Looks up a localized string similar to Expected calculation sum, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedTerm">
            <summary>
               Looks up a localized string similar to Expected term, found {0}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpectedUnit">
            <summary>
               Looks up a localized string similar to Expected calculation unit, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ExpressionError">
            <summary>
               Looks up a localized string similar to JavaScript error in expression property: {0}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.HackGeneratesInvalidCss">
            <summary>
               Looks up a localized string similar to Browser hack generates invalid CSS.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.HashAfterUnaryNotAllowed">
            <summary>
               Looks up a localized string similar to Hash ({0}) not allowed after unary operator.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.HighSurrogateNoLow">
            <summary>
               Looks up a localized string similar to Unicode high-surrogate value (0x{0:x}) not immediately followed by unicode-escaped low-surrogate value.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.InvalidLowSurrogate">
            <summary>
               Looks up a localized string similar to Unicode high-surrogate value (0x{0:x}) followed by invalid low-surrogate value: 0x{1:x}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.InvalidUnicodeRange">
            <summary>
               Looks up a localized string similar to Invalid Unicode Range Token: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.MediaQueryRequiresSpace">
            <summary>
               Looks up a localized string similar to Media queries require a space between &apos;and&apos; and the opening parenthesis: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ParserSubsystem">
            <summary>
               Looks up a localized string similar to Parser.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.PossibleCharsetError">
            <summary>
               Looks up a localized string similar to Byte-order mark at front of source indicates possible encoding issue..
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.PossibleInvalidClassName">
            <summary>
               Looks up a localized string similar to Possible cross-browser invalid class name: {0}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ProgIdIEOnly">
            <summary>
               Looks up a localized string similar to &apos;progid:&apos; is an IE-only construct that generates invalid CSS.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.ScannerSubsystem">
            <summary>
               Looks up a localized string similar to Scanner.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.TokenAfterUnaryNotAllowed">
            <summary>
               Looks up a localized string similar to Token not allowed after unary operator: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UndeclaredNamespace">
            <summary>
               Looks up a localized string similar to Namespace used but not declared in a @namespace statement: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnderscoreNotValid">
            <summary>
               Looks up a localized string similar to An underscore is not a valid CSS1 or CSS2 identifier character.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedAtKeyword">
            <summary>
               Looks up a localized string similar to Unexpected at-keyword, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedCharset">
            <summary>
               Looks up a localized string similar to @charset must be very first token in file.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedDimension">
            <summary>
               Looks up a localized string similar to Unexpected dimension: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedEndOfFile">
            <summary>
               Looks up a localized string similar to Unexpected end of file encountered.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedEscape">
            <summary>
               Looks up a localized string similar to Unexpected escape sequence: \{0}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedFunction">
            <summary>
               Looks up a localized string similar to Unexpected function; only calc( or attr( allowed here, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedNumberCharacter">
            <summary>
               Looks up a localized string similar to Unexpected number character: {0}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedStringCharacter">
            <summary>
               Looks up a localized string similar to Unexpected string character: {0}.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnexpectedToken">
            <summary>
               Looks up a localized string similar to Unexpected token, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnknownCharacterEncoding">
            <summary>
               Looks up a localized string similar to ?.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnknownError">
            <summary>
               Looks up a localized string similar to Unknown error.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnnecessaryUnits">
            <summary>
               Looks up a localized string similar to Unnecessary units on a value of zero.
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnterminatedComment">
            <summary>
               Looks up a localized string similar to Unterminated comment..
            </summary>
        </member>
        <member name="P:NUglify.Css.CssStrings.UnterminatedString">
            <summary>
               Looks up a localized string similar to Unterminated string: {0}.
            </summary>
        </member>
        <member name="T:NUglify.Css.CssToken">
            <summary>
            Token class represents a parsed token of information consumed by the parser
            </summary>
        </member>
        <member name="T:NUglify.Helpers.StringBuilderPool">
            <summary>
            Static class for caching StringBuilders so we don't have to keep creating/destroying them all the time
            </summary>
        </member>
        <member name="M:NUglify.Helpers.StringBuilderPool.Acquire">
            <summary>
            Acquire a possibly-shared string builder instance
            </summary>
            <returns>an empty string builder instance</returns>
        </member>
        <member name="M:NUglify.Helpers.StringBuilderPool.Acquire(System.Int32)">
            <summary>
            Acquire a tringBuilder object with at least the given capacity. If the capacity
            is less than or equal to our normal capacity, just return something from the pool.
            Otherwise create a new string builder that will just get discarded when released.
            </summary>
            <param name="capacity">minimum capacity</param>
            <returns>StringBuilder object</returns>
        </member>
        <member name="M:NUglify.Helpers.StringBuilderPool.Release(System.Text.StringBuilder)">
            <summary>
            Extension method to add a method to StringBuilders that will release them back into the thread pool
            </summary>
            <param name="builder">StringBuilder instance to add back to the thread pool</param>
        </member>
        <member name="F:NUglify.Html.ElementKind.Opening">
            <summary>
            Emit the opening tag of this element
            </summary>
        </member>
        <member name="F:NUglify.Html.ElementKind.Closing">
            <summary>
            Emit the closing tag of this element
            </summary>
        </member>
        <member name="F:NUglify.Html.ElementKind.SelfClosing">
            <summary>
            Emit a self closing tag of this element (cannot be used with Start or Closing)
            </summary>
        </member>
        <member name="F:NUglify.Html.ElementKind.ProcessingInstruction">
            <summary>
            The XML ? processing instruction
            </summary>
        </member>
        <member name="T:NUglify.Html.EntityHelper">
            <summary>
            Helper class to decode an entity.
            </summary>
        </member>
        <member name="M:NUglify.Html.EntityHelper.Unescape(System.String)">
            <summary>
            Destructively unescape a string: remove HTML entity symbols except for &amp; &gt; &lt;
            </summary>
            <param name="text">The string data that will be changed by unescaping HTML entity symbols.</param>
            <returns></returns>
        </member>
        <member name="M:NUglify.Html.EntityHelper.ScanEntity(System.String,System.Int32,System.Int32,System.String@,System.Int32@)">
            <summary>
            Scans an entity.
            Returns number of chars matched.
            </summary>
        </member>
        <member name="M:NUglify.Html.EntityHelper.DecodeEntity(System.String)">
            <summary>
            Decodes the given HTML entity to the matching Unicode characters.
            </summary>
            <param name="entity">The entity without <c>&amp;</c> and <c>;</c> symbols, for example, <c>copy</c>.</param>
            <returns>The unicode character set or <c>null</c> if the entity was not recognized.</returns>
        </member>
        <member name="M:NUglify.Html.EntityHelper.DecodeEntity(System.Int32)">
            <summary>
            Decodes the given UTF-32 character code to the matching set of UTF-16 characters.
            </summary>
            <returns>The unicode character set or <c>null</c> if the entity was not recognized.</returns>
        </member>
        <member name="F:NUglify.Html.EntityHelper.EntityMap">
            <summary>
            Source: http://www.w3.org/html/wg/drafts/html/master/syntax.html#named-character-references
            </summary>
        </member>
        <member name="T:NUglify.Html.HtmlAttribute">
            <summary>
            A HTML attribute.
            </summary>
        </member>
        <member name="T:NUglify.Html.HtmlCDATA">
            <summary>
            A HTML CDATA block
            </summary>
            <seealso cref="T:NUglify.Html.HtmlTextBase" />
        </member>
        <member name="T:NUglify.Html.HtmlComment">
            <summary>
            A HTML comment node.
            </summary>
            <seealso cref="T:NUglify.Html.HtmlTextBase" />
        </member>
        <member name="T:NUglify.Html.HtmlDOCTYPE">
            <summary>
            A DOCTYPE HTML tag.
            </summary>
            <seealso cref="T:NUglify.Html.HtmlTextBase" />
        </member>
        <member name="T:NUglify.Html.HtmlDocument">
            <summary>
            A root document element.
            </summary>
            <seealso cref="T:NUglify.Html.HtmlElement" />
        </member>
        <member name="M:NUglify.Html.HtmlDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUglify.Html.HtmlDocument"/> class.
            </summary>
        </member>
        <member name="T:NUglify.Html.HtmlElement">
            <summary>
            A HTML/XML open/close/self-closing tag.
            </summary>
            <seealso cref="T:NUglify.Html.HtmlNode" />
        </member>
        <member name="T:NUglify.Html.HtmlNode">
            <summary>
            Base class for a minimalistic HTML DOM suitable for removing text or extracting text.
            </summary>
        </member>
        <member name="T:NUglify.Html.HtmlParser">
            <summary>
            Simplified HTML5 Parser that should handle tag omission correctly (e.g: p, li...etc.)
            </summary>
        </member>
        <member name="M:NUglify.Html.HtmlParser.#ctor(System.String,System.String,NUglify.Html.HtmlSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:NUglify.Html.HtmlParser"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:NUglify.Html.HtmlSettings">
            <summary>
            Settings for Html minification.
            </summary>
        </member>
        <member name="M:NUglify.Html.HtmlSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUglify.Html.HtmlSettings"/> class.
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.AttributesCaseSensitive">
            <summary>
            Gets or sets a value indicating whether to treat attributes as case sensitive. Default is <c>false</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.CollapseWhitespaces">
            <summary>
            Gets or sets a value indicating whether to collapse whitespaces. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.RemoveComments">
            <summary>
            Gets or sets a value indicating whether to remove comments. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.RemoveOptionalTags">
            <summary>
            Gets or sets a value indicating whether to remove optional tags (e.g: &lt;/p&gt; or &lt;/li&gt;). Default is <c>true</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.RemoveInvalidClosingTags">
            <summary>
            Gets or sets a value indicating whether to remove invalid closing tags (tags with only a end tag and a missing start tag)
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.RemoveEmptyAttributes">
            <summary>
            Gets or sets a value indicating whether to remove empty attributes with whitespace only characters.
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.RemoveQuotedAttributes">
            <summary>
            Gets or sets a value indicating whether to remove quoted attributes when possible. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.DecodeEntityCharacters">
            <summary>
            Gets or sets a value indicating whether to decode entity characters to their shorter character equivalents. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.AttributeQuoteChar">
            <summary>
            Gets or sets the quote character used for attribute values. Default is null, meaning that it will let the minifier decide which is best. Default is <c>null</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.RemoveScriptStyleTypeAttribute">
            <summary>
            Gets or sets a value indicating whether to remove script/style type attribute. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.ShortBooleanAttribute">
            <summary>
            Gets or sets a value indicating whether to use the short version of a boolean attribute if value is true. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.IsFragmentOnly">
            <summary>
            Gets or sets a value indicating whether the parsing is occuring on an HTML fragment to avoid creating missing tags (like html, body, head). Default is <c>false</c>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.MinifyJs">
            <summary>
            Gets or sets a value indicating whether minify js inside &lt;script&gt; tags. Default is <c>true</c> using <see cref="M:NUglify.Uglify.Js(System.String,NUglify.JavaScript.CodeSettings)"/>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.JsSettings">
            <summary>
            Gets or sets the minify js settings.
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.MinifyCss">
            <summary>
            Gets or sets a value indicating whether minify css inside &lt;style&gt; tags. Default is <c>true</c> using <see cref="M:NUglify.Uglify.Css(System.String,NUglify.Css.CssSettings,NUglify.JavaScript.CodeSettings)"/>
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.MinifyCssAttributes">
            <summary>
            Gets or sets a value indicating whether minify css inside style attribute.
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.CssSettings">
            <summary>
            Gets or sets the minify css settings.
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.PrettyPrint">
            <summary>
            Gets or sets a value indicating whether to output an indented html (for debug).
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.RemoveJavaScript">
            <summary>
            Gets or sets a value indicating whether to remove any JavaScript code (in script tag or in html attributes)
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.InlineTagsPreservingSpacesAround">
            <summary>
            Gets the inline tags preserving spaces around (default: a, abbr, acronym, b, bdi, 
            bdo, big, button, cite, code, del, dfn, em, font, i, ins, kbd, label, 
            mark, math, nobr, q, rp, rt, s, samp, small, span, strike, strong, sub, sup, 
            svg, time, tt, u, var)
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.KeepOneSpaceWhenCollapsing">
            <summary>
            Gets or sets a value indicating whether to keep one space when collapsing.
            </summary>
            <value><c>true</c> to keep one space when collapsing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.TagsWithNonCollapsableWhitespaces">
            <summary>
            Gets the tags with non collapsable whitespaces (default: pre, textarea)
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.KeepCommentsRegex">
            <summary>
            Gets a list of regex that will be matched against a HTML comment content. If a regex matches a HTML comment content, the comment will be kept
            </summary>
        </member>
        <member name="P:NUglify.Html.HtmlSettings.KeepTags">
            <summary>
            Gets the list of tags that will be kept even if they have an optional start/end tag.
            </summary>
        </member>
        <member name="M:NUglify.Html.HtmlSettings.Pretty">
            <summary>
            returns settings to output a pretty HTML
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUglify.Html.HtmlTagDescriptor.CanOmitDelegate">
            <summary>
            A delegate to check whether a end tag can be omitted.
            </summary>
            <param name="tag">The tag for which we want to test if a end tag can be omitted.</param>
            <param name="nextSibling">The next sibling or null if it is the last tag of its parent.</param>
            <returns><c>true</c> if the end tag can be omitted; <c>false</c> otherwise</returns>
        </member>
        <member name="T:NUglify.Html.HtmlText">
            <summary>
            An HTML text node
            </summary>
            <seealso cref="T:NUglify.Html.HtmlTextBase" />
        </member>
        <member name="T:NUglify.Html.HtmlTextBase">
            <summary>
            HTML base class for text nodes.
            </summary>
            <seealso cref="T:NUglify.Html.HtmlNode" />
        </member>
        <member name="T:NUglify.Html.HtmlRaw">
            <summary>
            HTML raw content.
            </summary>
            <seealso cref="T:NUglify.Html.HtmlNode" />
        </member>
        <member name="T:NUglify.Html.HtmlToTextOptions">
            <summary>
            Settings for extracting text from an HTML document using the <see cref="M:NUglify.Uglify.HtmlToText(System.String,NUglify.Html.HtmlToTextOptions,System.String)"/> function.
            </summary>
        </member>
        <member name="F:NUglify.Html.HtmlToTextOptions.None">
            <summary>
            The extracted text will not contain structure (newlines), formatting (HTML tags) or Html escape (&amp;amp; for &amp;, &amp;lt; for &lt;)
            </summary>
        </member>
        <member name="F:NUglify.Html.HtmlToTextOptions.KeepStructure">
            <summary>
            Keeps the structure of the document by emitting newline when necessary
            </summary>
        </member>
        <member name="F:NUglify.Html.HtmlToTextOptions.KeepFormatting">
            <summary>
            Keeps HTML formatting tags (e.g &lt;em&gt;)
            </summary>
        </member>
        <member name="F:NUglify.Html.HtmlToTextOptions.KeepHtmlEscape">
            <summary>
            Keeps HTML escape for special characters (&amp;amp; for &amp;, &amp;lt; for &lt;)
            </summary>
        </member>
        <member name="T:NUglify.Html.HtmlWriterToText">
            <summary>
            Class responsible from extracting only text nodes from an HTML document, used by <see cref="M:NUglify.Uglify.HtmlToText(System.String,NUglify.Html.HtmlToTextOptions,System.String)"/> function.
            </summary>
        </member>
        <member name="M:NUglify.Html.HtmlWriterToText.#ctor(System.IO.TextWriter,NUglify.Html.HtmlToTextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:NUglify.Html.HtmlWriterToText"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="options">The options.</param>
            <exception cref="T:System.ArgumentNullException">if writer is null</exception>
        </member>
        <member name="T:NUglify.Html.SourceLocation">
            <summary>
            Location of a text in a HTML source file.
            </summary>
        </member>
        <member name="M:NUglify.Html.SourceLocation.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUglify.Html.SourceLocation"/> struct.
            </summary>
            <param name="file">The file.</param>
            <param name="position">The position.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
        </member>
        <member name="F:NUglify.Html.SourceLocation.File">
            <summary>
            The source file name (may be null)
            </summary>
        </member>
        <member name="F:NUglify.Html.SourceLocation.Position">
            <summary>
            The absolute position from the begining of the file
            </summary>
        </member>
        <member name="F:NUglify.Html.SourceLocation.Line">
            <summary>
            The line position (start at 1)
            </summary>
        </member>
        <member name="F:NUglify.Html.SourceLocation.Column">
            <summary>
            The character position (start at 1) (warning, does not count tabs)
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.LocalRenaming">
            <summary>
            Settings for how local variables and functions can be renamed
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.LocalRenaming.KeepAll">
            <summary>
            Keep all names; don't rename anything
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.LocalRenaming.KeepLocalizationVars">
            <summary>
            Rename all local variables and functions that do not begin with "L_"
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.LocalRenaming.CrunchAll">
            <summary>
            Rename all local variables and functions. (default)
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.EvalTreatment">
            <summary>
            Settings for how to treat eval statements
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.EvalTreatment.Ignore">
            <summary>
            Ignore all eval statements (default). This assumes that code that is eval'd will not attempt
            to access any local variables or functions, as those variables and function may be renamed.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.EvalTreatment.MakeImmediateSafe">
            <summary>
            Assume any code that is eval'd will attempt to access local variables and functions declared
            in the same scope as the eval statement. This will turn off local variable and function renaming
            in any scope that contains an eval statement.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.EvalTreatment.MakeAllSafe">
            <summary>
            Assume that any local variable or function in any accessible scope chain may be referenced by 
            code that is eval'd. This will turn off local variable and function renaming for all scopes that
            contain an eval statement, and all their parent scopes up the chain to the global scope.
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.JavaScriptSourceMode">
            <summary>
            Enum describing the type of input expected
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.JavaScriptSourceMode.Program">
            <summary>Default input mode: a program, a block of top-level global statements</summary>
        </member>
        <member name="F:NUglify.JavaScript.JavaScriptSourceMode.Expression">
            <summary>Input is a single JavaScript Expression</summary>
        </member>
        <member name="F:NUglify.JavaScript.JavaScriptSourceMode.EventHandler">
            <summary>Input is an implicit function block, as in the value of an HTML onclick attribute</summary>
        </member>
        <member name="F:NUglify.JavaScript.JavaScriptSourceMode.Module">
            <summary>Input is an implicit module block, as referenced by an import statement</summary>
        </member>
        <member name="T:NUglify.JavaScript.JavaScriptFormat">
            <summary>
            Enum describing how to treat the output JavaScript
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.JavaScriptFormat.Normal">
            <summary>normal JavaScript code</summary>
        </member>
        <member name="F:NUglify.JavaScript.JavaScriptFormat.JSON">
            <summary>JSON code</summary>
        </member>
        <member name="T:NUglify.JavaScript.CodeSettings">
            <summary>
            Object used to store code settings for JavaScript parsing, minification, and output
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.#ctor">
            <summary>
            Instantiate a CodeSettings object with the default settings
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.Clone">
            <summary>
            Instantiate a new CodeSettings object with the same settings as the current object.
            </summary>
            <returns>a copy CodeSettings object</returns>
        </member>
        <member name="F:NUglify.JavaScript.CodeSettings.m_identifierReplacementMap">
            <summary>
            dictionary of identifiers we want to manually rename
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.AddRenamePair(System.String,System.String)">
            <summary>
            Add a rename pair to the identifier rename map
            </summary>
            <param name="sourceName">name of the identifier in the source code</param>
            <param name="newName">new name with which to replace the source name</param>
            <returns>true if added; false if either name is not a valid JavaScript identifier</returns>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.ClearRenamePairs">
            <summary>
            Clear any rename pairs from the identifier rename map
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.HasRenamePairs">
            <summary>
            returns whether or not there are any rename pairs in this settings object
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.GetNewName(System.String)">
            <summary>
            Given a source identifier, return a new name for it, if one has already been added
            </summary>
            <param name="sourceName">source name to check</param>
            <returns>new name if it exists, null otherwise</returns>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.RenamePairs">
            <summary>
            Gets or sets a string representation of all the indentifier replacements as a comma-separated
            list of "source=target" identifiers.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.SetNoAutoRenames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            sets the collection of known global names to the enumeration of strings passed to this method
            </summary>
            <param name="globalArray">array of known global names</param>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.NoAutoRenameList">
            <summary>
            Get or sets the no-automatic-renaming list as a single string of comma-separated identifiers
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.KnownGlobalCollection">
            <summary>
            Gets the known global name collection
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.SetKnownGlobalIdentifiers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            sets the collection of known global names to the array of string passed to this method
            </summary>
            <param name="globalArray">collection of known global names</param>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.AddKnownGlobal(System.String)">
            <summary>
            Add a known global identifier to the list
            </summary>
            <param name="identifier">global identifier</param>
            <returns>true if valid identifier; false if invalid identifier</returns>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.KnownGlobalNamesList">
            <summary>
            Gets or sets the known global names list as a single comma-separated string
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.DebugLookupCollection">
            <summary>
            Gets the set of debug lookups
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.SetDebugNamespaces(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the collection of debug "lookup" identifiers
            </summary>
            <param name="definedNames">collection of debug lookup identifier strings</param>
            <returns>number of names successfully added to the collection</returns>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.DebugLookupList">
            <summary>
            string representation of the list of debug lookups, comma-separated
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.AlwaysEscapeNonAscii">
            <summary>
            Gets or sets a flag indicating whether to always escape non-ASCII characters as \uXXXX
            or to let the output encoding object handle that via the JsEncoderFallback object for the
            specified output encoding format. Default is false (let the Encoding object handle it).
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.AmdSupport">
            <summary>
            Gets or sets a value indicating whether to perform extra tasks on AMD-style defines.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.CollapseToLiteral">
            <summary>
            collapse new Array() to [] and new Object() to {} [true]
            or leave ais [false]. Default is true.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.ConstStatementsMozilla">
            <summary>
            Gets or sets a boolean value indicating whether to use old-style const statements (just var-statements that
            define unchangeable fields) or new EcmaScript 6 lexical declarations.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.ErrorIfNotInlineSafe">
            <summary>
            Throw an error if a source string is not safe for inclusion 
            in an HTML inline script block. Default is false.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.EvalLiteralExpressions">
            <summary>
            Evaluate expressions containing only literal bool, string, numeric, or null values [true]
            Leave literal expressions alone and do not evaluate them [false]. Default is true.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.EvalTreatment">
            <summary>
            Gets or sets a settings value indicating how "safe" eval-statements are to be assumed.
            Ignore (default) means we can assume eval-statements will not reference any local variables and functions.
            MakeImmediateSafe assumes eval-statements will reference local variables and function within the same scope.
            MakeAllSafe assumes eval-statements will reference any accessible local variable or function.
            Local variables that we assume may be referenced by eval-statements cannot be automatically renamed.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.Format">
            <summary>
            Gets or sets the format to use for the JavaScript processing.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.IgnoreConditionalCompilation">
            <summary>
            Gets or sets a boolean value indicating whether or not to ignore conditional-compilation comment syntax (true) or
            to try to retain the comments in the output (false; default)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.IgnorePreprocessorDefines">
            <summary>
            Gets or sets a boolean value indicating whether or not to ignore preprocessor defines comment syntax (true) or
            to evaluate them (false; default)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.InlineSafeStrings">
            <summary>
            Gets or sets a boolean value indicating whether to break up string literals containing &lt;/script&gt; so inline code won't break [true, default]
            or to leave string literals as-is [false]
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.LocalRenaming">
            <summary>
            Gets or sets a boolean value indicating whether/how local variables and functions should be automatically renamed:
            KeepAll - do not rename local variables and functions; 
            CrunchAll - rename all local variables and functions to shorter names; 
            KeepLocalizationVars - rename all local variables and functions that do NOT start with L_
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.MacSafariQuirks">
            <summary>
            Gets or sets a boolean value indicating whether to add characters to the output to make sure Mac Safari bugs are not generated [true, default], or to
            disregard potential known Mac Safari bugs in older versions [false]
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.MinifyCode">
            <summary>
            Gets or sets a boolean value indicating whether any operations are to be applied to the parsed tree [true, default],
            or whether to return it as-is [false]. 
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.ManualRenamesProperties">
            <summary>
            Gets or sets a boolean value indicating whether object property names with the specified "from" names will
            get renamed to the corresponding "to" names (true, default) when using the manual-rename feature, or left alone (false)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.PreprocessOnly">
            <summary>
            Gets or sets a boolean value indicating whether or not the input files should be preprocessed only (default is false)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.PreserveFunctionNames">
            <summary>
            Gets or sets a value indicating whether all function names must be preserved and remain as-named (true),
            or can be automatically renamed (false, default).
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.PreserveImportantComments">
            <summary>
            Gets or sets a value indicating whether to preserve important comments in the output.
            Default is true, preserving important comments. Important comments have an exclamation
            mark as the very first in-comment character (//! or /*!).
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.QuoteObjectLiteralProperties">
            <summary>
            Gets or sets a value indicating whether to always quote object literal property names.
            Default is false.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.ReorderScopeDeclarations">
            <summary>
            Gets or sets a value indicating whether or not to reorder function and variable
            declarations within scopes (true, default), or to leave the order as specified in 
            the original source.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.RemoveFunctionExpressionNames">
            <summary>
            Gets or sets a value indicating whether or not to remove unreferenced function expression names (true, default)
            or to leave the names of function expressions, even if they are unreferenced (false).
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.RemoveUnneededCode">
            <summary>
            Gets or sets a boolean value indicating whether to remove unneeded code, such as uncalled local functions or unreachable code [true, default], 
            or to keep such code in the output [false].
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.ScriptVersion">
            <summary>
            Gets or sets an enumeration that gives the parser a hint as to which version of EcmaScript standards to parse the source as.
            See <see cref="P:NUglify.JavaScript.JSParser.ParsedVersion"/> after parsing for which version the parser thought it had based on features found in the script.
            Messages/warnings, and optimized output may change based on this settings value.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.SourceMode">
            <summary>
            Gets or sets the source mode
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.StrictMode">
            <summary>
            Gets or sets a boolean value indicating whether or not to force the input code into strict mode (true)
            or rely on the sources to turn on strict mode via the "use strict" prologue directive (false, default).
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.StripDebugStatements">
            <summary>
            Gets or sets a boolean value indicating whether to strip debug statements [true, default],
            or leave debug statements in the output [false]
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.CodeSettings.SymbolsMap">
            <summary>
            Gets or sets the <see cref="T:NUglify.JavaScript.ISourceMap"/> instance. Default is null, which won't output a symbol map.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CodeSettings.IsModificationAllowed(NUglify.JavaScript.TreeModifications)">
            <summary>
            Determine whether a particular AST tree modification is allowed, or has
            been squelched (regardless of any other settings)
            </summary>
            <param name="modification">one or more tree modification settings</param>
            <returns>true only if NONE of the passed modifications have their kill bits set</returns>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.None">
            <summary>
            Default. No specific tree modification
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.PreserveImportantComments">
            <summary>
            Preserve "important" comments in output: /*! ... */
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.BracketMemberToDotMember">
            <summary>
            Replace a member-bracket call with a member-dot construct if the member
            name is a string literal that can be an identifier.
            A["B"] ==&gt; A.B
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.NewObjectToObjectLiteral">
            <summary>
            Replace a new Object constructor call with an object literal
            new Object() ==&gt; {}
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.NewArrayToArrayLiteral">
            <summary>
            Change Array constructor calls with array literals.
            Does not replace constructors called with a single numeric parameter
            (could be a capacity contructor call).
            new Array() ==&gt; []
            new Array(A,B,C) ==&gt; [A,B,C]
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveEmptyDefaultCase">
            <summary>
            Remove the default case in a switch statement if the block contains
            only a break statement.
            remove default:break;
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveEmptyCaseWhenNoDefault">
            <summary>
            If there is no default case, remove any case statements that contain
            only a single break statement.
            remove case A:break;
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveBreakFromLastCaseBlock">
            <summary>
            Remove the break statement from the last case block of a switch statement.
            switch(A){case B: C;break;} ==&gt; switch(A){case B:C;}
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveEmptyFinally">
            <summary>
            Remove an empty finally statement if there is a non-empty catch block.
            try{...}catch(E){...}finally{} ==&gt; try{...}catch(E){...}
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveDuplicateVar">
            <summary>
            Remove duplicate var declarations in a var statement that have no initializers.
            var A,A=B  ==&gt;  var A=B
            var A=B,A  ==&gt;  var A=B
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.CombineVarStatements">
            <summary>
            Combine adjacent var statements.
            var A;var B  ==&gt;  var A,B
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.MoveVarIntoFor">
            <summary>
            Move preceeding var statement into the initializer of the for statement.
            var A;for(var B;;);  ==&gt;  for(var A,B;;);
            var A;for(;;)  ==&gt; for(var A;;)
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.VarInitializeReturnToReturnInitializer">
            <summary>
            Combine adjacent var statement and return statement to a single return statement
            var A=B;return A  ==&gt; return B
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.IfEmptyToExpression">
            <summary>
            Replace an if-statement that has empty true and false branches with just the 
            condition expression.
            if(A);else;  ==&gt; A;
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.IfConditionCallToConditionAndCall">
            <summary>
            replace if-statement that only has a single call statement in the true branch
            with a logical-and statement
            if(A)B() ==&gt; A&amp;&amp;B()
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.IfElseReturnToReturnConditional">
            <summary>
            Replace an if-else-statement where both branches are only a single return
            statement with a single return statement and a conditional operator.
            if(A)return B;else return C  ==&gt;  return A?B:C 
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.IfConditionReturnToCondition">
            <summary>
            If a function ends in an if-statement that only has a true-branch containing
            a single return statement with no operand, replace the if-statement with just
            the condition expression.
            function A(...){...;if(B)return}  ==&gt; function A(...){...;B}
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.IfConditionFalseToIfNotConditionTrue">
            <summary>
            If the true-block of an if-statment is empty and the else-block is not,
            negate the condition and move the else-block to the true-block.
            if(A);else B  ==&gt;  if(!A)B
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.CombineAdjacentStringLiterals">
            <summary>
            Combine adjacent string literals.
            "A"+"B"  ==&gt; "AB"
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveUnaryPlusOnNumericLiteral">
            <summary>
            Remove unary-plus operators when the operand is a numeric literal
            +123  ==&gt;  123
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.ApplyUnaryMinusToNumericLiteral">
            <summary>
            Apply (and cascade) unary-minus operators to the value of a numeric literal
            -(4)  ==&gt;  -4   (unary minus applied to a numeric 4 ==&gt; numeric -4)
            -(-4)  ==&gt;  4   (same as above, but cascading)
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.MinifyStringLiterals">
            <summary>
            Apply minification technics to string literals
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.MinifyNumericLiterals">
            <summary>
            Apply minification techniques to numeric literals
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveUnusedParameters">
            <summary>
            Remove unused function parameters
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.StripDebugStatements">
            <summary>
            remove "debug" statements
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.LocalRenaming">
            <summary>
            Rename local variables and functions
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveFunctionExpressionNames">
            <summary>
            Remove unused function expression names
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveUnnecessaryLabels">
            <summary>
            Remove unnecessary labels from break or continue statements
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveUnnecessaryCCOnStatements">
            <summary>
            Remove unnecessary @cc_on statements
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.DateGetTimeToUnaryPlus">
            <summary>
            Convert (new Date()).getTime() to +new Date
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.EvaluateNumericExpressions">
            <summary>
            Evaluate numeric literal expressions.
            1 + 2  ==&gt; 3
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.SimplifyStringToNumericConversion">
            <summary>
            Simplify a common method on converting string to numeric: 
            lookup - 0  ==&gt; +lookup
            (Subtracting zero converts lookup to number, then doesn't modify
            it; unary plus also converts operand to numeric)
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.PropertyRenaming">
            <summary>
            Rename properties in object literals, member-dot, and member-bracket operations
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveQuotesFromObjectLiteralNames">
            <summary>
            Remove the quotes arounf objectl literal property names when
            the names are valid identifiers.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.BooleanLiteralsToNotOperators">
            <summary>
            Change boolean literals to not operators.
            true  -> !0
            false -> !1
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.IfExpressionsToExpression">
            <summary>
            Change if-statements with expression statements as their branches to expressions
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.CombineAdjacentExpressionStatements">
            <summary>
            Combine adjacent expression statements into a single expression statement
            using the comma operator
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.ReduceStrictOperatorIfTypesAreSame">
            <summary>
            If the types of both sides of a strict operator (=== or !==) are known
            to be the same, we can reduce the operators to == or !=
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.ReduceStrictOperatorIfTypesAreDifferent">
            <summary>
            If the types of both sides of a strict operator (=== or !==) are known
            to be different, than we can reduct the binary operator to false or true (respectively)
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.MoveFunctionToTopOfScope">
            <summary>
            Move function declarations to the top of the containing scope
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.CombineVarStatementsToTopOfScope">
            <summary>
            Combine var statements at the top of the containing scope
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.IfNotTrueFalseToIfFalseTrue">
            <summary>
            If the condition of an if-statement or conditional starts with a not-operator,
            get rid of the not-operator and swap the true/false branches.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.MoveInExpressionsIntoForStatement">
            <summary>
            Whether it's okay to move an expression containing an in-operator into a for-statement.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.InvertIfReturn">
            <summary>
            Whether it's okay to convert function...{...if(cond)return;s1;s2} to function...{...if(!cond){s1;s2}}
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.CombineNestedIfs">
            <summary>
            Whether it's okay to combine nested if-statments if(cond1)if(cond2){...} to if(cond1&amp;&amp;cond2){...}
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.CombineEquivalentIfReturns">
            <summary>
            Whether it's okay to combine equivalent if-statments that return the same expression.
            if(cond1)return expr;if(cond2)return expr; =&gt; if(cond1||cond2)return expr;
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.ChangeWhileToFor">
            <summary>
            Whether to convert certain while-statements to for-statements.
            while(1)... => for(;;)...
            var ...;while(1)... => for(var ...;;)
            var ...;while(cond)... => for(var ...;cond;)...
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.InvertIfContinue">
            <summary>
            Whether to invert iterator{if(cond)continue;st1;st2} to iterator{if(!cond){st1;st2}}
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.EvaluateLiteralJoins">
            <summary>
            Whether to convert [a,b,c].join(s) to "asbsc" if all items are constants.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveUnusedVariables">
            <summary>
            Whether we should remove unused variable, or variables assigned a constant in their
            initializer and referenced only once.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.UnfoldCommaExpressionStatements">
            <summary>
            Whether we should unfold comma-separated expressions statements into separate statements
            as a final minification step (if it doesn't create more bytes)
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.EvaluateLiteralLengths">
            <summary>
            Whether to convert [a,b,c].length to 3 (if all items are constants)
            and "123".length to 3 
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.RemoveWindowDotFromTypeOf">
            <summary>
            Whether to remove the "window." portion of a typeof operand
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.TreeModifications.CultureInfoTokenReplacement">
            <summary>
            Whether to perform CultureInfo.CurrentCulture replacements on stand-alone and full-string tokens
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.CrunchEnumerator.GenerateNameFromNumber(System.Int32)">
            <summary>
            get the algorithmically-generated minified variable name based on the given number
            zero is the first name, 1 is the next, etc. This method needs to be tuned to
            get better gzip results.
            </summary>
            <param name="index">integer position of the name to retrieve</param>
            <returns>minified variable name</returns>
        </member>
        <member name="T:NUglify.JavaScript.ReferenceComparer">
            <summary>
            this class is used to sort the crunchable local fields in a scope so that the fields
            most in need of crunching get crunched first, therefore having the smallest-length
            crunched variable name.
            Highest priority are the fields most-often referenced.
            Among fields with the same reference count, the longest fields get priority.
            Lastly, alphabetize.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.ReferenceComparer.Compare(NUglify.JavaScript.JSVariableField,NUglify.JavaScript.JSVariableField)">
            <summary>
            sorting method for fields that will be renamed in the minification process.
            The order of the fields determines which minified name it will receive --
            the earlier in the list, typically the smaller, more-common the minified name.
            Tune this method to get better gzip results.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:NUglify.JavaScript.DocumentContext.#ctor(System.String)">
            <summary>
            Create a new document context from the given source
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:NUglify.JavaScript.IRenameable.OriginalName">
            <summary>Gets the original name of the item, before renaming</summary>
        </member>
        <member name="P:NUglify.JavaScript.IRenameable.WasRenamed">
            <summary>Gets whether or not the item was renamed.</summary>
        </member>
        <member name="T:NUglify.JavaScript.JScript">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.AmbiguousCatchVar">
            <summary>
               Looks up a localized string similar to Ambiguous catch identifier. Cross-browser behavior difference. .
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.AmbiguousNamedFunctionExpression">
            <summary>
               Looks up a localized string similar to Ambiguous reference to named function expression. Cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ApplicationError">
            <summary>
               Looks up a localized string similar to Application failed. Please report this issue..
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ArgumentNotReferenced">
            <summary>
               Looks up a localized string similar to Argument defined but not referenced.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ArrayLiteralTrailingComma">
            <summary>
               Looks up a localized string similar to Trailing comma in array literal; cross-browser difference.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ArrowCannotBeConstructor">
            <summary>
               Looks up a localized string similar to Arrow functions cannot be constructors.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.AssignmentToConstant">
            <summary>
               Looks up a localized string similar to Assignment to constant.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BadBindingSyntax">
            <summary>
               Looks up a localized string similar to Invalid binding syntax.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BadBreak">
            <summary>
               Looks up a localized string similar to Can&apos;t have &apos;break&apos; outside of loop.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BadContinue">
            <summary>
               Looks up a localized string similar to Can&apos;t have &apos;continue&apos; outside of loop.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BadHexEscapeSequence">
            <summary>
               Looks up a localized string similar to Invalid hexadecimal escape sequence.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BadLabel">
            <summary>
               Looks up a localized string similar to Label redefined.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BadNumericLiteral">
            <summary>
               Looks up a localized string similar to Invalid numeric literal.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BadReturn">
            <summary>
               Looks up a localized string similar to &apos;return&apos; statement outside of function.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BadSwitch">
            <summary>
               Looks up a localized string similar to Missing &apos;case&apos; or &apos;default&apos; statement.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.BindingPatternRequiresInitializer">
            <summary>
               Looks up a localized string similar to Binding pattern requires initializer.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.CCInvalidElse">
            <summary>
               Looks up a localized string similar to Unmatched &apos;@else&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.CCInvalidElseIf">
            <summary>
               Looks up a localized string similar to Unmatched &apos;@elif&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.CCInvalidEnd">
            <summary>
               Looks up a localized string similar to Unmatched &apos;@end&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.CCOff">
            <summary>
               Looks up a localized string similar to Conditional compilation is turned off.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ClassElementExpected">
            <summary>
               Looks up a localized string similar to Expected class element.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ConditionalCompilationTooComplex">
            <summary>
               Looks up a localized string similar to Conditional compilation expression not supported. Comment ignored.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.DupDefault">
            <summary>
               Looks up a localized string similar to &apos;default&apos; can only appear once in a &apos;switch&apos; statement.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.DuplicateCatch">
            <summary>
               Looks up a localized string similar to Variable or function declaration redefines the catch error name.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.DuplicateClassElementName">
            <summary>
               Looks up a localized string similar to Duplicate class element name.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.DuplicateConstantDeclaration">
            <summary>
               Looks up a localized string similar to Constant declaration already declared.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.DuplicateLexicalDeclaration">
            <summary>
               Looks up a localized string similar to Duplicate lexical declaration; cannot redefine let or const variables.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.DuplicateModuleDeclaration">
            <summary>
               Looks up a localized string similar to Duplicate module declaration.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.DuplicateName">
            <summary>
               Looks up a localized string similar to Name is already defined.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ErrorEndOfFile">
            <summary>
               Looks up a localized string similar to Expecting more source characters.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ExportNotAtModuleLevel">
            <summary>
               Looks up a localized string similar to Export statements must be at top level of module.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ExpressionExpected">
            <summary>
               Looks up a localized string similar to Expected expression.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.FunctionExpressionExpected">
            <summary>
               Looks up a localized string similar to Function expression expected.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.FunctionNameMustBeIdentifier">
            <summary>
               Looks up a localized string similar to Function name should be a simple identifier; possible browser-specific implementation.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.FunctionNotReferenced">
            <summary>
               Looks up a localized string similar to Function defined but not referenced.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.HighSurrogate">
            <summary>
               Looks up a localized string similar to High-surrogate pair value not followed by low-surrogate value.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.IllegalAssignment">
            <summary>
               Looks up a localized string similar to Illegal assignment.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.IllegalChar">
            <summary>
               Looks up a localized string similar to Invalid character.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ImplicitPropertyNameMustBeIdentifier">
            <summary>
               Looks up a localized string similar to Implicit property name must be identifier.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ImportNoModuleName">
            <summary>
               Looks up a localized string similar to Import statement must include module name.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.InvalidElse">
            <summary>
               Looks up a localized string similar to Unmatched &apos;else&apos;; no &apos;if&apos; defined.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.JSParserException">
            <summary>
               Looks up a localized string similar to JSParser Exception.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.KeywordUsedAsIdentifier">
            <summary>
               Looks up a localized string similar to Reserved words and should not be used as an identifier; cross-browser differences.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.LowSurrogate">
            <summary>
               Looks up a localized string similar to Low-surrogate pair value not following a high-surrogate value.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.MethodsNotAllowedInBindings">
            <summary>
               Looks up a localized string similar to Methods not allowed in object literal bindings.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.MisplacedFunctionDeclaration">
            <summary>
               Looks up a localized string similar to Function declaration should not be inside a statement. Cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.MultipleDefaultExports">
            <summary>
               Looks up a localized string similar to Multiple default exports.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NewLineNotAllowed">
            <summary>
               Looks up a localized string similar to New line not allowed.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoBinding">
            <summary>
               Looks up a localized string similar to Expected binding syntax.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoCatch">
            <summary>
               Looks up a localized string similar to Expected &apos;catch&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoCCEnd">
            <summary>
               Looks up a localized string similar to Expected &apos;@end&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoColon">
            <summary>
               Looks up a localized string similar to Expected &apos;:&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoComma">
            <summary>
               Looks up a localized string similar to Expected &apos;,&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoCommentEnd">
            <summary>
               Looks up a localized string similar to Unterminated comment.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoDefaultModuleExport">
            <summary>
               Looks up a localized string similar to Imported module has no default export.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoEndDebugDirective">
            <summary>
               Looks up a localized string similar to Expected ///#ENDDEBUG directive.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoEndIfDirective">
            <summary>
               Looks up a localized string similar to Expected ///#ENDIF directive.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoEqual">
            <summary>
               Looks up a localized string similar to Expected &apos;=&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoExpectedFrom">
            <summary>
               Looks up a localized string similar to Expected &quot;from&quot;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoForOrIf">
            <summary>
               Looks up a localized string similar to Expected &apos;for&apos; or &apos;if&apos; keyword.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoIdentifier">
            <summary>
               Looks up a localized string similar to Expected identifier.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoLabel">
            <summary>
               Looks up a localized string similar to Label not found.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoLeftCurly">
            <summary>
               Looks up a localized string similar to Expected &apos;{&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoLeftParenthesis">
            <summary>
               Looks up a localized string similar to Expected &apos;(&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoMemberIdentifier">
            <summary>
               Looks up a localized string similar to Expected identifier or string.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoModuleExport">
            <summary>
               Looks up a localized string similar to Imported module does not export name.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoRightBracket">
            <summary>
               Looks up a localized string similar to Expected &apos;]&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoRightBracketOrComma">
            <summary>
               Looks up a localized string similar to Expected &apos;,&apos; or &apos;]&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoRightCurly">
            <summary>
               Looks up a localized string similar to Expected &apos;}&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoRightParenthesis">
            <summary>
               Looks up a localized string similar to Expected &apos;)&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoRightParenthesisOrComma">
            <summary>
               Looks up a localized string similar to Expected &apos;,&apos; or &apos;)&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoSemicolon">
            <summary>
               Looks up a localized string similar to Expected &apos;;&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoSource">
            <summary>
               Looks up a localized string similar to No source set on parser.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoSpecifierSet">
            <summary>
               Looks up a localized string similar to Expected specifier set.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoStringLiteral">
            <summary>
               Looks up a localized string similar to Expected string literal.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NoWhile">
            <summary>
               Looks up a localized string similar to Expected &apos;while&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NumericMaximum">
            <summary>
               Looks up a localized string similar to Consider replacing maximum numeric literal with Number.MAX_VALUE.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NumericMinimum">
            <summary>
               Looks up a localized string similar to Consider replacing minimum numeric literal with Number.MIN_VALUE.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.NumericOverflow">
            <summary>
               Looks up a localized string similar to Numeric literal evaluates to Number.POSITIVE_INFINITY or Number.NEGATIVE_INFINITY.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ObjectConstructorTakesNoArguments">
            <summary>
               Looks up a localized string similar to Object constructor should take no arguments.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ObjectLiteralKeyword">
            <summary>
               Looks up a localized string similar to Reserved word used as object literal property name; cross-browser issue..
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.OctalLiteralsDeprecated">
            <summary>
               Looks up a localized string similar to Octal literals are deprecated. Possible cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ParameterListNotLast">
            <summary>
               Looks up a localized string similar to A variable argument list must be the last argument.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.RegExpSyntax">
            <summary>
               Looks up a localized string similar to Syntax error in regular expression.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.ResourceReferenceMustBeConstant">
            <summary>
               Looks up a localized string similar to Resource reference must be single constant argument.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.RestParameterNotLast">
            <summary>
               Looks up a localized string similar to Rest parameter can only be in last position.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.SemicolonInsertion">
            <summary>
               Looks up a localized string similar to Semicolon insertion rules applied.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.SetterMustHaveOneParameter">
            <summary>
               Looks up a localized string similar to Setter methods must have a single formal argument.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.SpecialConstructor">
            <summary>
               Looks up a localized string similar to Class constructor must be normal method.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StatementBlockExpected">
            <summary>
               Looks up a localized string similar to Always use full statement blocks.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StaticPrototype">
            <summary>
               Looks up a localized string similar to Class static method cannot be named &quot;prototype&quot;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictComparisonIsAlwaysTrueOrFalse">
            <summary>
               Looks up a localized string similar to Strict operator always evaluates to true or false.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeArgumentName">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow certain argument names.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeCatchName">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow certain catch binding names.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeDuplicateArgument">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow duplicate argument names.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeDuplicateProperty">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow duplicate property names.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeFunctionName">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow certain function names.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeInvalidAssign">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow assignment to certain variables.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeInvalidDelete">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow certain delete operands.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeInvalidPreOrPost">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow ++ or -- on certain objects.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeNoWith">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow with-statements.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeUndefinedVariable">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow assignment to undefined variables.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StrictModeVariableName">
            <summary>
               Looks up a localized string similar to Strict-mode does not allow certain variable names.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.StringNotInlineSafe">
            <summary>
               Looks up a localized string similar to String literal is not safe for inline.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.SuspectAssignment">
            <summary>
               Looks up a localized string similar to Suspect assignment operator.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.SuspectEquality">
            <summary>
               Looks up a localized string similar to Suspect equality comparison.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.SuspectSemicolon">
            <summary>
               Looks up a localized string similar to Suspect semicolon.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.SyntaxError">
            <summary>
               Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.TooManyTokensSkipped">
            <summary>
               Looks up a localized string similar to Too many errors. The file might not be a JavaScript file.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UnableToConvertFromBinding">
            <summary>
               Looks up a localized string similar to Unable to convert from binding to reference.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UnableToConvertToBinding">
            <summary>
               Looks up a localized string similar to Unable to convert from reference to binding.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UnclosedFunction">
            <summary>
               Looks up a localized string similar to End of file encountered before function is properly closed.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UndeclaredFunction">
            <summary>
               Looks up a localized string similar to Function has not been defined.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UndeclaredVariable">
            <summary>
               Looks up a localized string similar to Variable has not been declared.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UnexpectedSemicolon">
            <summary>
               Looks up a localized string similar to Unexpected &apos;;&apos;.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UnterminatedAspNetBlock">
            <summary>
               Looks up a localized string similar to Unterminated ASP.NET block.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UnterminatedString">
            <summary>
               Looks up a localized string similar to Unterminated string constant.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.UnusedLabel">
            <summary>
               Looks up a localized string similar to Statement label never referenced.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.VariableDefinedNotReferenced">
            <summary>
               Looks up a localized string similar to Variable defined but not referenced.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JScript.WithNotRecommended">
            <summary>
               Looks up a localized string similar to &apos;with&apos; statement not recommended.
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.JsonParser">
            <summary>
            super-simple JSON parser/validator. Exposes a Validate method
            that takes a string and returns NULL if it isn't valid JSON, or
            a string representing the original JSON text with any whitespace
            removed.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.JsonParser.Validate(System.String)">
            <summary>
            Validate the given JSON string
            </summary>
            <param name="jsonText">JSON string to validate</param>
            <returns>null if not valid JSON; otherwise the original JSON text with whitespace removed</returns>
        </member>
        <member name="T:NUglify.JavaScript.JSParser">
            <summary>
            Class used to parse JavaScript source code into an abstract syntax tree.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSParser.EchoWriter">
            <summary>
            Gets or sets a TextWriter instance to which raw preprocessed input will be
            written when Parse is called.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.JSParser.m_timingPoints">
            <summary>
            Gets the array of timing points from a Parse run
            </summary>
        </member>
        <member name="E:NUglify.JavaScript.JSParser.CompilerError">
            <summary>
            Event sent whenever an error or warning is encountered during parsing
            </summary>
        </member>
        <member name="E:NUglify.JavaScript.JSParser.UndefinedReference">
            <summary>
            Sent for undefined references found during parsing
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.#ctor">
            <summary>
            Creates an instance of the JavaScript parser object
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.#ctor(System.String)">
            <summary>
            Creates an instance of the JSParser class that can be used to parse the given source code.
            </summary>
            <param name="source">Source code to parse.</param>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.Parse(NUglify.JavaScript.DocumentContext)">
            <summary>
            Parse the given source context into an abstract syntax tree
            </summary>
            <param name="sourceContext">source code with context</param>
            <returns>a Block object representing the series of statements in abstract syntax tree form</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.Parse(NUglify.JavaScript.DocumentContext,NUglify.JavaScript.CodeSettings)">
            <summary>
            Parse the given source with context into an abstract syntax tree using the given settings
            </summary>
            <param name="sourceContext">source code with context</param>
            <param name="settings">settings to use for the parse operation</param>
            <returns>a Block object representing the series of statements in abstract syntax tree form</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.Parse(System.String)">
            <summary>
            Parse the given source into an abstract syntax tree with no context
            </summary>
            <param name="source">source code with no context</param>
            <returns>a Block object representing the series of statements in abstract syntax tree form</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.Parse(System.String,NUglify.JavaScript.CodeSettings)">
            <summary>
            Parse the given source into an abstract syntax tree using the given settings
            </summary>
            <param name="source">source code to parse</param>
            <param name="settings">settings to use for the parse operation</param>
            <returns>a Block object representing the series of statements in abstract syntax tree form</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.Parse(NUglify.JavaScript.CodeSettings)">
            <summary>
            Parse the source code using the given settings, getting back an abstract syntax tree Block node as the root
            representing the list of statements in the source code.
            </summary>
            <param name="settings">code settings to use to process the source code</param>
            <returns>root Block node representing the top-level statements</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.InternalParse">
            <summary>
            Parse the document source using the scanner and settings that have all been set up already
            through various combinations of constructor/properties/Parse methods.
            </summary>
            <returns>Parsed Block node</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.RemoveDuplicateDefines(NUglify.JavaScript.Syntax.BlockStatement)">
            <summary>
            Remove duplicate define calls, defined as defines with the same module name specified as the first
            parameter, if it's a string literal. Only the last define with a given name is preserved.
            </summary>
            <param name="scriptBlock">script block to remove defines from; not recursed</param>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.SetDocumentContext(NUglify.JavaScript.DocumentContext)">
            <summary>
            set the source by creating a document from the actual source and its context,
            then create and initialize a scanner for that document.
            </summary>
            <param name="source">source code</param>
            <param name="sourceContext">optional context for the source code</param>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.ConvertNumericLiteralToDouble(System.String,System.Boolean,System.Double@)">
            <summary>
            Convert the given numeric string to a double value
            </summary>
            <param name="str">string representation of a number</param>
            <param name="isInteger">we should know alreasdy if it's an integer or not</param>
            <param name="doubleValue">output value</param>
            <returns>true if there were no problems; false if there were</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.ExpectSemicolon(NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Handle the expected semicolon at the current position for the given node.
            </summary>
            <param name="node">node that should end with a semicolon</param>
        </member>
        <member name="M:NUglify.JavaScript.JSParser.ReportError(NUglify.JavaScript.JSError,NUglify.JavaScript.SourceContext,System.Boolean)">
            <summary>
             Generate a parser error.
             The function is told whether or not next call to GetToken() should return the same
             token or not
            </summary>
            <param name="errorId">Error to report</param>
            <param name="skipToken">true to move to the next token when GetNextToken is called; false to stay on this token</param>
            <param name="context">context to report against, or current token if null</param>
            <param name="forceToError">whether to force to an error, or use the default severity</param>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.UsePreprocessorDefines">
            <summary>
            Gets or sets whether to use NUglify preprocessor defines or ignore them
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.IgnoreConditionalCompilation">
            <summary>
            Gets or sets whether to completely ignore IE conditional-compilation comments
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NUglify.JavaScript.JSScanner.AllowEmbeddedAspNetBlocks" -->
        <member name="P:NUglify.JavaScript.JSScanner.StripDebugCommentBlocks">
            <summary>
            Gets or sets whether to strip debug comment blocks entirely
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.SuppressErrors">
            <summary>
            Gets or sets whether to suppress all scanning errors
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.CurrentLine">
            <summary>
            Gets the current line of the input file
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.IsEndOfFile">
            <summary>
            Gets whether we have passed the end of the input source
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.StartLinePosition">
            <summary>
            Gets the position within the source of the start of the current line
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.LiteralHasIssues">
            <summary>
            Gets whether the scanned literal has potential cross-browser issues
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.StringLiteralValue">
            <summary>
            Gets the current decoded string literal value
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.Identifier">
            <summary>
            Gets the current decoded identifier string
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSScanner.CurrentToken">
            <summary>
            Gets the current token reference
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.PeekClone">
            <summary>
            Clone for peek, reuse the same instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.SetPreprocessorDefines(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the list of preprocessor defined names and values
            </summary>
            <param name="defines">dictionary of name/value pairs</param>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.ScanNextToken">
            <summary>
            main method for the scanner; scans the next token from the input stream.
            </summary>
            <returns>next token from the input</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsDigit(System.Char)">
            <summary>
            Returns true if the character is between '0' and '9' inclusive.
            Can't use char.IsDigit because that returns true for decimal digits in other language scripts as well.
            </summary>
            <param name="character">character to test</param>
            <returns>true if in ['0' '1' '2' '3' '4' '5' '6' '7' '8' '9']; false otherwise</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsValidIdentifier(System.String)">
            <summary>
            Determines whether an unescaped string is a valid identifier.
            escape sequences and surrogate pairs are accounted for.
            </summary>
            <param name="name">potential identifier string</param>
            <returns>true if a valid JavaScript identifier; otherwise false</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsValidIdentifierStart(System.String,System.Int32)">
            <summary>
            Determines if the character(s) at the given index is a valid identifier start
            </summary>
            <param name="startIndex">potential identifier string</param>
            <param name="index">index of the starting character</param>
            <returns>true if the character at the given position is a valid identifier start</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsValidIdentifierStart(System.String,System.Int32@)">
            <summary>
            Determines if the character(s) at the given index is a valid identifier start,
            and adjust the index to point to the following character
            </summary>
            <param name="startIndex">potential identifier string</param>
            <param name="index">index of the starting character on entry; index of the NEXT character on exit</param>
            <returns>true if the character at the given position is a valid identifier start</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsValidIdentifierPart(System.String,System.Int32)">
            <summary>
            Determines if the character(s) at the given index is a valid identifier part
            </summary>
            <param name="startIndex">potential identifier string</param>
            <param name="index">index of the starting character</param>
            <returns>true if the character at the given position is a valid identifier part</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsValidIdentifierPart(System.String,System.Int32@)">
            <summary>
            Determines if the character(s) at the given index is a valid identifier part,
            and adjust the index to point to the following character
            </summary>
            <param name="name">potential identifier string</param>
            <param name="startIndex">index of the starting character on entry; index of the NEXT character on exit</param>
            <returns>true if the character at the given position is a valid identifier part</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.StartsWithValidIdentifierPart(System.String)">
            <summary>
            Determines whether the first character, surrogate pair, or escape sequence of the 
            given string represents a valid identifier part.
            </summary>
            <param name="text">one or more characters</param>
            <returns>true if the first character represents a valid identifier part.</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsValidIdentifierPart(System.Char)">
            <summary>
            Determines if the given charater is a valid identifier part.
            Does not work with extended UNICODE character
            </summary>
            <param name="letter">UTF-16 codepoint to test</param>
            <returns>true if the given character is a valid identifier part</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsAssignmentOperator(NUglify.JavaScript.JSToken)">
            <summary>
            Returns true of the given token is an assignment operator
            </summary>
            <param name="token">token to test</param>
            <returns>true if the token is an assignment operator</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsRightAssociativeOperator(NUglify.JavaScript.JSToken)">
            <summary>
            Returns true if the given token is a right-associative operator
            </summary>
            <param name="token">token to test</param>
            <returns>true if right-associative</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.IsReplacementToken(System.String)">
            <summary>
            determines whether a string is a replacement token value
            </summary>
            <param name="value">string to tet</param>
            <returns>true if in the format %name(.name)*(:ident)?%</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.ScanIdentifier(System.Boolean)">
            <summary>
            Scan an identifier starting at the current location, escaping any escape sequences
            </summary>
            <returns>token scanned</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.ScanAspNetBlock">
            <summary>
            Scans for the end of an Asp.Net block.
             On exit this.currentPos will be at the next char to scan after the asp.net block.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.SkipToEndOfLineOrComment">
            <summary>
            skip to either the end of the line or the comment, whichever comes first, but
            DON'T consume either of them.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.DecodeOneUnicodeEscapeSequence(System.String,System.Int32@)">
            <summary>
            Given a string and a start index, return the integer value of the UNICODE escape
            sequence at the starting position. Can be '\' 'u' hex hex hex hex or '\' 'u' '{' hex+ '}'
            </summary>
            <param name="text">text to convert</param>
            <param name="index">starting position of the escape backslash character on entry; 
            index of the next character after the escape sequence on exit</param>
            <returns>integer conversion of the valid escape sequence, or -1 if invalid</returns>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.StripAssignment(NUglify.JavaScript.JSToken)">
            <summary>
            Given an assignment operator (=, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=), strip
            the assignment to return (+, -, *, /, %, &amp;, |, ^, &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;). For all other operators,
            include the normal assign (=), just return the same operator token.
            This only works if the two groups of tokens are actually defined in those orders!!! 
            </summary>
            <param name="assignOp"></param>
            <returns></returns>
        </member>
        <member name="T:NUglify.JavaScript.JSScanner.PPOperators">
            <summary>
            Class for associating an operator with a function for ///#IF directives
            in a lazy-loaded manner. Doesn't create and initialize the dictionary
            until the scanner actually encounters syntax that needs it.
            The keys are sorted by length, decreasing (longest operators first).
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.JSScanner.PPOperators.LengthComparer">
            <summary>
            Sorting class for the sorted dictionary base to make sure the operators are
            enumerated with the LONGEST strings first, before the shorter strings.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.JSScanner.PPOperators.ConvertToNumeric(System.String,System.String,System.Double@,System.Double@)">
            <summary>
            Try converting the two strings to doubles
            </summary>
            <param name="left">first string</param>
            <param name="right">second string</param>
            <param name="leftNumeric">first string converted to double</param>
            <param name="rightNumeric">second string converted to double</param>
            <returns>true if the conversion was successful; false otherwise</returns>
        </member>
        <member name="T:NUglify.JavaScript.FieldType">
            <summary>
            Field type enumeration
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSVariableField.OnlyReference">
            <summary>
            returns the only reference IF there is only ONE reference
            in the collection; otherwise returns false.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSVariableField.OnlyDeclaration">
            <summary>
            returns the only declaration IF there is only ONE name declaration
            in the collection; otherwise returns null.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.JSVariableField.IsReferencedInnerScope">
            <summary>
            Gets a value that indicates whether this field is ever referenced in a scope
            other than the one in which it is defined
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.JSVariableField.IsSameField(NUglify.JavaScript.JSVariableField)">
            <summary>
            returns true if the fields point to the same ultimate reference object.
            Needs to walk up the outer-reference chain for each field in order to
            find the ultimate reference
            </summary>
            <param name="otherField"></param>
            <returns></returns>
        </member>
        <member name="P:NUglify.JavaScript.ScriptSharpSourceMap.SourceRoot">
            <summary>
            Gets or sets an optional source root URI that will be added to the map object as the sourceRoot property if set
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.ScriptSharpSourceMap.SafeHeader">
            <summary>
            Gets or sets a flag indicating whether or not to add a "safe" header to the map output file
            (not used by this implementation)
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.ScriptSharpSourceMap.NewLineInsertedInOutput">
            <summary>
            A new line has been inserted into the output code, so adjust the offsets accordingly
            for the next run.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.ScriptSharpSourceMap.EndOutputRun(System.Int32,System.Int32)">
            <summary>
            Signal the end of an output run by sending the NEXT position in the output
            </summary>
            <param name="lineNumber">0-based line number</param>
            <param name="columnPosition">0-based column position</param>
        </member>
        <member name="P:NUglify.JavaScript.SourceContext.OutputLine">
            <summary>
            Gets and sets the output start line after running an AST through an output visitor 
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.SourceContext.OutputColumn">
            <summary>
            Gets and sets the output start column after running an AST through an output visitor
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.SourceContext.CombineWith(NUglify.JavaScript.SourceContext)">
            <summary>
            Create a new context by combining the current and other contexts
            </summary>
            <param name="other">other context</param>
            <returns>new context instance</returns>
        </member>
        <member name="M:NUglify.JavaScript.SourceContext.SplitStart(System.Int32)">
            <summary>
            Trim off the first few characters of the context and return those characters
            as a new context. Doesn't work if the length crosses a line boundary!
            </summary>
            <param name="length">number of characters to trim off the front of this token</param>
            <returns>context for the trimmed-off portion</returns>
        </member>
        <member name="M:NUglify.JavaScript.SourceContext.UpdateWith(NUglify.JavaScript.SourceContext)">
            <summary>
            updates the current context with the other context
            </summary>
            <param name="other">other context</param>
            <returns>current context for chaining purposes</returns>
        </member>
        <member name="M:NUglify.JavaScript.SourceContext.GetSeverity(NUglify.JavaScript.JSError)">
            <summary>
            Return the default severity for a given JSError value
            guide: 0 == there will be a run-time error if this code executes
                   1 == the programmer probably did not intend to do this
                   2 == this can lead to cross-browser or future problems.
                   3 == this can lead to performance problems
                   4 == this is just not right
            </summary>
            <param name="errorCode">error code</param>
            <returns>severity</returns>
        </member>
        <member name="M:NUglify.JavaScript.SourceMapFactory.Create(System.IO.TextWriter,System.String)">
            <summary>
            Create an instance of a source map writer of the given name and from the given base stream.
            </summary>
            <param name="writer">base stream</param>
            <param name="implementationName">implementation name to create</param>
            <returns>instance of a source map writer</returns>
        </member>
        <member name="T:NUglify.JavaScript.StringList">
            <summary>
            Array of strings which can be converted to string using a single allocation and single copy
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ActivationObject.Existing">
            <summary>
            Gets or sets a boolean value for whether this is an existing scope or a new one
            generated during the current run.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.ActivationObject.DeleteFromBindingPattern(NUglify.JavaScript.Syntax.AstNode,System.Boolean)">
            <summary>
            Delete a binding from its parent pattern
            </summary>
            <param name="binding">binding to delete</param>
            <param name="normalizePattern">true to normalize the parent pattern and possibly delete it if now empty</param>
            <returns>true if deleted, otherwise false</returns>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.ActivationObject.DeclareScope">
            <summary>
            Set up this scope's fields from the declarations it contains
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.ActivationObject.GetParentBlock(NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Return the first Block node in the tree starting from the given node and working up through the parent nodes.
            </summary>
            <param name="node">initial node</param>
            <returns>first block node in the node tree</returns>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.ActivationObject.CanReference(System.String)">
            <summary>
            See if the given name will resolve to a field; do not create any inner fields
            or unknown global fields along the way.
            </summary>
            <param name="name">name to resolve</param>
            <returns>an existing resolved field, or null if nothing exists</returns>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.ActivationObject.FindReference(System.String)">
            <summary>
            Resolve the name in this scope, or go up the chain adding inner fields
            along the way until the final reference is found, creating an unknown global
            field if necessary.
            </summary>
            <param name="name">name to resolve</param>
            <returns>resolved variable field (should never be null)</returns>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.AstNode">
            <summary>
            Abstract syntax tree node
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.Parent">
            <summary>
            Gets or sets the parent node of this node in the abstract syntax tree
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.Context">
            <summary>
            Gets or sets the source context of this node
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.TerminatingContext">
            <summary>the context of any terminating character parsed after this node
            e.g. the semicolon after a statement or a comma in a parameter list</summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.IsExpression">
            <summary>
            Gets a boolean flag indicating whether this node is an expression
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.IsConstant">
            <summary>
            Gets a boolean flag indicating whether this node is a constant expression
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.IsDebugOnly">
            <summary>
            Gets or sets a flag indicating whether we have analyzed this statement and determined it
            to be for a debug-only build 
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.Index">
            <summary>
            Gets or sets the order-execution index for the node's function scope
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.Precedence">
            <summary>
            Gets the order precedence of this node, if it is an expression
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.IsDeclaration">
            <summary>
            Gets or sets a flag indicting whether this node is a declaration
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.IsWindowLookup">
            <summary>
            Gets a boolean value representing whether this node is a Lookup node resolving to the global predefined window object.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.LeftHandSide">
            <summary>
            Gets the syntax tree node representing the leftmost portion of this node's subtree.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.EnclosingScope">
            <summary>
            Get the enclosing lexical scope for this node.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.HasOwnScope">
            <summary>
            Gets a flag indicating whether or not this node has its own associated scope, or relies on a parent node's scope
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.Children">
            <summary>
            Gets an enumeration representing the child nodes of this node in the abstract syntax tree
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.AstNode.ContainsInOperator">
            <summary>
            Returns true if the node contains an in-operator
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.AstNode.FindPrimitiveType">
            <summary>
            Gets a valid indicating the primitive JavaScript type of this node, if known.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.AstNode.ReplaceChild(NUglify.JavaScript.Syntax.AstNode,NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Replace this node's specified child with another given node. 
            </summary>
            <param name="oldNode">Child node to be replaced</param>
            <param name="newNode">New node with which to replace the existing child node</param>
            <returns>true if the replacement succeeded; false otherwise</returns>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.AstNode.IsEquivalentTo(NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Abstract method to be implemented by every concrete class.
            Returns true of the other object is equivalent to this object
            </summary>
            <param name="otherNode"></param>
            <returns></returns>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.AstNode.IsGlobalNamed(System.String)">
            <summary>
            Gets a boolean value representing whether this node is a Lookup node resolving to the global name, or
            a member off the global window object with the given name.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.AstNode.Accept(NUglify.JavaScript.Visitors.IVisitor)">
            <summary>
            Abstract method to be implemented by every concrete node class
            </summary>
            <param name="visitor">visitor to accept</param>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.AstNodeList.IsEquivalentTo(NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            an astlist is equivalent to another astlist if they both have the same number of
            items, and each item is equivalent to the corresponding item in the other
            </summary>
            <param name="otherNode"></param>
            <returns></returns>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BinaryExpression.ContainsInOperator">
            <summary>
            Returns true if the expression contains an in-operator
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.BindingIdentifier">
            <summary>
            Simple Binding identifier node class. Represents a name that is declared in a binding (parameter, vardecl, catch, etc)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BindingIdentifier.Name">
            <summary>
            Gets or sets the name of the binding
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BindingIdentifier.VariableField">
            <summary>
            Gets or sets the field corresponding to this declaration
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BindingIdentifier.RenameNotAllowed">
            <summary>
            Gets or sets whether or not this declaration can be renamed
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BindingIdentifier.ScopeType">
            <summary>
            Gets or sets the scope type for this declaration (lexical or variable)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BindingIdentifier.Initializer">
            <summary>
            Gets any initializer that may be associated with this binding identifier
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BindingIdentifier.IsParameter">
            <summary>
            Gets or sets whether this binding identifier is a parameter name
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BindingIdentifier.OriginalName">
            <summary>
            Gets the original name of the identifier, before any renaming
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BindingIdentifier.WasRenamed">
            <summary>
            Gets whether or not the item was renamed
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockScope.DeclareScope">
            <summary>
            Set up this scopes lexically-declared fields
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.BlockStatement">
            <summary>
            Block of statements
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BlockStatement.Item(System.Int32)">
            <summary>
            Gets a particular statement in the list of statements making up this block
            </summary>
            <param name="index">zero-based index of the desired statement</param>
            <returns>abstract syntax tree node</returns>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BlockStatement.Count">
            <summary>
            Gets the count of statements making up this block
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BlockStatement.BraceOnNewLine">
            <summary>
            Gets or sets a boolean value indicating whether the brace for this block (if there was one) started
            on a newline (true) or the same line as the statement to which it belongs (false)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BlockStatement.IsModule">
            <summary>
            Gets or sets a flag indicating this this block is a module body
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BlockStatement.ForceBraces">
            <summary>
            Gets or sets whether to force this block to always have curly-braces around it
            and never to optimize them away.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BlockStatement.IsConcise">
            <summary>
            Gets or sets whether this block is a concise block (has no braces)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BlockStatement.IsExpression">
            <summary>
            Returns false unless the block constains only a single statement that is itself an expression.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.BlockStatement.Children">
            <summary>
            Gets an enumerator for the syntax tree nodes making up this block
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.Clear">
            <summary>
            Remove all statements from the Block
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.ReplaceChild(NUglify.JavaScript.Syntax.AstNode,NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Replace the existing direct child node of the block with a new node.
            </summary>
            <param name="oldNode">existing statement node to replace.</param>
            <param name="newNode">node with which to replace the existing node.</param>
            <returns>true if the replacement was a succeess; false otherwise</returns>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.Append(NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Append the given statement node to the end of the block
            </summary>
            <param name="item">node to add to the block</param>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.IndexOf(NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Gets the zero-based index of the given syntax tree node within the block, or -1 if the node is not a direct child of the block
            </summary>
            <param name="item">node to find</param>
            <returns>zero-based index of the node in the block, or -1 if the node is not a direct child of the block</returns>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.InsertAfter(NUglify.JavaScript.Syntax.AstNode,NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Insert the given statement node after an existing node in the block.
            </summary>
            <param name="after">exisitng child node of the block</param>
            <param name="item">node to insert after the existing node</param>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.Insert(System.Int32,NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            Insert a new node into the given position index within the block
            </summary>
            <param name="index">zero-based index into which the new node will be inserted</param>
            <param name="item">new node to insert into the block</param>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.RemoveLast">
            <summary>
            Remove the last node in the block
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.RemoveAt(System.Int32)">
            <summary>
            Remove the node at the given position index.
            </summary>
            <param name="index">Zero-based position index</param>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.BlockStatement.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{NUglify.JavaScript.Syntax.AstNode})">
            <summary>
            Insert a set of nodes into the block at the given position
            </summary>
            <param name="index">Zero-based position into which the new nodes will be inserted.</param>
            <param name="newItems">Collection of statements to insert</param>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.ClassNode">
            <summary>
            Class represents an EcmaScript 6 class node
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.ComprehensionClause">
            <summary>
            Base class for ComprehensionForClause and ComprehensionIfClause
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.ConstantWrapper.Concat(NUglify.JavaScript.Syntax.ConstantWrapper)">
            <summary>
            Optimized string literal concatenation for repeat usage pattern, avoiding multiple copying and allocation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.ConstStatement">
            <summary>
            Old-style const-statement, pre-ES6, for those browsers that basically implemented
            a var that can't be assigned to outside the declaration. Have to set the 
            <see cref="P:NUglify.JavaScript.CodeSettings.ConstStatementsMozilla" /> property to true to get these objects
            parsed, because we default to the ES6 behavior.
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.CustomNode">
            <summary>
            This is a base-class for any custom AST nodes someone may want to implement. It allows 
            these nodes to be hooked into the IVisitor framework. If you wish to create custom AST nodes,
            derive from this class.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.CustomNode.RequiresSeparator">
            <summary>
            Gets whether to add a semicolon after the node when another node follows this inside a block
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.CustomNode.IsDebuggerStatement">
            <summary>
            Gets whether the custom node is a debugger statement and should be stripped for release builds
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.Declaration.ContainsInOperator">
            <summary>
            Returns true if any of the variable declarations contain initializers using the in-operator
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ForStatement.Separator1Context">
            <summary>Context for the first semicolon, separating the initializer and the condition</summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ForStatement.Separator2Context">
            <summary>Context for the second semicolon, separating the condition and the incrementor</summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.FunctionObject.IsGenerator">
            <summary>
            Gets or sets whether this function object is a generator
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.FunctionObject.IsAsync">
            <summary>
            Gets or sets whether this function object is async
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.FunctionObject.IsReferenced">
            <summary>
            Check to see if this function is referenced. Perform a cyclic check
            because being referenced by an unreferenced function is still unreferenced.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.FunctionScope.DeclareScope">
            <summary>
            Set up this scopes lexically- and var-declared fields, plus formal parameters and the arguments object
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.GlobalScope.DeclareScope">
            <summary>
            Set up this scope's fields from the declarations it contains
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.GroupingOperator">
            <summary>
            Implementation of parenthetical '(' expr ')' operators
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ImportExportSpecifier.Name">
            <summary>
            Gets the name that is declared for this specifier.
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ImportExportSpecifier.Initializer">
            <summary>
            Gets null; import specifiers are not parameters.
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ImportExportSpecifier.IsParameter">
            <summary>
            Gets a flag indicating that this is not a parameter
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ImportExportSpecifier.RenameNotAllowed">
            <summary>
            Gets a flag to indicate that imported external named cannot be renamed.
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ImportExportSpecifier.VariableField">
            <summary>
            Gets or sets a variable field corresponding to an import specifiers imported external name
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.InitializerNode">
            <summary>
            Initializer used in bindings
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.LookupExpression.OriginalName">
            <summary>
            Gets the original name of the identifier, before any renaming
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.LookupExpression.WasRenamed">
            <summary>
            Gets whether or not the item was renamed
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ModuleDeclaration.Binding">
            <summary>
            Gets or sets the identifier used when binding all of an external modules exports as properties on a local object
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ModuleDeclaration.ModuleName">
            <summary>
            Gets or sets the module name
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ModuleDeclaration.IsImplicit">
            <summary>
            Gets or sets a flag indicating whether or not this module is an implicit module,
            parsed as an external file that gets referenced by an import statement
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ModuleScope.HasDefaultExport">
            <summary>
            Gets or sets a flag to indicate whether this module exports a default expression
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ModuleScope.IsNotComplete">
            <summary>
            Gets or sets a flag to indicate whether this module re-exports all exports from an unknown external module
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.ModuleScope.DeclareScope">
            <summary>
            Set up this scope's fields from the declarations it contains
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ParameterDeclaration.Position">
            <summary>
            Gets or sets parameter order position, zero-based
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ParameterDeclaration.HasRest">
            <summary>
            Gets or sets whether this parameter is prefixed with the rest token (...)
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ParameterDeclaration.RestContext">
            <summary>
            Gets or sets the source context for the rest token (if any)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NUglify.JavaScript.Syntax.ParameterDeclaration.Binding" -->
        <member name="P:NUglify.JavaScript.Syntax.ParameterDeclaration.AssignContext">
            <summary>
            Gets or sets the context for the optional default-value assignment token
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.Syntax.ParameterDeclaration.Initializer">
            <summary>
            Gets or sets the optional default value for the parameter
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Syntax.VarDeclaration">
            <summary>
            Summary description for variablestatement.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Syntax.WithScope.DeclareScope">
            <summary>
            Set up this scopes lexically-declared fields
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.V3SourceMap">
            <summary>
            Standard JSON source map format, version 3
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.V3SourceMap.m_hasProperty">
            <summary>whether we have output a property yet</summary>
        </member>
        <member name="P:NUglify.JavaScript.V3SourceMap.SourceRoot">
            <summary>
            Gets or sets an optional source root URI that will be added to the map object as the sourceRoot property if set
            </summary>
        </member>
        <member name="P:NUglify.JavaScript.V3SourceMap.SafeHeader">
            <summary>
            Gets or sets a flag indicating whether or not to prepend the map file with an XSSI (cross-site script injection) protection string
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.V3SourceMap.StartPackage(System.String,System.String)">
            <summary>
            Called when we start a new minified output file
            </summary>
            <param name="sourcePath">output file path</param>
        </member>
        <member name="M:NUglify.JavaScript.V3SourceMap.EndPackage">
            <summary>
            Called when we end a minified output file. write all the accumulated 
            data to the stream.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.V3SourceMap.NewLineInsertedInOutput">
            <summary>
            A new line has been inserted into the output code, so adjust the offsets accordingly
            for the next run.
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.V3SourceMap.EndOutputRun(System.Int32,System.Int32)">
            <summary>
            Signal the end of an output run by sending the NEXT position in the output
            </summary>
            <param name="lineNumber">0-based line number</param>
            <param name="columnPosition">0-based column position</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.BindingsVisitor.Bindings(NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            For the given binding node, return a collection of individual INameDeclaration
            nodes that represent the names being declared for this binding element.
            </summary>
            <param name="node">binding node</param>
            <returns>collection of INameDeclaration nodes</returns>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.BindingsVisitor.References(NUglify.JavaScript.Syntax.AstNode)">
            <summary>
            For the given binding node, return a collection of individual lookup
            nodes that represent the names being referenced.
            </summary>
            <param name="node">binding node</param>
            <returns>collection of Lookup nodes</returns>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.ReplaceMemberBracketWithDot(NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.ConstantWrapper)">
            <summary>
            If the new literal is a string literal, then we need to check to see if our
            parent is a CallNode. If it is, and if the string literal can be an identifier,
            we'll replace it with a Member-Dot operation.
            </summary>
            <param name="newLiteral">newLiteral we intend to replace this binaryop node with</param>
            <returns>true if we replaced the parent callnode with a member-dot operation</returns>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.ReplaceNodeWithLiteral(NUglify.JavaScript.Syntax.AstNode,NUglify.JavaScript.Syntax.ConstantWrapper)">
            <summary>
            replace the node with a literal. If the node was wrapped in a grouping operator
            before (parentheses around it), then we can get rid of the parentheses too, since
            we are replacing the node with a single literal entity.
            </summary>
            <param name="node">node to replace</param>
            <param name="newLiteral">literal to replace the node with</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.EvalThisOperator(NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.ConstantWrapper)">
            <summary>
            Both the operands of this operator are constants. See if we can evaluate them
            </summary>
            <param name="left">left-side operand</param>
            <param name="right">right-side operand</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.RotateFromLeft(NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.ConstantWrapper)">
            <summary>
            We have determined that our left-hand operand is another binary operator, and its
            right-hand operand is a constant that can be combined with our right-hand operand.
            Now we want to set the right-hand operand of that other operator to the newly-
            combined constant value, and then rotate it up -- replace our binary operator
            with this newly-modified binary operator, and then attempt to re-evaluate it.
            </summary>
            <param name="binaryOp">the binary operator that is our left-hand operand</param>
            <param name="newLiteral">the newly-combined literal</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.RotateFromRight(NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.ConstantWrapper)">
            <summary>
            We have determined that our right-hand operand is another binary operator, and its
            left-hand operand is a constant that can be combined with our left-hand operand.
            Now we want to set the left-hand operand of that other operator to the newly-
            combined constant value, and then rotate it up -- replace our binary operator
            with this newly-modified binary operator, and then attempt to re-evaluate it.
            </summary>
            <param name="binaryOp">the binary operator that is our right-hand operand</param>
            <param name="newLiteral">the newly-combined literal</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.NoMultiplicativeOverOrUnderFlow(NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.ConstantWrapper)">
            <summary>
            Return true is not an overflow or underflow, for multiplication operations
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <param name="result">result</param>
            <returns>true if result not overflow or underflow; false if it is</returns>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.NoOverflow(NUglify.JavaScript.Syntax.ConstantWrapper)">
            <summary>
            Return true if the result isn't an overflow condition
            </summary>
            <param name="result">result constant</param>
            <returns>true is not an overflow; false if it is</returns>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.EvalToTheLeft(NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.BinaryExpression)">
            <summary>
            Evaluate: (OTHER [op] CONST) [op] CONST
            </summary>
            <param name="thisConstant">second constant</param>
            <param name="otherConstant">first constant</param>
            <param name="leftExpression">first operator</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.EvalFarToTheLeft(NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.BinaryExpression)">
            <summary>
            Evaluate: (CONST [op] OTHER) [op] CONST
            </summary>
            <param name="thisConstant">second constant</param>
            <param name="otherConstant">first constant</param>
            <param name="leftExpression">first operator</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.EvalToTheRight(NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.BinaryExpression)">
            <summary>
            Evaluate: CONST [op] (CONST [op] OTHER)
            </summary>
            <param name="thisConstant">first constant</param>
            <param name="otherConstant">second constant</param>
            <param name="leftOperator">second operator</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.EvaluateLiteralVisitor.EvalFarToTheRight(NUglify.JavaScript.Syntax.BinaryExpression,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.ConstantWrapper,NUglify.JavaScript.Syntax.BinaryExpression)">
            <summary>
            Eval the two constants: CONST [op] (OTHER [op] CONST)
            </summary>
            <param name="thisConstant">first constant</param>
            <param name="otherConstant">second constant</param>
            <param name="rightExpression">second operator</param>
        </member>
        <member name="T:NUglify.JavaScript.Visitors.JsonOutputVisitor">
            <summary>
            output JSON-compatible code
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.JsonOutputVisitor.NewLine">
            <summary>
             output a new line and setup the proper indent level
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Visitors.MatchPropertiesVisitor">
            <summary>
            This visitor has a Match method that takes a node and an string representing an identifier list separated by periods: IDENT(.IDENT)*
            </summary>
        </member>
        <member name="T:NUglify.JavaScript.Visitors.NewParensVisitor">
            <summary>
            Determines whether or not a node needs parentheses around it within a new operator
            </summary>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.OutputVisitor.Apply(System.IO.TextWriter,NUglify.JavaScript.Syntax.AstNode,NUglify.JavaScript.CodeSettings)">
            <summary>
            Render a node tree to a text writer
            </summary>
            <param name="writer">writer to which to send output</param>
            <param name="node">node to render</param>
            <param name="settings">settings to use for output</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.OutputVisitor.Apply(NUglify.JavaScript.Syntax.AstNode,NUglify.JavaScript.CodeSettings)">
            <summary>
            Render a node tree as a string
            </summary>
            <param name="node">node to render</param>
            <param name="settings">settings to use for output</param>
            <returns>string representation of the node</returns>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.OutputVisitor.OutputFunctionArgsAndBody(NUglify.JavaScript.Syntax.FunctionObject)">
            <summary>
            Output everything for a function except the initial keyword
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.OutputVisitor.OutputBlock(NUglify.JavaScript.Syntax.BlockStatement)">
            <summary>
            outputs a semicolon for an empty block, just the statement for a single-statement block,
            and recurses to the Block visitor for mutiple-statement blocks
            </summary>
            <param name="block">block to output</param>
        </member>
        <member name="M:NUglify.JavaScript.Visitors.OutputVisitor.QuoteFactor(System.String)">
            <summary>
            Counts the number of double-quotes and single-quotes in a string
            and returns a numeric indicator for which one should be used as
            the string delimiter.
            </summary>
            <param name="text">string to test</param>
            <returns>less than zero use single-quotes, zero or more, use double-quotes</returns>
        </member>
        <member name="T:NUglify.JavaScript.Visitors.ResolutionVisitor">
            <summary>
            Traverse the tree to build up scope lexically-declared names, var-declared names,
            and lookups, then resolve everything.
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.Visitors.ResolutionVisitor.m_orderIndex">
            <summary>index to use for ordering the statements in this scope</summary>
        </member>
        <member name="F:NUglify.JavaScript.Visitors.ResolutionVisitor.m_isUnreachable">
            <summary>flag indicating whether we've encountered some unreachable code</summary>
        </member>
        <member name="F:NUglify.JavaScript.Visitors.ResolutionVisitor.m_withDepth">
            <summary>depth level of with-statements, needed so we can treat decls within with-scopes specially</summary>
        </member>
        <member name="F:NUglify.JavaScript.Visitors.ResolutionVisitor.m_lexicalStack">
            <summary>stack to maintain the current lexical scope as we traverse the tree</summary>
        </member>
        <member name="F:NUglify.JavaScript.Visitors.ResolutionVisitor.m_variableStack">
            <summary>stack to maintain the current variable scope as we traverse the tree</summary>
        </member>
        <member name="F:NUglify.JavaScript.Visitors.ResolutionVisitor.m_settings">
            <summary>code setings</summary>
        </member>
        <member name="F:NUglify.JavaScript.Visitors.ResolutionVisitor.m_scriptVersion">
            <summary>language version of the script</summary>
        </member>
        <member name="P:NUglify.JavaScript.Visitors.ResolutionVisitor.CurrentLexicalScope">
            <summary>Current lexical scope</summary>
        </member>
        <member name="P:NUglify.JavaScript.Visitors.ResolutionVisitor.CurrentVariableScope">
            <summary>current variable scope</summary>
        </member>
        <member name="P:NUglify.JavaScript.Visitors.ResolutionVisitor.NextOrderIndex">
            <summary>retrieve the next order index</summary>
        </member>
        <member name="T:NUglify.JavaScript.Visitors.StatementStartVisitor">
            <summary>
            Determines if a node at the beginning of a statement needs parentheses around it
            </summary>
        </member>
        <member name="F:NUglify.JavaScript.Visitors.StatementStartVisitor.m_isSafe">
            <summary>
            This is the flag that we are going to return to indicate whether or not
            the statement start is safe (true) or requires parens (false)
            </summary>
        </member>
        <member name="T:NUglify.JsEncoderFallback">
            <summary>
            JsEncoderFallback encodes invalid encoder characters as Unicode escapes:
                  \uXXXX
            up to six characters per escape. If the UNICODE character is in the upper
            range, we need to encode it as a surrogate pair:
                  \uUUUU\uLLLL
            
            To use this class, create an instance of it and set it to the EncoderFallback
            property of your Encoding object. You may have to clone the Encoding object
            in order to get write access to the EncoderFallback property.
            <example>
                var encoding = (Encoding)Encoding.ASCII.Clone();
                encoding.EncoderFallback = new JsEncoderFallback();
                var bytes = encoding.GetBytes(crunchedCode);
                Console.WriteLine(encoding.GetString(bytes));
            </example>
            </summary>
        </member>
        <member name="M:NUglify.JsEncoderFallback.CreateFallbackBuffer">
            <summary>
            return a fallback buffer for this encoding fallback
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUglify.JsEncoderFallback.MaxCharCount">
            <summary>
            the maximum number of characters we'll expand a single character into
            </summary>
        </member>
        <member name="T:NUglify.JSEncoderFallbackBuffer">
            <summary>
            fallback buffer for encoding unknown characters into JS Unicode escapes
            </summary>
        </member>
        <member name="P:NUglify.JSEncoderFallbackBuffer.Remaining">
            <summary>
            Number of characters remaining in the buffer
            </summary>
        </member>
        <member name="M:NUglify.JSEncoderFallbackBuffer.GetEncoding(System.Int32)">
            <summary>
            Get the single-character encoding string
            </summary>
            <param name="unknownChar">character to encode</param>
            <returns>encoded string</returns>
        </member>
        <member name="M:NUglify.JSEncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
            <summary>
            Prepare the unknown character for encoding
            </summary>
            <param name="unknownChar">character to process</param>
            <param name="index">position in input string</param>
            <returns>true if characters to process placed in buffer</returns>
        </member>
        <member name="M:NUglify.JSEncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
            <summary>
            Prepare the unknwon surrogate pair for encoding
            </summary>
            <param name="unknownCharHigh">high surrogate pair character</param>
            <param name="unknownCharLow">low surrogate pair character</param>
            <param name="index">index of character in the stream</param>
            <returns></returns>
        </member>
        <member name="M:NUglify.JSEncoderFallbackBuffer.GetNextChar">
            <summary>
            return the next character
            </summary>
            <returns>(char)0 if no character</returns>
        </member>
        <member name="M:NUglify.JSEncoderFallbackBuffer.MovePrevious">
            <summary>
            back the character position up one character
            </summary>
            <returns>false if already at front; true otherwise</returns>
        </member>
        <member name="M:NUglify.JSEncoderFallbackBuffer.Reset">
            <summary>
            reset the fallback buffer to initial state
            </summary>
        </member>
        <member name="M:NUglify.JSEncoderFallbackBuffer.ToString">
            <summary>
            Return string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUglify.OutputMode">
            <summary>
            Output mode setting
            </summary>
        </member>
        <member name="F:NUglify.OutputMode.SingleLine">
            <summary>
            Output the minified code on a single line for maximum minification.
            LineBreakThreshold may still break the single line into multiple lines
            at a syntactically correct point after the given line length is reached.
            Not easily human-readable.
            </summary>
        </member>
        <member name="F:NUglify.OutputMode.MultipleLines">
            <summary>
            Output the minified code on multiple lines to increase readability
            </summary>
        </member>
        <member name="F:NUglify.OutputMode.None">
            <summary>
            Supress code output; typically used for linting or analysis of source code
            </summary>
        </member>
        <member name="T:NUglify.Uglify">
            <summary>
            Uglify class for quick minification of JavaScript or Stylesheet code without needing to
            access or modify any abstract syntax tree nodes. Just put in source code and get our minified
            code as strings.
            </summary>
        </member>
        <member name="M:NUglify.Uglify.Html(System.String,NUglify.Html.HtmlSettings,System.String)">
            <summary>
            Crunched HTML string passed to it, returning crunched string.
            </summary>
            <param name="source">source HTML</param>
            <param name="settings">HTML minification settings</param>
            <param name="sourceFileName">The source file name used when reporting errors. Default is <c>null</c></param>
            <returns>minified HTML</returns>
        </member>
        <member name="M:NUglify.Uglify.HtmlToText(System.String,NUglify.Html.HtmlToTextOptions,System.String)">
            <summary>
            Extract the text from a HTML string.
            </summary>
            <param name="source">The source HTML</param>
            <param name="options">The options to extract the text.</param>
            <param name="sourceFileName">The source file name used when reporting errors. Default is <c>null</c></param>
            <returns>The text extracted from this HTML string</returns>
        </member>
        <member name="M:NUglify.Uglify.Js(System.String,NUglify.JavaScript.CodeSettings)">
            <summary>
            Crunched JS string passed to it, returning crunched string.
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">source Javascript</param>
            <param name="codeSettings">code minification settings</param>
            <returns>minified Javascript</returns>
        </member>
        <member name="M:NUglify.Uglify.Js(System.String,System.String,NUglify.JavaScript.CodeSettings)">
            <summary>
            Crunched JS string passed to it, returning crunched string.
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">source Javascript</param>
            <param name="fileName">File name to use in error reporting. Default is <c>input</c></param>
            <param name="codeSettings">code minification settings</param>
            <returns>minified Javascript</returns>
        </member>
        <member name="M:NUglify.Uglify.Css(System.String,System.String,NUglify.Css.CssSettings,NUglify.JavaScript.CodeSettings)">
            <summary>
            Minifies the CSS stylesheet passes to it using the given settings, returning the minified results
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">CSS Source</param>
            <param name="fileName">File name to use in error reporting. Default is <c>input</c></param>
            <param name="settings">CSS minification settings</param>
            <param name="scriptSettings">JS minification settings to use for expression-minification</param>
            <returns>Minified StyleSheet</returns>
        </member>
        <member name="T:NUglify.ExistingFileTreatment">
            <summary>
            Enumeration indicating how existing files will be treated
            </summary>
        </member>
        <member name="F:NUglify.ExistingFileTreatment.Auto">
            <summary>
            Existing files will be overwritten, but existing files marked with the read-only flag will not
            </summary>
        </member>
        <member name="F:NUglify.ExistingFileTreatment.Overwrite">
            <summary>
            Any existing file will be overwritten, regardless of the state of its read-only flag
            </summary>
        </member>
        <member name="F:NUglify.ExistingFileTreatment.Preserve">
            <summary>
            
            Existing files will be preserved (not overwritten)
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.JSSettings">
            <summary>
            Gets the parsed JavaScript code settings object
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.CssSettings">
            <summary>
            Gets the parsed CSS settings object
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.AnalyzeMode">
            <summary>
            Gets a boolean value indicating whether or not Analyze mode is specified (default is false)
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.ReportFormat">
            <summary>
            Gets a string value indication the report format specified for analyze more (default is null)
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.ReportPath">
            <summary>
            Gets the path for the analyze scope report file (default is null, output to console)
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.PrettyPrint">
            <summary>
            Gets a boolean value indicating whether or not Pretty-Print mode is specified (default is false)
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.WarningLevel">
            <summary>
            Gets or sets an integer value indicating the warning severity threshold for reporting. Default is zero (syntax errors only).
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.Clobber">
            <summary>
            Gets or sets a flag indicating how existing files should be treated.
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.EncodingOutputName">
            <summary>
            Gets the string output encoding name. Default is null, indicating the default output encoding should be used.
            </summary>
        </member>
        <member name="P:NUglify.UglifyCommandParser.EncodingInputName">
            <summary>
            Gets the string input encoding name. Default is null, indicating the default output encoding should be used.
            </summary>
        </member>
        <member name="M:NUglify.UglifyCommandParser.Parse(System.String)">
            <summary>
            Takes a full command-line string and parses the switches into the appropriate settings objects
            </summary>
            <param name="commandLine"></param>
        </member>
        <member name="M:NUglify.UglifyCommandParser.Parse(System.String[])">
            <summary>
            Takes an array of arguments and parses the switches into the appropriate settings objects
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUglify.UglifyError.ToString">
            <summary>
            Convert the exception to a VisualStudio format error message
            file(startline[-endline]?,startcol[-endcol]?):[ subcategory] category [errorcode]: message
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUglify.UglifyResult">
            <summary>
            Results of a <see cref="M:NUglify.Uglify.Css(System.String,NUglify.Css.CssSettings,NUglify.JavaScript.CodeSettings)"/> or 
            <see cref="M:NUglify.Uglify.Js(System.String,NUglify.JavaScript.CodeSettings)"/> operation.
            </summary>
        </member>
        <member name="M:NUglify.UglifyResult.#ctor(System.String,System.Collections.Generic.List{NUglify.UglifyError})">
            <summary>
            Initializes a new instance of the <see cref="T:NUglify.UglifyResult"/> struct.
            </summary>
            <param name="code">The uglified code.</param>
            <param name="messages">The Messages.</param>
        </member>
        <member name="P:NUglify.UglifyResult.Code">
            <summary>
            Gets the the uglified code. May ne null if <see cref="P:NUglify.UglifyResult.HasErrors"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:NUglify.UglifyResult.HasErrors">
            <summary>
            Gets a value indicating whether this instance has Messages.
            </summary>
        </member>
        <member name="P:NUglify.UglifyResult.Errors">
            <summary>
            Gets the Messages. Empty if no Messages.
            </summary>
        </member>
    </members>
</doc>
